<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Lyso™]]></title>
  <subtitle><![CDATA[理想主义者在现实中的舞步]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lyso.me/"/>
  <updated>2015-12-18T10:44:12.000Z</updated>
  <id>http://lyso.me/</id>
  
  <author>
    <name><![CDATA[leoyonn]]></name>
    <email><![CDATA[leoyonn@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[创业这大半年]]></title>
    <link href="http://lyso.me/2015/12/18/startup-half-hear/"/>
    <id>http://lyso.me/2015/12/18/startup-half-hear/</id>
    <published>2015-12-18T10:44:12.000Z</published>
    <updated>2015-12-18T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<h1 id="引子">引子</h1><p>我一直是一个幸运的人，过程中也有不少贵人相助，显得30岁以前的路途很顺畅。</p>
<p>小学升初中、初中升高中都拿到第一的名词，高二尝试参加高考就拿到了不错的成绩，其中语文分数是包括高三的top5%。高三高考语文却因作文跑题不及格，报考南开一分之差落榜，选择复读。这一年简简单单，一直是学校第一，小班数学老师当着全校尖子生说“刘洋是我们学校的数学权威”，这句话是我认为大学以前对我评价最高也最受用的。</p>
<p>2004年，因对开发游戏有难抑制的好奇，顺理成章考到北大计算机系。考入北大后高中班主任李老师才告诉我，他没告诉我后来南开扩招，我是可以去的，我应该念北大清华，所以李老师是我一位贵人，不是说北大比南开好多少，人生没好坏，只有是否精彩，我人生的轨迹，有一段李老师铺的路。而后保研到图形图像实验室。在学校里曾很痛苦，后来缕清了价值观，毕业时在数十个offer中放弃网易游戏等，选择网易有道。两年后因为项目被砍、招人门槛下降导致的团队质量下降等原因离开，通过朋友推荐和几个创业团队聊了不少，如春雨医生、猿题库（当时是粉笔网）、本来生活等等。经过挺长时间的思考，觉得还需要再锻炼下，加入小米。</p>
<p>2013年初，进小米时是infra组航军、account组廷彬、messaging组长者面试的我，宝秋问我想去哪个team，我说都挺好，从兴趣是 messaging &gt; account &gt; infra（后来infra出了三个HBase Committer）。宝秋说廷彬那太缺人，先去两个月，然后调到messaging。一个月后在account实现了几个功能后，就正式加入到messaging。</p>
<p>首先是小米推送，我和启亮两个从0做起，后来辅光等加入，做到千万量级时雷总才重视起来，第一次在会议桌上和他相对，他还风趣的说我“挺年轻的嘛”，哈哈，是消息组其他70后们的对比导致的，后来业务量越来越大，到目前仍然是和百度推送、个推齐名的云服务，有过亿同时在线。</p>
<p>推送业务稳定后，长者调动我和其他几位同事开始开发OMS（小米开放消息系统），在这之前我先启动了一个高并发Java基础框架的研发，目的是取代越来越难维护的Erlang。我给这个框架取名MAMPA。大约2个月的时间憋出的大招，经过在OMS、米聊、米推、米信、micloud等业务的洗礼和同事的协助review、改进，成为我觉得做过最有意思的东西，也是注入了大量的心思和思考，从架构和性能的整体和细节多个方面做了无微不至的优化改进。这个过程长者给我足够的信任和支持，所以长者是我的一位贵人，带我敲开亿万并发的大门，后来负责米聊、米推等业务的消息系统的改造优化都轻轻松松。</p>
<p>我也是一个不甘平淡的人，总觉得年轻人应该是在江河中激流，汇入一片湖泊后的平静让自己内心反不平静，接连的挑战是填补空虚的良药。</p>
<p>2015年5到恰好此时先后有朋友推荐<br>在小米的状态，长者（就你机会多）……a</p>
<h1 id="选择">选择</h1><pre><code>洋葱→刻桌→非礼→萌狮子/玩具超人
木仓科技
送姜
</code></pre><h1 id="结识与信任">结识与信任</h1><pre><code>饭局
侃未来
股份等
</code></pre><p>接手<br>     技术选型<br>     团队融合<br>改变<br>     人员离职<br>     管理方式的思考<br>     产品方向的思考<br>规划<br>     产品<br>     团队<br>融资<br>     梁姐夫<br>招人<br>     团队的从新培养<br>鼎盛<br>     10人以上的团队<br>     融洽度<br>搬家<br>     新环境没有新气象<br>裁员<br>分歧<br>     管理<br>     产品<br>     团队<br>     方向<br>     价值<br>成长<br>教训<br>打算<br>j<br><img src="http://lyso.qiniudn.com/mampa.jpg" alt="mampa"></p>
<h2 id="什么是mampa">什么是mampa</h2><p><em>MAMPA</em>的全称是：<em>xiaoMi Asynchronous Message Processing Architecture</em>，是我在小米消息组时用java开发的一套异步并发框架。</p>
<h2 id="为什么做mampa">为什么做mampa</h2><p>　　问各位一个问题：如何写并发程序？大家脑海中会浮现一堆关键词，synchronized, ReentrantReadWriteLock, Condition, await, notify, ThreadLocal, Lock, LinkedBlockingQueue, ConcurrentHashMap, volatile …… 也能想到一些其他的语言，如Erlang、Golang等。我们需要考虑到对象是需要对象和类是不是线程安全的，是不是需要在多个线程上运行，是不是要加锁，会不会造成死锁，会不会有饥饿，要不要为性能失掉一定的正确性，等等。在这种情况下，新手上路很难写出正确高效漂亮兼具的代码，高手和大牛的经验不具有可复制性可可扩展性。</p>
<p>　　小米消息系统的架构和业务逻辑代码大多用Erlang编写，这里另外一个越来越突出的问题是，大规模Erlang程序学习曲线太高，新手很难在短时间内参与到线上系统的开发和问题调查中去，这样会导致个别老员工疲于奔命……</p>
<p>　　一开始，老员工想做出这套erlang程序的java版。但后来Team Lead找到我，说我们应该着眼与更长远的目标，做一套通用的框架，让新同事写业务逻辑时就像连连线，不用考虑多线程问题。于是我开始研究Erlang中的gem_fsm，研究akka中的actor，在组里其他同事的协助和宝贵建议下，mampa出炉并一步一步走向成熟，逐步接管小米云平台消息系统各个业务中的各种模块。</p>
<h2 id="设计核心">设计核心</h2><p>　　我们的目标是，<em>设计一个高吞吐高性能的异步消息处理架构，并对开发者将并发问题隐藏起来</em>。</p>
<h3 id="从头开始">从头开始</h3><p>　　什么样的并发程序/机制是高效的？加锁？共享内存？信号量？</p>
<p>　　要回答这个问题，我们不妨想想，自然界的并发单位是什么？我们每个人都是一个并发单位，我们都在做着自己的事情，思考着自己的问题——哪里有什么共享内存？人与人之间交流，用说话，用短信，电子邮件，为什么需要在你大脑里的一块区域加锁，然后把要告诉你的信息放进去，然后再释放锁？哪有什么锁的概念？我想问题时到我自己大脑检索信息，难道也要锁不成？</p>
<p>　　我接触到这个概念是恍然大悟“是啊，是这样的”，不知道你怎么想。那在写程序时，为什么不能这样呢。这是MAMPA的设计核心思路——无锁。</p>
<h3 id="Actor：并发单元">Actor：并发单元</h3><p>　　在MAMPA中，一个并发单元就是Actor。每个Actor锁定在一个线程上：这个Actor中的所有数据只有这个线程能处理、这个线程也只为这个Actor服务。</p>
<p>　　有了Actor，怎么与之通信呢？<a href="http://golang.org/doc/effective_go.html" target="_blank" rel="external">Golang</a> 有一个我很喜欢的设计理念，</p>
<blockquote>
<p>Do not communicate by sharing memory; instead, share memory by communicating.</p>
</blockquote>
<p>　　在Golang里是通过channel传输消息的，那我们也需要给Actor做一个专用的channel，叫做mailbox。任何Actor想与其他Actor通信，就需要把消息发到他们的mailbox中，也就是说mailbox可以任意多个线程写，只有一个线程读——多线程的竞争问题只在此处体现，除此之外，全是单线程的天下，即除了mailbox的其它任意数据只有一个线程读写。</p>
<p>　　那如何高效实现这样的mailbox呢？当然有一种简单的实现方案是LinkedBlockingQueue。这个场景我们的第一反应是<a href="https://github.com/LMAX-Exchange/disruptor" target="_blank" rel="external">Disruptor</a> ，一个高效的无锁环形队列。对Disruptor的介绍参见我<a href="http://lyso.me/2013/09/01/disruptor/" target="_blank" rel="external">另一篇文章</a> 。</p>
<h2 id="应用案例">应用案例</h2><h2 id="mampa性能好在哪">mampa性能好在哪</h2>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="引子">引子</h1><p>我一直是一个幸运的人，过程中也有不少贵人相助，显得30岁以前的路途很顺畅。</p>
<p>小学升初中、初中升高中都拿到第一的名词，高二尝试参加高考就拿到了不错的成绩，其中语文分数是包括高三的top5%。高三高考语文却因作文跑题不及格，报]]>
    </summary>
    
      <category term="CEO" scheme="http://lyso.me/tags/CEO/"/>
    
      <category term="CTO" scheme="http://lyso.me/tags/CTO/"/>
    
      <category term="产品" scheme="http://lyso.me/tags/%E4%BA%A7%E5%93%81/"/>
    
      <category term="信任" scheme="http://lyso.me/tags/%E4%BF%A1%E4%BB%BB/"/>
    
      <category term="兄弟" scheme="http://lyso.me/tags/%E5%85%84%E5%BC%9F/"/>
    
      <category term="创业" scheme="http://lyso.me/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="团队" scheme="http://lyso.me/tags/%E5%9B%A2%E9%98%9F/"/>
    
      <category term="方向" scheme="http://lyso.me/tags/%E6%96%B9%E5%90%91/"/>
    
      <category term="管理" scheme="http://lyso.me/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="送姜" scheme="http://lyso.me/tags/%E9%80%81%E5%A7%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[图文排版：应该用什么样尺寸的图片？]]></title>
    <link href="http://lyso.me/2015/11/12/resolution/"/>
    <id>http://lyso.me/2015/11/12/resolution/</id>
    <published>2015-11-12T10:44:12.000Z</published>
    <updated>2015-11-12T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/resolution.jpg" alt="resolution"></p>
<h1 id="引子">引子</h1><p>新送姜以轻奢新主义为导向打造校园高品质生活，通过精心编辑精美排版的图文体验将优质内容展现给用户。为了让内容展现得淋漓尽致，图像清晰度一定要到位，否则再好的内容和文案也传达不到位，爱美之心人皆有之。但流量毕竟不是免费的，即使按包月算耗流量也会导致耗电耗时间，那多么“清晰”的图像才满足需求并且不会导致过多的流量耗费呢？我们需要从图像的构成说起。</p>
<h1 id="世界是离散的">世界是离散的</h1><p>是的，绝对的连续只在数学中存在。在自然界中，任何事物的构成单位都是离散的，你，我，一叶一菩提，一花一世界，包括光线，包括意识，都是由离散的物质构成的。在计算机的世界更甚，所有事物都是由比特构成，不可再分，没有半比特。图片（Image）是指由图形、图像等构成的平面媒体，或说用点、线、符号、文字和数字等描绘事物几何特征、形态、位置及大小的一种形式。随。在计算机术语上，图像可以分为点阵图和矢量图两大类，但真正的矢量图只是一个数学公式，一旦这个公式被表达，被人所见，就是离散的了。就像薛定谔的猫一旦被观察，就要么死要么活着。</p>
<h1 id="什么是像素、pixel、ppi、dpi、分辨率">什么是像素、pixel、ppi、dpi、分辨率</h1><h2 id="像素/pixel">像素/pixel</h2><p>计算机中的数据以比特为基本单位，那图像则以像素为基本单位。<br>像素，又称画素，为图像显示的基本单位，译自英文“pixel”，pix是英语单词picture的常用简写，加上英语单词“元素”element，就得到pixel，故“像素”表示“图像元素”之意，有时亦被称为pel(picture element)。每个这样的信息元素不是一个点或者一个方块，而是一个抽象的采样。仔细处理的话，一幅图像中的像素可以在任何尺度上看起来都不像分离的点或者方块;但是在很多情况下，它们采用点或者方块显示。每个像素可有各自的颜色值，可采三原色显示，因而又分成红、绿、蓝三种子像素(RGB色域)，或者青、品红、黄和黑(CMYK色域，印刷行业以及打印机中常见)。照片是一个个采样点的集合，故而单位面积内的像素越多代表分辨率越高，所显示的图像就会接近于真实物体。<br>简而言之，图像就是以一个一个矩阵排列的像素组成的。</p>
<h2 id="分辨率/ppi/dpi">分辨率/ppi/dpi</h2><p>分辨率这个词随着数码产品等的日益流行和平民化，衍生出两个意思：一指大小，图片的整体像素排布个数，二指解析度，也就是每个单位尺寸里能放多少像素。第一种用法举例“这张图分辨率多少？”“你的屏幕分辨率多少？”，1920x1080是指图像或屏幕是由纵向1080个、横向1920个像素组成的矩阵，共207.36万，一般说200万像素指的这种分辨率规格（当然也可以是其它长宽比，如1600x1200等）。第二种用法就是ppi（pixel per inch，每英寸像素数）/dpi（dot per inch，每英寸点数）的概念，例如300ppi指的是每英寸有300像素，iPhone 3G的屏幕分辨率是163ppi，iPhone 4/5/6的屏幕分辨率是326ppi，iPhone 6 plus的分辨率是401ppi。一般dpi用于实际物理输出时的计量，比如打印机300dpi指的是每英寸300个点，在非专业表述时这两个单位经常混用了。</p>
<h1 id="视网膜屏幕：人眼极限？">视网膜屏幕：人眼极限？</h1><p>视网膜（Retina）屏幕是苹果公司在部分移动产品使用的一种显示技术。第一次被人们熟知，是苹果将其用在iphone 4手机上，它将960×640的分辨率压缩到一个3.5英寸的显示屏内。也就是说，该屏幕的像素密度达到326像素/英寸（ppi）史蒂夫·乔布斯（Steve Jobs）在iPhone 4发布会上介绍视网膜技术时是这样阐述的：“当你所拿的东西距离你10-12英寸（约25-30厘米）时，它的分辨率只要达到300ppi这个“神奇数字”（每英寸300个像素点）以上，你的视网膜就无法分辨出像素点了。”这也就是苹果对“视网膜屏幕”的最初定义。<br>由于视网膜屏幕具备超高像素密度的液晶屏，近乎接近人眼视网膜所能分辨的能力，因此屏幕显示异常清晰、锐利，就算放眼睛近处也看不到屏幕中的颗粒。所以当每英寸屏幕上的像素超过300个（人眼的临界点），人眼的视网膜就无法分辨出像素与像素之间的间隙（颗粒感），当你在正常距离观看屏幕的时候，屏幕就犹如纸质版细腻。<br>其实严格说来，视网膜（Retina Display）甚至都算不上一种技术，而只是一个针对消费者的营销术语。它向用户展示了一种全新的显示方法，带给用户视觉上前所未有的极致体验。</p>
<h1 id="用什么样的尺寸？">用什么样的尺寸？</h1><p>那么用什么样的尺寸合适呢？在产品所要适配的分辨率最高的屏幕上仍然保持人眼无法感知颗粒的精细度即可。的那么不失一般性，以iphone最大屏幕举例，iPhone 6 plus / 6S plus（以下简称6p）在苹果官网的规格是：<br>具备 3D Touch 技术的 Retina HD 显示屏，5.5 英寸 (对角线) LED 背光宽显示屏，1920x1080像素分辨率，401 ppi，1300:1 对比度 (标准)。<br>通过截屏发现，6p的分辨率是2208x1242，正好是414x736的3倍，所以6p要用@3x的素材图。但其实这样大的尺寸是浪费了的，硬件上只支持1920x1080的分辨率，对角线长2202，对应的是5.5”，正好是401ppi。那我们提供这么大尺寸的图也没更多的好处。另一方面，人眼极限约300ppi，401ppi也浪费了，所以我们只需要图片尺寸宽度为1080x3/4=810。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/resolution.jpg" alt="resolution"></p>
<h1 id="引子">引子</h1><p>新送姜以轻奢新主义为导向打造校园高品质生活，通过精心编辑精]]>
    </summary>
    
      <category term="dpi" scheme="http://lyso.me/tags/dpi/"/>
    
      <category term="pixel" scheme="http://lyso.me/tags/pixel/"/>
    
      <category term="ppi" scheme="http://lyso.me/tags/ppi/"/>
    
      <category term="resolution" scheme="http://lyso.me/tags/resolution/"/>
    
      <category term="像素" scheme="http://lyso.me/tags/%E5%83%8F%E7%B4%A0/"/>
    
      <category term="分辨率" scheme="http://lyso.me/tags/%E5%88%86%E8%BE%A8%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[送姜高校校招]]></title>
    <link href="http://lyso.me/2015/11/05/songjiang-campus-recruitment/"/>
    <id>http://lyso.me/2015/11/05/songjiang-campus-recruitment/</id>
    <published>2015-11-05T10:44:12.000Z</published>
    <updated>2015-11-05T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-21.jpg" alt="songjiang.campus.recruitment"></p>
<h2 id="送姜高校校招">送姜高校校招</h2><p>这几天在人大、北航等高校进行了校招，送姜以新形象示人，从重型地面O2O转型到高逼格轻奢主义路线，广纳爱生活会玩乐的达人加入送姜。<br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-22.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-23.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-24.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-25.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-26.jpg" alt="songjiang.campus.recruitment"></p>
<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-01.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-02.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-03.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-04.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-05.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-06.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-07.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-08.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-09.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-10.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-11.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-12.jpg" alt="songjiang.campus.recruitment"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-21.jpg" alt="songjiang.campus.recruitment"></p>
<h2 id="送姜高校校招">送姜高校校招</h2><p>这]]>
    </summary>
    
      <category term="中关村创业大街" scheme="http://lyso.me/tags/%E4%B8%AD%E5%85%B3%E6%9D%91%E5%88%9B%E4%B8%9A%E5%A4%A7%E8%A1%97/"/>
    
      <category term="人大" scheme="http://lyso.me/tags/%E4%BA%BA%E5%A4%A7/"/>
    
      <category term="北航" scheme="http://lyso.me/tags/%E5%8C%97%E8%88%AA/"/>
    
      <category term="校招" scheme="http://lyso.me/tags/%E6%A0%A1%E6%8B%9B/"/>
    
      <category term="送姜" scheme="http://lyso.me/tags/%E9%80%81%E5%A7%9C/"/>
    
      <category term="高校" scheme="http://lyso.me/tags/%E9%AB%98%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[亿万并发的背后]]></title>
    <link href="http://lyso.me/2015/07/01/concurrency-behind-1g/"/>
    <id>http://lyso.me/2015/07/01/concurrency-behind-1g/</id>
    <published>2015-07-01T10:44:12.000Z</published>
    <updated>2015-07-01T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.001.jpeg" alt="concurrency"></p>
<h2 id="送姜技术分享会">送姜技术分享会</h2><p>在组建送姜产品研发部的过程中，举办了几期送姜技术分享会（SJTC），其中第二期我主讲，总结之前在网易有道/小米做高并发服务积累的一些经验和认知，分享内容汇总如下。</p>
<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.002.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.003.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.004.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.005.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.006.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.007.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.008.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.009.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.011.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.012.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.013.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.014.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.015.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.016.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.017.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.018.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.019.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.020.jpeg" alt="concurrency"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.001.jpeg" alt="concurrency"></p>
<h2 id="送姜技术分享会">送姜技术分享会</h2><p>在组建送姜产品]]>
    </summary>
    
      <category term="FSM" scheme="http://lyso.me/tags/FSM/"/>
    
      <category term="actor模型" scheme="http://lyso.me/tags/actor%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="erlang" scheme="http://lyso.me/tags/erlang/"/>
    
      <category term="java内存模型" scheme="http://lyso.me/tags/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="java线程模型" scheme="http://lyso.me/tags/java%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="并发" scheme="http://lyso.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="开源" scheme="http://lyso.me/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="异步" scheme="http://lyso.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="有限状态机" scheme="http://lyso.me/tags/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[小豆芽表情九连拍]]></title>
    <link href="http://lyso.me/2015/01/02/douya/"/>
    <id>http://lyso.me/2015/01/02/douya/</id>
    <published>2015-01-02T04:44:12.000Z</published>
    <updated>2015-01-03T04:44:12.000Z</updated>
    <content type="html"><![CDATA[<h4 id="今天天气不错啊，想想我也出生快5天了，是不是留点什么纪念给未来的我看呀？">今天天气不错啊，想想我也出生快5天了，是不是留点什么纪念给未来的我看呀？</h4><p><img src="http://lyso.qiniudn.com/douya1.jpg" height="400"></p>
<hr>

<h4 id="哎呀_A_great_idea_hit_me！不如咱来一个表情九连拍？真是个好主意！">哎呀 A great idea hit me！不如咱来一个表情九连拍？真是个好主意！</h4><p><img src="http://lyso.qiniudn.com/douya2.jpg" height="400"></p>
<hr>

<h4 id="笑什么笑？说你呢！不相信我会摆表情啊？今天给你见见世面">笑什么笑？说你呢！不相信我会摆表情啊？今天给你见见世面</h4><p><img src="http://lyso.qiniudn.com/douya3.jpg" height="400"></p>
<hr>

<h4 id="等等，等等……我想一下，摆个什么表情好看呢？">等等，等等……我想一下，摆个什么表情好看呢？</h4><p><img src="http://lyso.qiniudn.com/douya4.jpg" height="400"></p>
<hr>

<h4 id="小酒窝/长睫毛/迷人的无可救药/我放慢了步调/感觉像是喝醉了">小酒窝/长睫毛/迷人的无可救药/我放慢了步调/感觉像是喝醉了</h4><p><img src="http://lyso.qiniudn.com/douya5.jpg" height="400"></p>
<hr>

<h4 id="非一般的表情控制能力不是说说就算了，看咱眯一只眼睛">非一般的表情控制能力不是说说就算了，看咱眯一只眼睛</h4><p><img src="http://lyso.qiniudn.com/douya6.jpg" height="400"></p>
<hr>

<h4 id="啊呀，说到眼睛，我出生时右眼皮皮上被护士阿姨弄痛了，当时担心留下疤疤，我哭的可伤心了">啊呀，说到眼睛，我出生时右眼皮皮上被护士阿姨弄痛了，当时担心留下疤疤，我哭的可伤心了</h4><p><img src="http://lyso.qiniudn.com/douya7.jpg" height="400"></p>
<hr>

<h4 id="算了算了还是不拍了，等我完全恢复了再来">算了算了还是不拍了，等我完全恢复了再来</h4><p><img src="http://lyso.qiniudn.com/douya8.jpg" height="400"></p>
<hr>

<h4 id="喔！嘻嘻嘻，算上这一张正好九连拍了，完成任务，粉丝们下期见喔。哦对了，我叫豆芽，我的粉丝叫啥呢？豆粥？">喔！嘻嘻嘻，算上这一张正好九连拍了，完成任务，粉丝们下期见喔。哦对了，我叫豆芽，我的粉丝叫啥呢？豆粥？</h4><p><img src="http://lyso.qiniudn.com/douya9.jpg" height="400"></p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="今天天气不错啊，想想我也出生快5天了，是不是留点什么纪念给未来的我看呀？">今天天气不错啊，想想我也出生快5天了，是不是留点什么纪念给未来的我看呀？</h4><p><img src="http://lyso.qiniudn.com/douya1.jpg" heig]]>
    </summary>
    
      <category term="生命" scheme="http://lyso.me/tags/%E7%94%9F%E5%91%BD/"/>
    
      <category term="米莱" scheme="http://lyso.me/tags/%E7%B1%B3%E8%8E%B1/"/>
    
      <category term="豆芽" scheme="http://lyso.me/tags/%E8%B1%86%E8%8A%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[reactor代码浅析]]></title>
    <link href="http://lyso.me/2014/08/27/reactor/"/>
    <id>http://lyso.me/2014/08/27/reactor/</id>
    <published>2014-08-27T10:44:12.000Z</published>
    <updated>2014-08-27T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://lyso.qiniudn.com/reactor.jpg" alt=""></p>
<h2 id="简介">简介</h2><p>从<a href="http://lyso.me/2014/08/26/backpressure/" target="_blank" rel="external">Reactive-Streams</a> 的实现列表中看到了<a href="https://github.com/reactor/reactor/" target="_blank" rel="external">Reactor</a>， 但通读了其代码发现完全与reactor streams不沾边，而其做的事情与<a href="http://lyso.me/2014/02/01/mampa/" target="_blank" rel="external">MAMPA</a> 很接近，还是整理一下吧。</p>
<p>Reactor是一套在JVM上实现异步应用的框架，为Java、Groovy等JVM语言提供更便捷地搭建事件/数据驱动应用程序的底层抽象和接口，例如publish/consume事件。Reactor号称自己很快，在流行的硬件情况下，用其非阻塞Dispatcher吞吐能达到15,000,000的QPS。一个Reactor可以由多个不同的Dispatcher来实现，提交到Reactor的Task可以根据不同的配置而运行在Actor中的单个线程上/线程池中的一个线程/或LMAX Disruptor RingBuffer，如何配置可以根据业务类型来决定，比如阻塞IO操作用线程池，非阻塞快速计算用RingBuffer，等等。</p>
<h2 id="用法">用法</h2><p>可以参见其<a href="https://github.com/reactor/reactor/wiki/Usage-Guide" target="_blank" rel="external">Usage-Guide wiki</a>，简单来说，</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">// <span class="number">1.</span> 创建一个环境</span><br><span class="line">final Environment env = new Environment();</span><br><span class="line"></span><br><span class="line">// <span class="number">2.</span> 通过环境创建一个Reactor</span><br><span class="line">Reactor r = Reactors.reactor().env(env).get();</span><br><span class="line"></span><br><span class="line">// <span class="number">3.</span> 告诉Reactor如何处理事件（指定handler，即Consumer）</span><br><span class="line">reactor.on($(<span class="string">"topic"</span>), new Consumer&lt;Event&lt;Message&gt;&gt;() &#123; <span class="keyword">...</span> &#125;);</span><br><span class="line"></span><br><span class="line">// <span class="number">4.</span> 向reactor中发送消息</span><br><span class="line">Message msg = msgService.nextMessage();</span><br><span class="line">reactor.notify(<span class="string">"topic"</span>, Event.wrap(msg));</span><br></pre></td></tr></table></figure>
<p>接下来按从整体到局部、从数据源头到尾的方式，简单分析其代码架构。</p>
<h2 id="Observable/Reactor">Observable/Reactor</h2><p>Reactor的接口定义为Observable，主要提供了三种接口。</p>
<h3 id="respondsToKey">respondsToKey</h3><p>查询是否这个key在Reactor中有对应的处理</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Are there any &#123;<span class="comment">@link Registration&#125;s with &#123;@link Selector Selectors&#125; that match the given &#123;@code key&#125;.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param key</span></span><br><span class="line"> <span class="keyword">*</span>         The key to be matched by &#123;<span class="comment">@link Selector Selectors&#125;</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return &#123;@literal true&#125; if there are any matching &#123;@literal Registration&#125;s, &#123;@literal false&#125; otherwise</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">boolean respondsToKey(Object key);</span><br></pre></td></tr></table></figure>
<h3 id="on">on</h3><p>将Consumer通过Selector注册到Reactor上，如果有消息到达Reactor并在Selector中match了，会发到这个Consumer。</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Register a &#123;<span class="comment">@link reactor.function.Consumer&#125; to be triggered when a notification matches the given &#123;@link</span></span><br><span class="line"> <span class="keyword">*</span> Selector&#125;.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param sel</span></span><br><span class="line"> <span class="keyword">*</span>         The &#123;<span class="comment">@literal Selector&#125; to be used for matching</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param consumer</span></span><br><span class="line"> <span class="keyword">*</span>         The &#123;<span class="comment">@literal Consumer&#125; to be triggered</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param &lt;E&gt;</span></span><br><span class="line"> <span class="keyword">*</span>         The type of the &#123;<span class="comment">@link reactor.event.Event&#125;</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return A &#123;@link Registration&#125; object that allows the caller to interact with the given mapping</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"><span class="variable">&lt;E extends Event&lt;?&gt;</span>&gt; Registration<span class="variable">&lt;Consumer&lt;E&gt;</span>&gt; on(Selector sel, Consumer<span class="variable">&lt;E&gt;</span> consumer);</span><br></pre></td></tr></table></figure>
<h3 id="notify">notify</h3><p>notify接口有很多种，大同小异，相当于MAMPA中的tell，告诉Reactor这个事件可以进行处理了，处理完后调用参数中consumer的onComplete。</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Notify this component that an &#123;<span class="comment">@link Event&#125; is ready to be processed and &#123;@link Consumer#accept accept&#125; &#123;@code</span></span><br><span class="line"> <span class="keyword">*</span> onComplete&#125; after dispatching.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param key</span></span><br><span class="line"> <span class="keyword">*</span>         The key to be matched by &#123;<span class="comment">@link Selector Selectors&#125;</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param ev</span></span><br><span class="line"> <span class="keyword">*</span>         The &#123;<span class="comment">@literal Event&#125;</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param onComplete</span></span><br><span class="line"> <span class="keyword">*</span>         The callback &#123;<span class="comment">@link Consumer&#125;</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param &lt;E&gt;</span></span><br><span class="line"> <span class="keyword">*</span>         The type of the &#123;<span class="comment">@link Event&#125;</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return &#123;@literal this&#125;</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"><span class="variable">&lt;E extends Event&lt;?&gt;</span>&gt; Observable notify(Object key, E ev, Consumer<span class="variable">&lt;E&gt;</span> onComplete);</span><br></pre></td></tr></table></figure>
<h3 id="Reactor中的成员">Reactor中的成员</h3><p>一个Reactor中管理着如下几种成员对象。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Dispatcher                             dispatcher;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Registry&lt;Consumer<span class="preprocessor">&lt;?</span> extends Event<span class="preprocessor">&lt;?</span>&gt;&gt;&gt; consumerRegistry;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> EventRouter                            eventRouter;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Consumer&lt;Throwable&gt;                    dispatchErrorHandler;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Consumer&lt;Throwable&gt;                    uncaughtErrorHandler;</span><br></pre></td></tr></table></figure>
<ul>
<li>当外部调用<code>on</code>接口时，会将Consumer的注册信息加入到<code>consumerRegistry</code>中去</li>
<li>一个事件通过<code>notify</code>接口发送到Reactor时，Reactor通过<code>dispatcher</code>进行处理，从<code>comsuerRegistry</code>中找到响应的consumer进行处理</li>
<li>dispatcher进行分发时，需要<code>eventRouter</code>做路由</li>
<li>在事件的分发过程中如果出现异常，会调用<code>dispatchErrorHandler</code>来处理</li>
<li>在Reactor初始化时会调用<code>on</code>注册一个单独的Selector<throwable>，使用<code>uncaughtErrorHandler</code>来处理</throwable></li>
</ul>
<h2 id="Dispatcher">Dispatcher</h2><p>Dispatcher中主要是一个<code>dispatch</code>接口，负责将事件分发到对应的consumers上。</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Instruct the &#123;<span class="comment">@code Dispatcher&#125; to dispatch the &#123;@code event&#125; that has the given &#123;@code key&#125;. The &#123;@link Consumer&#125;s</span></span><br><span class="line"> <span class="keyword">*</span> that will receive the event are selected from the &#123;<span class="comment">@code consumerRegistry&#125;, and the event is routed to them using</span></span><br><span class="line"> <span class="keyword">*</span> the &#123;<span class="comment">@code eventRouter&#125;. In the event of an error during dispatching, the &#123;@code errorConsumer&#125; will be called. In</span></span><br><span class="line"> <span class="keyword">*</span> the event of successful dispatching, the &#123;<span class="comment">@code completionConsumer&#125; will be called.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param key                The key associated with the event</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param event              The event</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param consumerRegistry   The registry from which consumer's are selected</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param errorConsumer      The consumer that is invoked if dispatch fails. May be &#123;@code null&#125;</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param eventRouter        Used to route the event to the selected consumers</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param completionConsumer The consumer that is driven if dispatch succeeds May be &#123;@code null&#125;</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param &lt;E&gt;                type of the event</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@throws IllegalStateException If the &#123;@code Dispatcher&#125; is not &#123;@link Dispatcher#alive() alive&#125;</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"><span class="variable">&lt;E extends Event&lt;?&gt;</span>&gt; void dispatch(Object key,</span><br><span class="line">                                 E event,</span><br><span class="line">                                 Registry<span class="variable">&lt;Consumer&lt;? extends Event&lt;?&gt;</span>&gt;&gt; consumerRegistry,</span><br><span class="line">                                 Consumer<span class="variable">&lt;Throwable&gt;</span> errorConsumer,</span><br><span class="line">                                 EventRouter eventRouter,</span><br><span class="line">                                 Consumer<span class="variable">&lt;E&gt;</span> completionConsumer);</span><br></pre></td></tr></table></figure>
<p>在Reactor通过<code>notify</code>收到一个事件时，直接调用dispatcher的<code>dispatch</code>接口。在<code>dispatch</code>中，申请一个Task，然后提交执行：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Task</span> <span class="keyword">task</span>;</span><br><span class="line"><span class="keyword">boolean</span> isInContext = isInContext();</span><br><span class="line"><span class="keyword">if</span> (isInContext) &#123;</span><br><span class="line">    <span class="keyword">task</span> = allocateRecursiveTask();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">task</span> = allocateTask();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span>.setKey(key)</span><br><span class="line">    .setEvent(event)</span><br><span class="line">    .setConsumerRegistry(consumerRegistry)</span><br><span class="line">    .setErrorConsumer(errorConsumer)</span><br><span class="line">    .setEventRouter(eventRouter)</span><br><span class="line">    .setCompletionConsumer(completionConsumer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isInContext) &#123;</span><br><span class="line">    addToTailRecursionPile(<span class="keyword">task</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    execute(<span class="keyword">task</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至于提交执行的实现，视不同的不同的Dispatcher实现而异，Reactor中Dispatcher实现有很多种，如</p>
<ul>
<li>ActorDispatcher</li>
<li>EventLoopDispatcher</li>
<li>RingBufferDispatcher</li>
<li>NettyEventLoopDispatcher</li>
<li>ThreadPoolExecutorDispatcher</li>
<li>WorkQueueDispatcher</li>
</ul>
<p>比如RingBufferDispatcher的<code>execute</code>是直接将Task丢到实现申请好的RingBuffer的slot中：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> execute(<span class="keyword">Task</span> <span class="keyword">task</span>) &#123;</span><br><span class="line">    ringBuffer.publish(((RingBufferTask) <span class="keyword">task</span>).getSequenceId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其Task中的sequenceId是在<code>dispatch</code>中<code>allocateTask</code>时阻塞申请到的：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Task <span class="title">allocateTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> seqId = ringBuffer.next();</span><br><span class="line">    <span class="keyword">return</span> ringBuffer.<span class="keyword">get</span>(seqId).setSequenceId(seqId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后RingBuffer的消费线程会将ringBuffer中的Task依次消费执行。</p>
<p>又如<code>NettyEventLoopDispatcher</code>则更简单，直接将Task提交到Excutor上：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> execute(<span class="keyword">Task</span> <span class="keyword">task</span>) &#123;</span><br><span class="line">    eventLoop.execute(<span class="keyword">task</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Task">Task</h3><p>Task的执行是做了什么事情呢？调用EventRouter进行分发。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> route(<span class="keyword">Task</span> <span class="keyword">task</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == <span class="keyword">task</span>.eventRouter) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">task</span>.eventRouter.route(</span><br><span class="line">                <span class="keyword">task</span>.key,</span><br><span class="line">                <span class="keyword">task</span>.event,</span><br><span class="line">                (<span class="keyword">null</span> != <span class="keyword">task</span>.consumerRegistry ? <span class="keyword">task</span>.consumerRegistry.select(<span class="keyword">task</span>.key) : <span class="keyword">null</span>),</span><br><span class="line">                <span class="keyword">task</span>.completionConsumer,</span><br><span class="line">                <span class="keyword">task</span>.errorConsumer</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">task</span>.recycle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="EventRouter">EventRouter</h2><p>EventRouter进行分发的逻辑如下（以ConsumerFilterEventRouter为例），首先过滤出所有符合要求的Registration列表：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != consumers &amp;&amp; !consumers.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">List</span>&lt;Registration<span class="preprocessor">&lt;?</span> extends Consumer<span class="preprocessor">&lt;?</span> extends Event<span class="preprocessor">&lt;?</span>&gt;&gt;&gt;&gt; regs = filter.filter(consumers, key);</span><br></pre></td></tr></table></figure>
<p>然后对每一个Registration，调用其Selector的HeaderResolver将headers塞到event里，并调用<code>ConsumerInvoker</code>的<code>invoke</code>：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">size</span> = regs.<span class="keyword">size</span>();</span><br><span class="line"><span class="comment">// old-school for loop is much more efficient than using an iterator</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">size</span>; i++) &#123;</span><br><span class="line">    Registration&lt;? <span class="keyword">extends</span> Consumer&lt;? <span class="keyword">extends</span> Event&lt;?&gt;&gt;&gt; reg = regs.get(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == reg || reg.isCancelled() || reg.isPaused()) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != reg.getSelector().getHeaderResolver()) &#123;</span><br><span class="line">            event.getHeaders().setAll(reg.getSelector().getHeaderResolver().resolve(key));</span><br><span class="line">        &#125;</span><br><span class="line">        consumerInvoker.invoke(reg.getObject(), <span class="keyword">Void</span>.TYPE, event);</span><br></pre></td></tr></table></figure>
<p>在出现问题时如果遇到CancelConsumerException则将Registration取消，对其他异常调用<code>errorConsumer</code>进行处理。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (CancelConsumerException cancel) &#123;</span><br><span class="line">            reg.cancel();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != <span class="keyword">event</span>.getErrorConsumer()) &#123;</span><br><span class="line">                <span class="keyword">event</span>.consumeError(t);</span><br><span class="line">            &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(<span class="keyword">null</span> != errorConsumer)</span> </span>&#123;</span><br><span class="line">                errorConsumer.accept(t);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.error(<span class="string">"Event routing failed for &#123;&#125;: &#123;&#125;"</span>, reg.getObject(), t.getMessage(), t);</span><br><span class="line">                <span class="keyword">if</span> (RuntimeException.class.isInstance(t)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reg.isCancelAfterUse()) &#123;</span><br><span class="line">                reg.cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完成转发后如果<code>completionConsumer</code>存在则执行其accept：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (null != completionConsumer) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            consumerInvoker.invoke(completionConsumer, Void.<span class="keyword">TYPE</span>, event);</span><br><span class="line">        &#125; catch (Exception <span class="keyword">e</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (null != errorConsumer) &#123;</span><br><span class="line">                errorConsumer.accept(<span class="keyword">e</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.<span class="keyword">error</span>(<span class="string">"Completion Consumer &#123;&#125; failed: &#123;&#125;"</span>, completionConsumer, <span class="keyword">e</span>.getMessage(), <span class="keyword">e</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Registry、Registration">Registry、Registration</h2><p>一个Registry管理一个Reactor中所有的Regitration，可以认为它就是一个Registration的List，有接口<code>register</code>，<code>unregister</code>，<code>clear</code>：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Assign the given &#123;<span class="comment">@link reactor.event.selector.Selector&#125; with the given object.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param sel The left-hand side of the &#123;@literal Selector&#125; comparison check.</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param obj The object to assign.</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return &#123;@literal this&#125;</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"><span class="variable">&lt;V extends T&gt;</span> Registration<span class="variable">&lt;V&gt;</span> register(Selector sel, V obj);</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Remove any objects matching this &#123;<span class="comment">@code key&#125;. This will unregister &lt;b&gt;all&lt;/b&gt; objects matching the given</span></span><br><span class="line"> <span class="keyword">*</span> &#123;<span class="comment">@literal key&#125;. There's no provision for removing only a specific object.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param key The key to be matched by the Selectors</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return &#123;@literal true&#125; if any objects were unassigned, &#123;@literal false&#125; otherwise.</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">boolean unregister(Object key);</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Select &#123;<span class="comment">@link Registration&#125;s whose &#123;@link Selector&#125; &#123;@link Selector#matches(Object)&#125; the given &#123;@code key&#125;.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param key The key for the Selectors to match</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return A &#123;@link List&#125; of &#123;@link Registration&#125;s whose &#123;@link Selector&#125; matches the given key.</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">List<span class="variable">&lt;Registration&lt;? extends T&gt;</span>&gt; select(Object key);</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Clear the &#123;<span class="comment">@link Registry&#125;, resetting its state and calling &#123;@link Registration#cancel()&#125; for any active &#123;@link</span></span><br><span class="line"> <span class="keyword">*</span> Registration&#125;.</span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">void clear();</span><br></pre></td></tr></table></figure>
<p>可以看到，<code>register</code>接口会返回<code>Registration</code>，Registration描述了一个<code>Selector</code>和一个<code>Consumer</code>的对应关系，有<code>getSelector</code>，<code>getObject</code>，<code>cancel</code>等接口，其中getObject就是获取Consumer：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> The &#123;<span class="comment">@link reactor.event.selector.Selector&#125; that was used when the registration was made.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return the registration's selector</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">Selector getSelector();</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> The object that was registered</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return the registered object</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">T getObject();</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Cancel this &#123;<span class="comment">@literal Registration&#125; by removing it from its registry.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return &#123;@literal this&#125;</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line">Registration<span class="variable">&lt;T&gt;</span> cancel();</span><br></pre></td></tr></table></figure>
<p>在Reactor中的<code>on</code>接口中就是执行了注册操作：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">public &lt;<span class="keyword">E</span> extends Event&lt;?&gt;&gt; Registration&lt;Consumer&lt;<span class="keyword">E</span>&gt;&gt; <span class="keyword">on</span>(Selector selector, final Consumer&lt;<span class="keyword">E</span>&gt; consumer) &#123;</span><br><span class="line">    <span class="keyword">Assert</span>.notNull(selector, <span class="string">"Selector cannot be null."</span>);</span><br><span class="line">    <span class="keyword">Assert</span>.notNull(consumer, <span class="string">"Consumer cannot be null."</span>);</span><br><span class="line">    Registration&lt;Consumer&lt;<span class="keyword">E</span>&gt;&gt; <span class="keyword">reg</span> = consumerRegistry.register(selector, consumer);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reg</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而在Registry的<code>select</code>接口中，就是通过遍历其Registration的Selector的match来找到Registration列表来实现的：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">public <span class="built_in">List</span>&lt;Registration&lt;? <span class="keyword">extends</span> T&gt;&gt; select(<span class="built_in">Object</span> key) &#123;</span><br><span class="line">    <span class="comment">// maybe pull Registrations from cache for this key</span></span><br><span class="line">    <span class="built_in">List</span>&lt;Registration&lt;? <span class="keyword">extends</span> T&gt;&gt; selectedRegs = FastList.newList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find Registrations based on Selector</span></span><br><span class="line">    <span class="keyword">for</span> (Registration&lt;? <span class="keyword">extends</span> T&gt; reg : <span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (reg.getSelector().matches(key)) &#123;</span><br><span class="line">            selectedRegs.add(reg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// nothing found, maybe invoke handler</span></span><br><span class="line">    <span class="keyword">if</span> (selectedRegs.isEmpty() &amp;&amp; <span class="keyword">null</span> != onNotFound) &#123;</span><br><span class="line">        onNotFound.accept(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return</span></span><br><span class="line">    <span class="keyword">return</span> selectedRegs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Selector">Selector</h2><p>Selector的接口就不言自明了，需要提供<code>match</code>和<code>getHeaderResolver</code>：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Indicates whether this Selector matches the &#123;<span class="comment">@code key&#125;.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param key The key to match</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return &#123;@code true&#125; if there's a match, otherwise &#123;@code false&#125;.</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">boolean matches(Object key);</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Return a component that can resolve headers from a key</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return A &#123;@link HeaderResolver&#125; applicable to this &#123;@link Selector&#125; type.</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">HeaderResolver getHeaderResolver();</span><br></pre></td></tr></table></figure>
<h2 id="Consumer">Consumer</h2><p>最后我们到了Consumer，看它的接口：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Implementations accept a given value and perform work on the argument.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@author Jon Brisbin</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@author Stephane Maldini</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param &lt;T&gt; the type of values to accept</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">public interface Consumer<span class="variable">&lt;T&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    /<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> Execute the logic of the action, accepting the given parameter.</span><br><span class="line">     <span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@param t The parameter to pass to the consumer.</span></span><br><span class="line">     <span class="keyword">*</span>/</span><br><span class="line">    void accept(T t);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Reactor_vs-_Mampa">Reactor vs. Mampa</h2>]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://lyso.qiniudn.com/reactor.jpg" alt=""></p>
<h2 id="简介">简介</h2><p>从<a href="http://lyso.me/2014/08/26/backpressure/" targe]]>
    </summary>
    
      <category term="mampa" scheme="http://lyso.me/tags/mampa/"/>
    
      <category term="reactive streams" scheme="http://lyso.me/tags/reactive-streams/"/>
    
      <category term="reactor" scheme="http://lyso.me/tags/reactor/"/>
    
      <category term="并发" scheme="http://lyso.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="开源" scheme="http://lyso.me/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="异步" scheme="http://lyso.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[back pressure及reactive streams研究]]></title>
    <link href="http://lyso.me/2014/08/26/backpressure/"/>
    <id>http://lyso.me/2014/08/26/backpressure/</id>
    <published>2014-08-26T10:44:12.000Z</published>
    <updated>2014-08-26T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://lyso.qiniudn.com/backpressure.png" alt="back pressure-图片来自akka"></p>
<h2 id="引子">引子</h2><p>　　随着<a href="http://lyso.me/2014/02/01/mampa/" target="_blank" rel="external">Mampa</a> 越来越多的应用在线上系统中，我们在逐步优化同时，发现一个很难绕过去的问题。一个系统中可能有多个ActorGroup，每个ActorGroup中负责一中业务类型（或层次）。比如：</p>
<ul>
<li>FetchActor中负责fetch消息的接收、处理、发回</li>
<li>RedisActor中负责消息中与redis请求相关的操作，发请求到redis-server并把server的返回结果解码后返回给FetchActor</li>
<li>HBaseActor同RedisActor，负责处理HBase相关请求</li>
<li>KakfaActor负责处理与Kafka相关的请求</li>
</ul>
<p>　　如果当前HBase性能较差，RedisActor又没有挡住大量的请求，而FetchActor中过来的消息太快，根据<a href="http://lyso.me/2014/07/26/queue-threory-littles-law/" target="_blank" rel="external">排队理论</a> 中所述，对于HBaseActor这样一个子系统来说，如果消息到达速率 &gt; 服务速率，这就不是一个稳定的系统，会导致Queue快速增长，直至内存爆掉或达到保护上限。到此上限后怎么处理更多的请求：</p>
<ul>
<li>丢弃</li>
<li>将压力向上反馈到源头</li>
</ul>
<p>　　第二种方法，就是我们所要系统考虑的back pressure。</p>
<h2 id="什么是back_pressure">什么是back pressure</h2><p>　　这种情况一般成为“持续压力”（sustained load），如果系统设计时不慎重考虑过载的情况，可能造成的结果是完全无法服务。如果请求量超过了系统的处理能力，就是要做取舍决定的时候了：Something has to give。比较理想的降级服务方法是，让系统仍以正常的latency、以最高的吞吐运行，而高于这个吞吐的那部分请求就拒绝服务好了。</p>
<p>　　举一个过载例子。小米公司每周四都去奥体打羽毛球，8-10块场地，每块场地都&gt;8个人，打起来都觉得等的时间长，汗都出不来，再加上2B的奥体服务态度，忒不爽了。如果采用报名制，每个场地报名6人，报名晚的就只能自己想办法了——比如自己花个钱定场地，那结果是绝得大多数都玩的爽。（当然不久后场地会换到西三旗伟士，没有2B管理员后打的会更爽）</p>
<p>　　什么是“Back Pressure”呢？再比如小米食堂里有500个座位，平均每人吃饭30min，如果同时有超过500个人到食堂，那就得有人等座，再加上饭菜不好吃肯定给差评了。如果可以即时在门口放一个牌子，显示已经进去了多少人（减去已经吃完出来的，就像很多车库的电子指示牌一样），发现食堂比较满的人就可以先不进去，去大桥上溜溜弯，去小米之家看会“万万想不到”，去咖啡厅坐会聊聊天…… 这样食堂里面正在吃饭的也觉得环境宽松，心情不错。根据Little’s Law，食堂不能服务超过每小时1000人，如果12:00-12:30有600人来吃饭，那就有100人在咖啡厅或其它地方消遣。在线上系统亦是如此，超过系统处理能力的部分如果能及时反馈到咖啡厅、大桥上，就是实现了BackPressure。</p>
<h2 id="什么是reactive_streams">什么是reactive streams</h2><p>　　Reactive Streams 是一个在JVM上提供有非阻塞Back-Pressure能力的异步数据流的计划。</p>
<h3 id="要解决的问题">要解决的问题</h3><p>　　处理实时数据流在异步系统里尤其需要小心，其中最主要的问题是在数据流的入口需要控制好不至于后续阶段中被冲垮。</p>
<p>　　Reactive streams的主要目标是在“异步边界”上控制数据流的流量，例如把数据传输给另一个线程或线程池时需要确保其不会buffer溢出。换句话说，Back Pressure 是整个模型中重要的环节以确保队列大小的可控（<a href="http://lyso.me/2014/07/26/queue-threory-littles-law/" target="_blank" rel="external">队列：稳定的系统</a>）。 如果Back Pressure是同步的，那整个系统的异步带来的好处就不存在了。</p>
<h3 id="First_Draft_Specification">First Draft Specification</h3><p>Available immediately is a First Draft Specification covering:</p>
<ul>
<li><a href="https://github.com/reactive-streams/reactive-streams/blob/v0.3/tck/src/main/resources/spec.md" target="_blank" rel="external">Semantics</a> —a specification document</li>
<li><a href="https://github.com/reactive-streams/reactive-streams/tree/v0.3/spi/src/main/java/org/reactivestreams/api/" target="_blank" rel="external">API</a> —Java interfaces for end users</li>
<li><a href="https://github.com/reactive-streams/reactive-streams/tree/v0.3/spi/src/main/java/org/reactivestreams/spi/" target="_blank" rel="external">SPI</a> —Java interfaces for implementations</li>
<li><a href="https://github.com/reactive-streams/reactive-streams/tree/v0.3/tck/src/main/java/org/reactivestreams/tck/" target="_blank" rel="external">TCK</a> —a test harness to validate implementations and guide implementors<br>All of the parts of the Draft Proposal is released under Creative Commons Zero (Public Domain).</li>
</ul>
<h3 id="Implementations_of_the_draft_spec">Implementations of the draft spec</h3><ul>
<li>Akka Streams<ul>
<li>See this Activator template introducing the Akka Project implementation in Scala; a Java version will follow shortly.</li>
<li>Please give Feedback on the issue tracker.</li>
</ul>
</li>
<li>Reactor Composable<ul>
<li><a href="http://github.com/reactor/reactor" target="_blank" rel="external">Reactor (1.1+)</a></li>
<li>Current Implementation Draft is being explored for 1.1 and onwards, see Reactor Composable</li>
</ul>
</li>
<li>RxJava<ul>
<li>Support being prototyped and explored for inclusion in RxJava 1.0<h3 id="Implementors">Implementors</h3></li>
</ul>
</li>
</ul>
<p>To get started implementing the draft specification, it is recommended to start by reading the README, then taking a look at the Specification then taking a look at the TCK. If you have an issue with any of the above, please take a look at closed issues and then open a new issue if it has not already been answered.</p>
<h2 id="接口定义">接口定义</h2><p>　　Reactive Streams的接口分为两种，用户使用的接口和实现使用的接口。</p>
<p>　　用户实现的接口包括Producer、Consumer、Processor，实现使用的接口包括Publisher、Subscriber、Subscription。</p>
<h3 id="Producer">Producer</h3><p>　　Producer是消息源，底层实现使用Publisher。Producer中有2个接口，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Producer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Publisher&lt;T&gt; <span class="title">getPublisher</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceTo</span><span class="params">(Consumer&lt;T&gt; consumer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>getPublisher：获取底层实现的Publisher</li>
<li>produceTo：将制定的consumer连接到此producer上，在底层实现上需要让consumer去subscribe这个producer的publisher，之后producer产生的stream就能一直被这个consumer消费了，直到以下情况之一：<ul>
<li>Stream里没有数据了</li>
<li>Producer抛异常了</li>
<li>Consumer取消接收更多消息</li>
</ul>
</li>
</ul>
<h3 id="Consumer">Consumer</h3><p>　　Consumer消费消息的stream，由Subscriber实现，只提供一个getSubscriber接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Subscriber&lt;T&gt; <span class="title">getSubscriber</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Processor">Processor</h3><p>　　Processor包含了Producer和Consumer的功能，consume <i>类型的消息，produce <o>类型的消息：</o></i></p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Processor</span>&lt;<span class="title">I</span>, <span class="title">O</span>&gt; <span class="keyword">extends</span> <span class="title">Consumer</span>&lt;<span class="title">I</span>&gt;, <span class="title">Producer</span>&lt;<span class="title">O</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Publisher">Publisher</h3><p>　　Publisher是消息源，一个或多个Subscriber会连接到publisher上接收publisher产生的消息，通过Subscription的<code>requestMore</code>接口来决定是否生成更多消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Publisher</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Subscriber&lt;T&gt; subscriber)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Subscriber">Subscriber</h3><p>　　Subscriber从Publisher接收消息，通过Subscription的<code>requestMore</code>接口向publisher提交“需求”，只有当“需求”和publisher的消息都有的情况下才会接收到更多消息。</p>
<p>　　Subscriber被传送到Publisher进行subscribe时，如果producer接受此subscribe，会调用<code>onSubscribe</code>接口，如果拒绝会调用<code>onError</code>接口。</p>
<p>　　Publisher在条件满足（有需求且有更多的消息）的情况下调用<code>onNext</code>向Subscriber发送消息。</p>
<p>　　如果Publisher已经结束产生更多消息，会调用<code>onComplete</code>通知Subscriber。</p>
<p>　　如果生成消息的stream出了问题无法恢复，也会调用<code>onError</code>通知Sbuscriber。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription subscription)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T element)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable cause)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Subscription">Subscription</h3><p>　　Subscription描述一个Subscriber对一个Publisher的注册，注册成功后才可以通过这个Subscription的<code>requestMore</code>接口向Producer索取更多消息。</p>
<p>　　可以通过<code>cancel</code>接口取消掉这个subscription，取消时即使Publisher还有更多消息，也会停止向对应的Subscriber发送。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Subscription</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestMore</span><span class="params">(<span class="keyword">int</span> elements)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Mampa里怎么做">Mampa里怎么做</h2><p>TO BE ADDED…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://lyso.qiniudn.com/backpressure.png" alt="back pressure-图片来自akka"></p>
<h2 id="引子">引子</h2><p>　　随着<a href="http://lyso.me/2]]>
    </summary>
    
      <category term="Reactive Streams" scheme="http://lyso.me/tags/Reactive-Streams/"/>
    
      <category term="back pressure" scheme="http://lyso.me/tags/back-pressure/"/>
    
      <category term="mampa" scheme="http://lyso.me/tags/mampa/"/>
    
      <category term="并发" scheme="http://lyso.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="开源" scheme="http://lyso.me/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="异步" scheme="http://lyso.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mampa应用之——小米推送Fetcher服务性能调校]]></title>
    <link href="http://lyso.me/2014/08/05/fetcher-mampa/"/>
    <id>http://lyso.me/2014/08/05/fetcher-mampa/</id>
    <published>2014-08-05T13:22:11.000Z</published>
    <updated>2015-04-02T02:46:57.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.xiaomi.com/wp-content/uploads/2014/03/mipush.jpg" alt=""></p>
<h3 id="背景">背景</h3><p>小米消息推送系统在前不久开始使用<a href="http://lyso.me/2014/02/01/mampa/" target="_blank" rel="external">MAMPA</a> 进行异步化改造，改造的过程中，发现对hbase的读写是关键路径，而这一步骤是同步操作，与mampa的异步化框架是相悖的，可优化空间并不大，调试很久后性能甚至尚未达到原同步版：要么线程数开少了竞争不过其它的非异步化实例，要么线程数开太多导致load太高，性能更差。</p>
<p>随后我们分析到hbase性能方面的问题后，参考<a href="https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final170_update.pdf&amp;sa=U&amp;ei=gWJjU97pOeqxsQSDkYDAAg&amp;ved=0CBsQFjAA&amp;usg=AFQjCNGMeuWne9ywncbgux_XiZW6lQWHNw" target="_blank" rel="external">Scaling memcache at Facebook</a> <a href="http://qcontokyo.com/pdf/qcon_MarcKwiatkowski.pdf" target="_blank" rel="external">PPT</a> 设计了一套leased-cache，底层使用<a href="http://lyso.me/2014/03/10/redis-mampa/" target="_blank" rel="external">redis-mampa</a> （使用netty的异步化pipiline redis客户端）。</p>
<h3 id="初步试验">初步试验</h3><h4 id="实验环境：">实验环境：</h4><ul>
<li>hostA 作为压力测试客户端；</li>
<li>hostB 作为fetcher业务服务端；</li>
<li>hostC 作为redis、rabbitmq；</li>
<li>hostD 作为mysql；</li>
<li>Hbase访问采用mock数据并sleep一定时常方式；</li>
</ul>
<h4 id="实验环境：-1">实验环境：</h4><ul>
<li>HBase请求 sleep100ms左右；</li>
<li>Fetcher主逻辑线程6个、redis线程实验1/2/4/8个、hbase-mampa线程64个；</li>
</ul>
<h4 id="实验数据：">实验数据：</h4><ul>
<li>初始状态，cache里没有任何数据，请求全落到hbase：<ul>
<li>qps = 600，latency.99 =800ms</li>
</ul>
</li>
<li>以qps = 600将200w数据灌到redis中，模拟cache全命中情况：<ul>
<li>qps = 10000, latency.99 = 800ms，redis的latency.average在30ms左右</li>
<li>最大qps可以达到12000，此时查看数据生成导致mysql访问总是存在（mysql在主业务线程里访问，latency=0.5ms，6个线程qps峰值则为12000，后续可以通过mock 数据不需要访问mysql的情况来测试）</li>
</ul>
</li>
</ul>
<p>这里首先得到初步印象，latency的.99在800ms时，qps能达到10000，但没有获取到redis的latency.99以及这800ms的分布情况，而且有一个奇怪的现象是改变redis线程个数对结果影响不是太大，跟单独测试redis-mampa的性能情况不符。接下来进行更细致的实验和调校。</p>
<h3 id="实验调校">实验调校</h3><h4 id="步骤1：qps=5000">步骤1：qps=5000</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">6</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">4</span></span><br><span class="line"><span class="variable">qps=</span><span class="number">5000</span></span><br></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wait~before~process.HIST-75-percentile</span>: <span class="string">86.0</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-95-percentile</span>: <span class="string">105.0</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-99-percentile</span>: <span class="string">118.71000000000004</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-999-percentile</span>: <span class="string">123.971</span></span><br><span class="line"></span><br><span class="line"><span class="stylus">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">73.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">115.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">142.71000000000004</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">191.942</span></span></span><br></pre></td></tr></table></figure>
<p>消息在系统中处理的总时间.99为142.71ms，latency是可以接受的，先看下这些时间的主要分布，之后增加qps后再放大地看是否存在问题：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-75-percentile</span>: <span class="number">2.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-95-percentile</span>: <span class="number">14.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-99-percentile</span>: <span class="number">46.710000000000036</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-999-percentile</span>: <span class="number">59.971000000000004</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-75-percentile</span>: <span class="number">22.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-95-percentile</span>: <span class="number">57.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-99-percentile</span>: <span class="number">64.71000000000004</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-999-percentile</span>: <span class="number">91.71000000000004</span></span><br><span class="line"></span><br><span class="line">(from tell是from send的超集，包括在actor的mailbox的时间）</span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-75-percentile</span>: <span class="number">37.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-95-percentile</span>: <span class="number">65.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-99-percentile</span>: <span class="number">70.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-999-percentile</span>: <span class="number">96.85500000000002</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤2：qps=8000">步骤2：qps=8000</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">6</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">4</span></span><br><span class="line"><span class="variable">qps=</span><span class="number">8000</span></span><br></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wait~before~process.HIST-75-percentile</span>: <span class="string">111.0</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-95-percentile</span>: <span class="string">142.0</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-99-percentile</span>: <span class="string">160.42000000000007</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-999-percentile</span>: <span class="string">164.971</span></span><br><span class="line"></span><br><span class="line"><span class="stylus">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">118.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">173.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">228.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">295.1880000000001</span></span></span><br></pre></td></tr></table></figure>
<p>消息在系统中处理的总时间.99为228ms，主要分布如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-75-percentile</span>: <span class="number">4.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-95-percentile</span>: <span class="number">26.549999999999955</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-99-percentile</span>: <span class="number">74.97000000000025</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-999-percentile</span>: <span class="number">99.0</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-75-percentile</span>: <span class="number">49.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-95-percentile</span>: <span class="number">165.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-99-percentile</span>: <span class="number">196.71000000000004</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-999-percentile</span>: <span class="number">207.0</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-75-percentile</span>: <span class="number">81.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-95-percentile</span>: <span class="number">174.54999999999995</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-99-percentile</span>: <span class="number">204.42000000000007</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-999-percentile</span>: <span class="number">210.0</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤3：qps=10000">步骤3：qps=10000</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">6</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">4</span></span><br><span class="line"><span class="variable">qps =</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wait~before~process<span class="class">.HIST-75-percentile</span>: <span class="number">131.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-95-percentile</span>: <span class="number">227.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-99-percentile</span>: <span class="number">463.5500000000002</span></span><br><span class="line">wait~before~process<span class="class">.HIST-999-percentile</span>: <span class="number">499.884</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">2451.5</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">3307.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">3501.42</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">3581.980000000001</span></span><br></pre></td></tr></table></figure>
<p>消息在系统中处理的总时间.99飙升到3.5s，比之前初步实验时的情况还差，主要分布如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-75-percentile</span>: <span class="number">43.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-95-percentile</span>: <span class="number">330.2999999999997</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-99-percentile</span>: <span class="number">699.0100000000011</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-999-percentile</span>: <span class="number">1298.5780000000004</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-75-percentile</span>: <span class="number">32.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-95-percentile</span>: <span class="number">151.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-99-percentile</span>: <span class="number">133294.30000000008</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-999-percentile</span>: <span class="number">136519.942</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-75-percentile</span>: <span class="number">57.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-95-percentile</span>: <span class="number">310.3499999999983</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-99-percentile</span>: <span class="number">133891.84</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-999-percentile</span>: <span class="number">136521.681</span></span><br></pre></td></tr></table></figure>
<p>打到200w请求时，问题暴露出来了，这时发现内存飙升！<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="setting">load = <span class="value"><span class="number">5</span></span></span></span><br><span class="line"><span class="setting">mem=<span class="value"><span class="number">15</span>G</span></span></span><br></pre></td></tr></table></figure></p>
<h4 id="步骤4：分析内存异常">步骤4：分析内存异常</h4><p>重复实验几次后，大多数情况下都能重现内存暴涨的情况。于是通过 <a href="http://lyso.me/2014/07/01/bytebuf-memleak" target="_blank" rel="external">MAT分析java内存</a> 发现，redis-mampa内部的queue的size暴涨。这个queue是用来缓存pipiline发送到redis-server的命令以解析结果的发回给客户端的，当netty到redis-server这条通道的消息速度比客户端发来的慢时，就会导致queue堆积。</p>
<p>这就需要两个角度解决问题：</p>
<ol>
<li>需要对queue的size设置上限，在达到上限时降级服务，并打perf-counter</li>
<li>调查为何queue会堆积，因为qps没有达到实验性能</li>
</ol>
<h4 id="步骤5：queue-size限制">步骤5：queue-size限制</h4><p>加上 queue size 限制及perf：<br><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">6</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">4</span></span><br><span class="line"><span class="variable">qps =</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></p>
<p>跑第一次时发现latency很小并且内存未涨，重复实验后又重现压力大的情况，但表现是：绝大多数请求因为redis超时和queue堆积而丢掉了（latency也很大）：<br><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">redis~mampa~fail~<span class="built_in">queue</span>~<span class="literal">full</span><span class="built_in">.</span>COUNTER<span class="subst">=</span><span class="number">761222</span></span><br></pre></td></tr></table></figure></p>
<p>但查看redis-server的cpu/内存占用情况和机器load情况都无异常，猜测是由于主业务actor和redis-mampa的actor都是基于多优先级版disruptor的，用的SleepingWaitStrategy，这个等待策略先spin100次、再spin并yield100次、然后parkNanos，对CPU占用较大（由于是多优先级队列，不易使用BlockingWaitStrategy），于是将线程数改掉继续试验。</p>
<h4 id="步骤6：调整线程数">步骤6：调整线程数</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">3</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">3</span></span><br><span class="line"><span class="variable">qps =</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wait~before~process<span class="class">.HIST-75-percentile</span>: <span class="number">133.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-95-percentile</span>: <span class="number">167.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-99-percentile</span>: <span class="number">175.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-999-percentile</span>: <span class="number">196.942</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">131.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">201.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">249.71000000000004</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">260.913</span></span><br><span class="line"></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-75-percentile</span>: <span class="number">5.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-95-percentile</span>: <span class="number">29.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-99-percentile</span>: <span class="number">55.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-999-percentile</span>: <span class="number">114.59400000000005</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-75-percentile</span>: <span class="number">58.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-95-percentile</span>: <span class="number">109.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-99-percentile</span>: <span class="number">156.71000000000004</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-999-percentile</span>: <span class="number">171.971</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-75-percentile</span>: <span class="number">67.75</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-95-percentile</span>: <span class="number">116.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-99-percentile</span>: <span class="number">167.1300000000001</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-999-percentile</span>: <span class="number">172.0</span></span><br></pre></td></tr></table></figure>
<p>数据表示毫无压力，继续增加qps试试。</p>
<h4 id="步骤7：qps=12000">步骤7：qps=12000</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">3</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">3</span></span><br><span class="line"><span class="variable">qps=</span><span class="number">12000</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wait~before~process<span class="class">.HIST-75-percentile</span>: <span class="number">144.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-95-percentile</span>: <span class="number">166.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-99-percentile</span>: <span class="number">181.71000000000004</span></span><br><span class="line">wait~before~process<span class="class">.HIST-999-percentile</span>: <span class="number">195.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">128.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">214.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">296.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">316.942</span></span><br></pre></td></tr></table></figure>
<p>此时load=0.1，CPU=400%，latency.99在300ms，继续增加qps：</p>
<h4 id="步骤8：qps=15000">步骤8：qps=15000</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">3</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">3</span></span><br><span class="line"><span class="variable">qps=</span><span class="number">15000</span></span><br></pre></td></tr></table></figure>
<p>在启动阶段load和CPU较高，latency也比较大，在打到60w-100w的时候latency降下来了：<br><code>mem=1.6G，CPU450%，load=3.0</code><br><code>rabbitmq.load=0.29, cpu=450%</code></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wait~before~process.HIST-75-percentile</span>: <span class="string">186.0</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-95-percentile</span>: <span class="string">223.54999999999995</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-99-percentile</span>: <span class="string">235.0</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-999-percentile</span>: <span class="string">250.0</span></span><br><span class="line"></span><br><span class="line"><span class="stylus">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">140.75</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">239.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">369.84000000000015</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">408.797</span></span></span><br></pre></td></tr></table></figure>
<p>但是latency相对较高，每次请求有两次redis的cmget请求，qps=15000时redis请求为30000，4个线程的实验数据要比这个好的多，所以猜测这里还有猫腻，降低redis线程数继续试验：</p>
<h4 id="步骤9：比较不同redis线程数">步骤9：比较不同redis线程数</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">2</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">2</span></span><br><span class="line"><span class="variable">qps=</span><span class="number">15000</span></span><br></pre></td></tr></table></figure>
<p>的情况是：</p>
<p><code>mem=1.9G，CPU450%，load=4.0</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wait~before~process<span class="class">.HIST-75-percentile</span>: <span class="number">192.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-95-percentile</span>: <span class="number">224.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-99-percentile</span>: <span class="number">241.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-999-percentile</span>: <span class="number">263.942</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">201.75</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">316.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">348.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">383.0</span></span><br></pre></td></tr></table></figure>
<p>而<br><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">2</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">4</span></span><br><span class="line"><span class="variable">qps=</span><span class="number">15000</span></span><br></pre></td></tr></table></figure></p>
<p>的情况是：</p>
<p><code>mem=1.5G，CPU450%，load=0.3</code><br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wait~before~process<span class="class">.HIST-75-percentile</span>: <span class="number">183.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-95-percentile</span>: <span class="number">216.54999999999995</span></span><br><span class="line">wait~before~process<span class="class">.HIST-99-percentile</span>: <span class="number">378.1300000000001</span></span><br><span class="line">wait~before~process<span class="class">.HIST-999-percentile</span>: <span class="number">416.65200000000004</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">90.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">160.54999999999995</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">241.42000000000007</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">312.942</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-75-percentile</span>: <span class="number">53.75</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-95-percentile</span>: <span class="number">198.54999999999995</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-99-percentile</span>: <span class="number">250.84000000000015</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-999-percentile</span>: <span class="number">266.971</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-75-percentile</span>: <span class="number">69.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-95-percentile</span>: <span class="number">198.0999999999999</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-99-percentile</span>: <span class="number">262.5500000000002</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-999-percentile</span>: <span class="number">270.0</span></span><br></pre></td></tr></table></figure></p>
<p>发现增加线程数的影响很小，进一步分析perf-counter，发现了redis的actor压力分布不均的情况，以下是redis线程分别是3、4、5的情况：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mampa~tell~actor~RedisMampa~<span class="number">0</span>/<span class="number">3</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">743969</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">1</span>/<span class="number">3</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">2833514</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">2</span>/<span class="number">3</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">743539</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mampa~tell~actor~RedisMampa~<span class="number">0</span>/<span class="number">4</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">155403</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">1</span>/<span class="number">4</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">156336</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">2</span>/<span class="number">4</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">155332</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">3</span>/<span class="number">4</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">758472</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mampa~tell~actor~RedisMampa~<span class="number">0</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">620549</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">1</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">3686638</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">2</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">620688</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">3</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">620500</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">4</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">620516</span></span><br></pre></td></tr></table></figure>
<p>分析发现数字很有规律，总是有一个actor上落的比较多，其他的比较平均，多的数量是少的数量的(actor个数+1)倍，以上表5个actor为例，可以这样认为，有两种请求，第一种请求平均分给了5个actor，每个62w，第二种请求全落在actor-1上了，共306w，则actor-1上有368w个。然后意识到一种key是带userid的，另一种是appid的，这里测试app只有一个，所以落在了一个actor上。解决方案是，提供可配置的<code>random-actor</code>方式路由到不同的actor，继续试验。</p>
<h4 id="步骤10：配置redis-mampa使用random-actor路由消息">步骤10：配置redis-mampa使用random-actor路由消息</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">2</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">5</span></span><br><span class="line"><span class="variable">qps=</span><span class="number">20000</span></span><br></pre></td></tr></table></figure>
<p>实验结果中redis的actor分布较均匀了。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mampa~tell~actor~RedisMampa~<span class="number">0</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">908895</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">1</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">907672</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">2</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">910176</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">3</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">910250</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">4</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">909681</span></span><br></pre></td></tr></table></figure>
<p>此时的latency为：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wait~before~process<span class="class">.HIST-75-percentile</span>: <span class="number">21866.25</span></span><br><span class="line">wait~before~process<span class="class">.HIST-95-percentile</span>: <span class="number">25688.65</span></span><br><span class="line">wait~before~process<span class="class">.HIST-99-percentile</span>: <span class="number">26831.920000000002</span></span><br><span class="line">wait~before~process<span class="class">.HIST-999-percentile</span>: <span class="number">27347.855</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">43.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">106.54999999999995</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">190.20000000000027</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">239.913</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-75-percentile</span>: <span class="number">5.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-95-percentile</span>: <span class="number">23.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-99-percentile</span>: <span class="number">80.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-999-percentile</span>: <span class="number">115.50700000000006</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-75-percentile</span>: <span class="number">7.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-95-percentile</span>: <span class="number">27.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-99-percentile</span>: <span class="number">75.71000000000004</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-999-percentile</span>: <span class="number">121.94200000000001</span></span><br><span class="line"></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-75-percentile</span>: <span class="number">13.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-95-percentile</span>: <span class="number">224.64999999999986</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-99-percentile</span>: <span class="number">291.4200000000001</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-999-percentile</span>: <span class="number">440.6220000000003</span></span><br></pre></td></tr></table></figure>
<p>可见redis的请求latency已经落回到合理的范围，但<code>wait~before~process</code>的时间很长，而且观察rabbitmq的状态发现fetcher模块整体produce的速度只有18000，而fetcher业务模块的disruptor占用情况为：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mailbox~occupied~size~Fetcher~<span class="number">0</span><span class="class">.p1</span><span class="class">.GAUGE</span>=<span class="number">465</span></span><br><span class="line">mailbox~occupied~size~Fetcher~<span class="number">0</span><span class="class">.p2</span><span class="class">.GAUGE</span>=<span class="number">1859</span></span><br><span class="line">mailbox~occupied~size~Fetcher~<span class="number">1</span><span class="class">.p1</span><span class="class">.GAUGE</span>=<span class="number">533</span></span><br><span class="line">mailbox~occupied~size~Fetcher~<span class="number">1</span><span class="class">.p2</span><span class="class">.GAUGE</span>=<span class="number">1981</span></span><br></pre></td></tr></table></figure>
<p>因此猜测是main.thread成为了瓶颈，于是调整一下线程分配：</p>
<h4 id="步骤11：调整main/redis线程分配">步骤11：调整main/redis线程分配</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">3</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">4</span></span><br><span class="line"><span class="variable">qps=</span><span class="number">20000</span></span><br></pre></td></tr></table></figure>
<p>此时<code>load=9, cpu=700%</code>，fetcher模块整体produce的速度基本达到了20000。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wait~before~process<span class="class">.HIST-75-percentile</span>: <span class="number">7854.75</span></span><br><span class="line">wait~before~process<span class="class">.HIST-95-percentile</span>: <span class="number">11740.599999999999</span></span><br><span class="line">wait~before~process<span class="class">.HIST-99-percentile</span>: <span class="number">16918.420000000013</span></span><br><span class="line">wait~before~process<span class="class">.HIST-999-percentile</span>: <span class="number">18196.202</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">64.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">126.64999999999986</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">206.84000000000015</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">249.79700000000003</span></span><br><span class="line"></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-75-percentile</span>: <span class="number">17.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-95-percentile</span>: <span class="number">255.54999999999995</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-99-percentile</span>: <span class="number">374.3900000000003</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-999-percentile</span>: <span class="number">443.971</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-75-percentile</span>: <span class="number">8.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-95-percentile</span>: <span class="number">37.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-99-percentile</span>: <span class="number">47.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-999-percentile</span>: <span class="number">51.0</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-75-percentile</span>: <span class="number">13.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-95-percentile</span>: <span class="number">37.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-99-percentile</span>: <span class="number">50.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-999-percentile</span>: <span class="number">51.971000000000004</span></span><br></pre></td></tr></table></figure>
<p>但<code>wait~before~process</code>时间仍然较长，一部分原因是启动时就有堆积的延迟导致的，另外还需继续跟进的方面有：</p>
<h3 id="后续工作">后续工作</h3><ol>
<li>rabbitmq的CPU占用一直在500%上下，这里是否是瓶颈</li>
<li>能在多优先级队列的disruptor中支持更多的wait策略是否能解决load高的问题</li>
</ol>
<h4 id="多优先级队列disruptor支持BlockingWaitStrategy">多优先级队列disruptor支持BlockingWaitStrategy</h4><p>实验验证这种策略发现性能是有一定折扣的，</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">Blocking:</span>  Benchmark/Single <span class="string">Ellapsed:</span> <span class="number">3007.42</span>ms, <span class="string">QPS:</span> <span class="number">468862.87</span>. (producerCount=<span class="number">1</span>, ringSize=<span class="number">1024</span>, queries=<span class="number">10000000</span>). </span><br><span class="line"><span class="string">Blocking:</span>  Benchmark/Multi  <span class="string">Ellapsed:</span> <span class="number">6067.46</span>ms, <span class="string">QPS:</span> <span class="number">232398.09</span>. (priorities=[<span class="number">1000</span>, <span class="number">1000</span>], ringSize=<span class="number">1024</span>x2, queries=<span class="number">10000000</span>).</span><br><span class="line"><span class="string">Sleeping:</span>  Benchmark/Single <span class="string">Ellapsed:</span> <span class="number">1126.05</span>ms, <span class="string">QPS:</span> <span class="number">1252227.05</span>. (producerCount=<span class="number">1</span>, ringSize=<span class="number">1024</span>, queries=<span class="number">10000000</span>). </span><br><span class="line"><span class="string">Sleeping:</span>  Benchmark/Multi  <span class="string">Ellapsed:</span> <span class="number">1378.33</span>ms, <span class="string">QPS:</span> <span class="number">1023022.22</span>. (priorities=[<span class="number">1000</span>, <span class="number">1000</span>], ringSize=<span class="number">1024</span>x2, queries=<span class="number">10000000</span>).</span><br></pre></td></tr></table></figure>
<p>但我们肯定达不到20w+的qps，可以先不关心这个，试一下用BlockingWaitStrategy的Fetcher性能：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="variable">load=</span><span class="number">5</span>, <span class="variable">mem=</span><span class="number">1.3</span>g, <span class="variable">CPU=</span><span class="number">700</span>%</span><br></pre></td></tr></table></figure>
<p>无请求时CPU由60%降到7%</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>=<span class="number">57.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>=<span class="number">80.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>=<span class="number">93.71000000000004</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>=<span class="number">106.91300000000001</span></span><br><span class="line"></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span>.HIST-<span class="number">75</span>-percentile=<span class="number">13.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span>.HIST-<span class="number">95</span>-percentile=<span class="number">51.549999999999955</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span>.HIST-<span class="number">99</span>-percentile=<span class="number">94.42000000000007</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span>.HIST-<span class="number">999</span>-percentile=<span class="number">181.56500000000005</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis~mampa~from~send.HIST-<span class="number">75</span>-percentile=<span class="number">5.0</span></span><br><span class="line">redis~mampa~from~send.HIST-<span class="number">95</span>-percentile=<span class="number">11.0</span></span><br><span class="line">redis~mampa~from~send.HIST-<span class="number">99</span>-percentile=<span class="number">20.0</span></span><br><span class="line">redis~mampa~from~send.HIST-<span class="number">999</span>-percentile=<span class="number">24.91300000000001</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~tell.HIST-<span class="number">75</span>-percentile=<span class="number">7.0</span></span><br><span class="line">redis~mampa~from~tell.HIST-<span class="number">95</span>-percentile=<span class="number">16.0</span></span><br><span class="line">redis~mampa~from~tell.HIST-<span class="number">99</span>-percentile=<span class="number">26.710000000000036</span></span><br><span class="line">redis~mampa~from~tell.HIST-<span class="number">999</span>-percentile=<span class="number">44.76800000000003</span></span><br></pre></td></tr></table></figure>
<p>OK，latency.99降到了100ms。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.xiaomi.com/wp-content/uploads/2014/03/mipush.jpg" alt=""></p>
<h3 id="背景">背景</h3><p>小米消息推送系统在前不久开始使用<a href="http:/]]>
    </summary>
    
      <category term="mampa" scheme="http://lyso.me/tags/mampa/"/>
    
      <category term="内存泄露" scheme="http://lyso.me/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
      <category term="小米推送系统" scheme="http://lyso.me/tags/%E5%B0%8F%E7%B1%B3%E6%8E%A8%E9%80%81%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="并发" scheme="http://lyso.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="异步" scheme="http://lyso.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[排队理论及Little's Law]]></title>
    <link href="http://lyso.me/2014/07/26/queue-threory-littles-law/"/>
    <id>http://lyso.me/2014/07/26/queue-threory-littles-law/</id>
    <published>2014-07-26T10:44:12.000Z</published>
    <updated>2014-07-26T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://img01.e23.cn/2012/0729/20120729064952752.jpg" alt=""></p>
<h2 id="队列无处不在">队列无处不在</h2><p>　　最近一直在做异步编程框架方面的工作。异步化最重要的几个概念是，消息/事件、队列/缓冲区、线程池等，在实际应用中需要考虑到队列满等问题。其实队列无处不在，不止是在异步程序框架里。诶，等一等，同步程序哪来的队列？的确是没有“明显的”。如果你用线程池执行同步代码，你得有有锁或信号量或等待队列从池里取出线程。如果你很彪悍，每个请求都新建一个线程来处理，那当你的线程数超过CPU数时，线程得在队列里等OS调度，还徒增线程上下文切换和条件变量的开销。队列无处不在，拥抱队列吧！既然无法避免队列，就用心设计好队列，比如用上无锁队列。</p>
<p>　　现实生活中队列也是无处不在，比如宇宙中心五道口的枣糕王队列和最近刚出来的西少爷队列，五彩城的外婆家队列，小米的周二抢手机队列，每个小米员工身上都挂着一堆F码队列，北京车牌摇号是个巨大的队列，等等……</p>
<h2 id="什么是队列，什么是排队理论">什么是队列，什么是排队理论</h2><p>　　<em>queue</em>一词来自于拉丁语<em>cauda</em>，是“马尾巴”的意思。排队理论（Queueing theory）是研究排队（queues，或者waiting lines）的数学方法。拼写成 “queueing” 而不是”queuing”据说是因为学术界相关领域有个很牛叉的期刊叫“Queueing Systems”……</p>
<p>　　一个在丹麦哥本哈根电话交换局工作的工程师 Agner Krarup Erlang（哈哈，就是Erlang编程语言的出处之一，另一出处是<em>Er</em>icsson <em>Lang</em>uage），研究人们打电话的方式，发展出人们需要等待多久的公式，并于1909年出版了关于排队理论的第一篇论文，当时称为话务理论。他在热力学统计平衡理论的启发下，成功地建立了电话统计平衡模型，并由此得到一组递推状态方程，从而导出Erlang电话损失率公式。自20世纪初以来，电话系统的设计一直在应用这个公式。30年代苏联数学家А.Я.欣钦把处于统计平衡的电话呼叫流称为最简单流。瑞典数学家巴尔姆又引入有限后效流等概念和定义。他们用数学方法深入地分析了电话呼叫的本征特性，促进了排队论的研究。50年代初，美国数学家关于生灭过程的研究、英国数学家D.G.肯德尔提出嵌入马尔可夫链理论，以及对排队队型的分类方法，为排队论奠定了理论基础。在这以后，L.塔卡奇等人又将组合方法引进排队论，使它更能适应各种类型的排队问题。70年代以来，人们开始研究排队网络和复杂排队问题的渐近解等，成为研究现代排队论的新趋势。</p>
<h2 id="队列的形成">队列的形成</h2><p>　　队列的形成是由于服务对象到达时间快于服务时间导致的。看这两种极端情况：</p>
<ul>
<li>服务时间为1秒/个，到达时间为2秒/个，永远不会产生队列堆积</li>
<li>服务时间为2秒/个，到达时间为1秒/个，队列会永无止境的增加</li>
</ul>
<p>　　而在现实服务系统中，服务时间和到达时间都是不是恒定的。如果一个队列不会随时间增加而无限增长，那么可以说它是<em>稳定</em>的。而对于单服务节点队列来说，如果其<em>平均服务时间</em>小于<em>平均到达时间</em>（或<em>平均服务速率</em>大于<em>平均到达速率</em>），则可以说它是稳定的。</p>
<p>　　例如下图，横坐标为时间，纵坐标为队列长度，这是一个稳定的队列，我们能看到“忙”与“闲”的交替，<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">　|</span><br><span class="line">队|                                   __</span><br><span class="line">列|        <span class="strong">__                      __</span>|  |__</span><br><span class="line">长|     <span class="strong">__|  |__</span>          <span class="strong">__    __</span>|        |</span><br><span class="line">度|  <span class="strong">__|        |__</span>    <span class="strong">__|  |__</span>|           |<span class="emphasis">___</span>_</span><br><span class="line">　|<span class="emphasis">_|_</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">___|__</span>|<span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span>|<span class="strong">_____</span>_</span><br><span class="line">　　　　时间</span><br></pre></td></tr></table></figure></p>
<p>　　而下图则是一个不稳定的队列，就像在高速路上发生车祸后的结果一样：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">　|                          <span class="emphasis">___</span>_| </span><br><span class="line">　|                       __|        </span><br><span class="line">　|                    __|            </span><br><span class="line">队|                 __|               </span><br><span class="line">列|        <span class="strong">__    __</span>|               </span><br><span class="line">长|     <span class="strong">__|  |__</span>|</span><br><span class="line">度|  __|        </span><br><span class="line">　|<span class="emphasis">_|_</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="emphasis">___</span>_</span><br><span class="line">　　　　时间</span><br></pre></td></tr></table></figure></p>
<!-- mathjax config similar to math.stackexchange -->
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  jax: ["input/TeX", "output/HTML-CSS"],
  tex2jax: {
    inlineMath: [ ['$', '$'] ],
    displayMath: [ ['$$', '$$']],
    processEscapes: true,
    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
  },
  messageStyle: "none",
  "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] }
});
</script>

<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"></script>

<h2 id="基本模型">基本模型</h2><p>　　排队系统又称服务系统。服务系统由服务系统和服务对象（顾客）构成。服务对象到来的时刻和对他服务的时间（即占用服务系统的时间）都是随机的。最简单的排队系统模型包括三个组成部分：输入过程、排队策略和服务系统。</p>
<h3 id="输入过程">输入过程</h3><p>　　输入过程考察的是顾客到达服务系统的规律。它可以用一定时间内顾客到达数或前后两个顾客相继到达的间隔时间来描述，一般分为确定型和随机型两种。例如，在生产线上加工的零件按规定的间隔时间依次到达加工地点，定期运行的班车、班机等都属于确定型输入。随机型的输入是指在时间 $t$ 内顾客到达数 $n(t)$ 服从一定的随机分布。如服从泊松分布，则在时间 $t$ 内到达$n$个顾客的概率为<br>$$<br>P_n(t)=\frac{e^{-\lambda t}{(\lambda t)}^n}{n!} (n=0,1,2,…,N)<br>$$<br>　　或相继到达的顾客的间隔时间 $T$ 服从负指数分布，即<br>$$<br>P(T \leqslant t)=1-e^{-\lambda t}<br>$$<br>　　式中 $\lambda$ 为单位时间顾客期望到达数，称为平均到达速率； $1/\lambda$ 为平均间隔时间。在排队论中，讨论的输入过程主要是随机型的。</p>
<h3 id="排队策略">排队策略</h3><p>　　排队策略分为等待策略、丢弃策略和混合策略三种。当顾客到达时，所有服务系统都被占用，则顾客排队等候，即为等待策略。在等待策略中，为顾客进行服务的次序可以是先到先服务，或后到先服务，或是随机服务和有优先权服务（如医院接待急救病人）。如果顾客来到后看到服务系统没有空闲立即离去，则为丢弃策略。有些系统因留给顾客排队等待的空间有限，因此超过所能容纳人数的顾客必须离开系统，这种排队策略就是混合策略。</p>
<h3 id="服务系统">服务系统</h3><p>　　可以是一个或多个服务节点。多个服务节点可以是平行排列的，也可以是串连排列的。服务时间一般也分成确定型和随机型两种。例如，自动冲洗汽车的装置对每辆汽车冲洗（服务）时间是相同的，因而是确定型的。而随机型服务时间 $v$ 则服从一定的随机分布。如果服从负指数分布，则其分布函数是<br>$$<br>P(v \leqslant t) = 1 - e^{-\mu t}    (t \geqslant 0)<br>$$<br>　　式中 $\mu$ 为平均服务率， $1/\mu$ 为平均服务时间。</p>
<h3 id="表示法">表示法</h3><p>　　一般使用David G. Kendall表示法，A/S/C：</p>
<ul>
<li>A（Arrival Process）：描述顾客到达系统的概率密度分布（在消息系统中对应于消息到达的概率分布）</li>
<li>S（Service Process）：描述顾客服务耗时的概率密度分布（在消息系统对应于消息处理的时间分布）</li>
<li>C（Number of Servers）：描述系统中的服务节点个数</li>
</ul>
<p>　　其中，A、S可以是以下任意一个：</p>
<ul>
<li>M (Markov)：Exponential probability density</li>
<li>D (Deterministic)：All customers have the same value</li>
<li>G (General)：Any arbitrary probability distribution</li>
</ul>
<h2 id="示例排队系统">示例排队系统</h2><p>　　例如有以下类型的排队系统：</p>
<h3 id="M/M/1">M/M/1</h3><ul>
<li>最简单的排队系统，一个服务节点</li>
<li>到达时间负指数分布（泊松过程）</li>
<li>服务时间负指数分布（泊松过程）</li>
<li>服务策略：FIFS（先入队先服务）</li>
</ul>
<h4 id="泊松过程（Poisson_process）">泊松过程（Poisson process）</h4><p>　　泊松过程以法国数学家泊松命名，是随机过程的一种。M/M/1系统假设到达时间符合泊松分布，在现实系统中需要满足以下三点才可以做此近似假设：</p>
<ul>
<li>无限请求数，或请求数量很大</li>
<li>单次请求对系统性能和资源占用都很小</li>
<li>所有请求之间相互独立，互不影响/依赖<br>　　例如公路系统中的车辆，就满足：</li>
<li>车辆数非常多</li>
<li>每辆车占用公路上的位置很小</li>
<li>所有的车决定走哪条路、怎么走，对其他车辆影响不大<br>　　如果公路上正在举行公路赛，那么条件2、3就不满足了，就不能用泊松过程近似。</li>
</ul>
<p>　　$n$个请求在时间$0$ ~ $t$内到达的泊松过程的概率密度分布可以表示如下：<br>$$<br>P_n(t)=\frac{(\lambda t)^n}{n!}e^{-\lambda t}<br>$$<br>　　其中，</p>
<ul>
<li>$t$是历经时间</li>
<li>$n$是这段时间请求到达总数</li>
<li>$\lambda$是平均到达速率</li>
</ul>
<h4 id="负指数分布">负指数分布</h4><p>　　如果泊松概率分布不够直观，可以将其简化：在一段时间内没有任何请求到达的分布，也就是泊松分布中的$n=0$：<br>$$<br>P_0(t)=e^{-\lambda t}<br>$$<br>　　还拿高速公路举例子，一段路上平均每10s有1个车到达（到达速率为0.1 车/秒）。下图是随时间t没有一个车到达的概率分布。<br><img src="http://www.eventhelix.com/realtimemantra/congestioncontrol/images/poisson.gif" alt=""><br>　　可见，一段时间内看不到一辆车的概率会碎观察时间间隔的增长而急剧下降：１秒内是90%，20秒内只有10%了。</p>
<h4 id="M/M/1系统的结果分析">M/M/1系统的结果分析</h4><p>　　对于稳定的系统，服务速率要大于到达速率。定义“流量强度”$\rho$如下：<br>$$<br>\rho = \lambda / \mu<br>$$<br>　　其中$\lambda$为到达速率，$\mu$为服务速率。也就是稳定系统的$rho&lt;1$。则系统中的平均请求数$N$为：<br>$$<br>N = \frac{\rho}{1-\rho}<br>$$<br>　　容易看出，当$rho$趋近于1时$N$急速增大。从这个式子可以简单推导出总的等待时间（包括服务时间）（见后文Little’s Law）：<br>$$<br>T = \frac{1}{\mu - \lambda}<br>$$</p>
<h3 id="M/D/1，M/D/n系统">M/D/1，M/D/n系统</h3><p>Agner Krarup Erlang在1917建模并解决了M/D/1系统，随后在1920年建模了M/D/n系统：</p>
<ul>
<li>M stands for Markov or memoryless and means arrivals occur according to a Poisson process</li>
<li>D stands for deterministic and means jobs arriving at the queue require a fixed amount of service</li>
<li>n describes the number of servers at the queueing node (k = 1, 2,…).</li>
</ul>
<h3 id="M/G/1，_M/G/n系统">M/G/1， M/G/n系统</h3><p>M/G/1系统由Felix Pollaczek在1930年解决。而M/G/n系统的性能分析仍然是一个<a href="http://en.wikipedia.org/wiki/M/G/k_queue" target="_blank" rel="external">开放问题</a>。</p>
<h3 id="G/G/n系统">G/G/n系统</h3><p>This is the most general queueing system where the arrival and service time processes are both arbitrary. The system has n servers. No analytical solution is known for this queueing system.</p>
<h2 id="测量指标">测量指标</h2><ul>
<li>平均等待时间、等待时间.99/.95/.75</li>
<li>服务节点利用率<ul>
<li>比如，消息到达速率为10ms一个，平均每个处理时间为8ms，则服务节点可用率为 $P=(1 / 10) * 8 = 80% $</li>
</ul>
</li>
<li>吞吐/QPS</li>
<li>平均等待消息个数</li>
<li>消息等待个数分布（例如 $P(n), n=0, 1, 2…$表示有n个消息在等待的概率）</li>
</ul>
<h2 id="Little’s_Law">Little’s Law</h2><p>　　一般译为利特尔法则，指在一个稳定的系统（排队理论中的系统）中，长时间观察到的平均顾客数量$L$，等于长时间观察到的有效到达速率$\lambda$与平均每个顾客在系统中花费的时间之乘积，即<br>$$<br>L = \lambda W<br>$$<br>　　由麻省理工大学斯隆商学院（MIT Sloan School of Management）的教授John Little于1961年所提出与证明。这一法则为精益生产的改善方向指明了道路。如何有效地缩短生产周期呢？利特尔法则已经很明显地指出了方向。一个方向是提高产能，从而降低生产节拍；另一个方向就是压缩存货数量。然而，提高往往意味着增加很大的投入。另外，生产能力的提升虽然可以缩短生产周期，但是，生产能力的提升总有个限度，我们无法容忍生产能力远远超过市场的需求。一般来说，每个公司在一定时期内的生产能力是大致不变的，而从长期来看，各公司也会力图使自己公司的产能与市场需求相吻合。因此，最有效地缩短生产周期的方法就是压缩在制品数量。<br>　　利特尔法则不仅适用于整个系统，而且也适用于系统的任何一部分。</p>
<p>　　平均顾客数量$L=\lambda/(\mu-\lambda)$，则平均等待时间（排队时间+服务时间）可以计算为：<br>$$<br>W=1/(\mu - \lambda)<br>$$<br>　　平均等待时间为：<br>$$<br>W_q = 1 /(\mu − \lambda) − 1/\mu = \lambda /\mu( \mu − \lambda)<br>$$</p>
<h2 id="有什么用？">有什么用？</h2><p>　　可以根据Little’s Law设计系统中的队列长度——压缩在制品数量，比如Mampa的mailbox长度设计。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://img01.e23.cn/2012/0729/20120729064952752.jpg" alt=""></p>
<h2 id="队列无处不在">队列无处不在</h2><p>　　最近一直在做异步编程框架方面的工作。异步化最重要的几个概念是]]>
    </summary>
    
      <category term="little&#39;s law" scheme="http://lyso.me/tags/little-s-law/"/>
    
      <category term="queueing threory" scheme="http://lyso.me/tags/queueing-threory/"/>
    
      <category term="利特尔法则" scheme="http://lyso.me/tags/%E5%88%A9%E7%89%B9%E5%B0%94%E6%B3%95%E5%88%99/"/>
    
      <category term="并发" scheme="http://lyso.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="异步" scheme="http://lyso.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="排队理论" scheme="http://lyso.me/tags/%E6%8E%92%E9%98%9F%E7%90%86%E8%AE%BA/"/>
    
      <category term="泊松过程" scheme="http://lyso.me/tags/%E6%B3%8A%E6%9D%BE%E8%BF%87%E7%A8%8B/"/>
    
      <category term="负指数分布" scheme="http://lyso.me/tags/%E8%B4%9F%E6%8C%87%E6%95%B0%E5%88%86%E5%B8%83/"/>
    
      <category term="马尔科夫链" scheme="http://lyso.me/tags/%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我是谁]]></title>
    <link href="http://lyso.me/2014/07/10/who-am-i/"/>
    <id>http://lyso.me/2014/07/10/who-am-i/</id>
    <published>2014-07-10T14:11:40.000Z</published>
    <updated>2015-11-13T02:24:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="名片">名片</h2><ul>
<li><em>Lyso什么意思？</em> 小时候给自己起网名，本来就想叫ly的，发现要么是闲俩字太短，要么是ly被占用了。于是我就开始分析自己的名字，有三氧化硫之拆解义，故而拼凑上一个so3，于是lyso3就成了网名。但后来疑问也有了，lyso是谁？lyso1和lyso2呢？就干脆叫lyso吧。有朋友发音[li:seu]，正确发音是[laiseu]，同“来搜”。</li>
<li><em>性别</em> 男</li>
<li><em>Email</em> leoyonn@126.com</li>
<li><em>微信</em> leoyonn <em>可以扫名片里的二维码</em></li>
<li><em>米聊</em> 2481178 <em>可以扫名片里的二维码</em></li>
<li><em>linkedin</em> <a href="https://www.linkedin.com/in/leoyonn" target="_blank" rel="external">https://www.linkedin.com/in/leoyonn</a></li>
<li><em>github</em> <a href="https://github.com/leoyonn" target="_blank" rel="external">https://github.com/leoyonn</a><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/cto.png" width="500px"><br><img src="http://lyso.qiniudn.com/leo-vcard-c.png" width="300px"></li>
</ul>
<h2 id="私塾混迹">私塾混迹</h2><ul>
<li>2004.09 ~ 2008.07 北京大学 计算机科学与技术系 本科</li>
<li>2008.09 ~ 2011.07 北京大学 计算机科学与技术系 硕士</li>
</ul>
<h2 id="涉世之初">涉世之初</h2><ul>
<li>2009.02 ~ 2010.06 北京大学信息科学技术学院研会宣传部部长</li>
<li>2006.09 ~ 2007.07 北京大学计算机协会人事部部长</li>
<li>2006.01 ~ 2006.07 北京大学学生服务总队爱心电脑小组组长</li>
</ul>
<h2 id="江湖足迹">江湖足迹</h2><ul>
<li>2007.09 ~ 2007.11 | <em>北京普科新天科技有限公司</em> 兼职</li>
<li>2007.12 ~ 2008.04 | <em>Miparvo Technologies, Inc公司</em> 项目合作</li>
<li>2009.03 ~ 2010.03 | <em>微软亚洲研究院（MSRA）</em> 项目合作</li>
<li>2010.04 ~ 2010.04 | <em>腾讯无线事业部</em> 实习（20天）</li>
<li>2010.07 ~ 2010.09 | <em>百度搜索研发部</em> 实习</li>
<li>2011.03 ~ 2013.04 | <em>网易有道</em> 第一份正式工作</li>
<li>2012.05 ~ 2012.08 | <em>迅知科技</em> 兼职合伙创业</li>
<li>2013.04 ~ 2015.05 | <em>小米科技</em> 第二份正式工作</li>
<li>2015.05 ~ 今 | <em>送姜科技</em> 合伙创业</li>
</ul>
<h2 id="打怪升级">打怪升级</h2><h3 id="2015-05_~_今_|_送姜科技">2015.05 ~ 今 | <em>送姜科技</em></h3><ul>
<li>联合创始人/副总裁/CTO<ul>
<li>主管产品研发部</li>
<li>产品设计</li>
<li>架构搭建</li>
<li>团队组建</li>
<li>流程及工具建立、推进</li>
<li>协助融资<br>-</li>
</ul>
</li>
</ul>
<h3 id="2013-04_~_2015-05_|_小米科技">2013.04 ~ 2015.05 | <em>小米科技</em></h3><ul>
<li><em>小米推送系统</em><ul>
<li>同时在线用户数<em>70,000,000</em>+，日活跃用户数<em>100,000,000</em>+，日发消息量<em>600,000,000</em>+</li>
<li>架构设计及研发主力(初期 2 R&amp;D之一)，包括设计与开发：接口层(HTTP/长连接)、业务逻辑层、存储层(cache/mysql/hbase等schema设计及client端优化)、统计监控及辅助工具等</li>
<li>基于kafka/zookeeper等集群设计实现高吞吐公平性多优先级及流控模块，作为系统中消息发送的核心节点</li>
</ul>
</li>
<li><em>小米开放消息系统</em><ul>
<li>底层架构的设计及开发、接口及业务逻辑层的设计及部分开发、存储层的schema设计</li>
<li>项目驱动(组织讨论分工、组织推动CodeReview/集成测试/每日构建/压力测试，上线进程规范化及推动)</li>
</ul>
</li>
<li><em>基础框架及工具</em><ul>
<li><em>MAMPA</em>：<ul>
<li>小米异步消息处理架构(xiaoMi Asynchronous Message Processing Architecture)</li>
<li>吸取Erlang/Akka等异步并发语言/框架之精化，使用disruptor/自管理线程池等方法，用Actor/ActorGroup/ FSM/ RuleSet等概念将线程安全等问题隐藏，对高吞吐并发服务的开发效率及性能都有较大提升</li>
<li>用自实现非线程安全对象池、预开辟连续空间等方法进一步优化内存使用，尽可能的避免了GC等问题</li>
<li>小米开放消息系统所有服务底层架构、一些异步存储等客户端(redis/hbase/kafka/tracer等)底层架构、小米云平台各底层消息框架正在逐步迁移到此架构上(推送/米信/米聊/米云等，吞吐远高于原架构)</li>
</ul>
</li>
<li><em>Redis-Mampa</em>：<ul>
<li>基于MAMPA的异步redis客户端，与redis-server通过netty4.x用pipeline通信，性能远高于Jedis等客户端</li>
<li>进一步封装成Cache层，可以自定义配置key、value的编解码，简化使用者的工作</li>
</ul>
</li>
<li><em>HBase-Mampa</em>：<ul>
<li>基于MAMPA的异步HBase客户端，对HBase的访问进行了如batch化、多线程化等极致的优化，巧妙避开了hbase-server对batch中的key写请求乱序执行等问题，并基于MAMPA的异步模式提供更丰富的接口类型</li>
</ul>
</li>
<li><em>Xsupervisor</em>：<ul>
<li>根据自定义配置监管多种服务(如redis/twemproxy等)，在推小米推送系统等服务中连续数月稳定运行</li>
<li>提供将监管服务自动注册到zookeeper、根据心跳及时重启宕掉的服务、状态监控及控制终端等功能</li>
</ul>
</li>
<li><em>Jerrymice</em>：<ul>
<li>基于jetty开发的极轻量级restful/web框架，可独立运行或内嵌于其他服务中，用法极简</li>
<li>支持jsp/html等页面渲染及json/xml/plaintext等多种返回方式</li>
<li>支持将任意数据类型通过Model参数送至页面、支持url正则式、支持参数变量化</li>
<li>广泛应用于推送系统/开放消息系统等服务的问题追查/服务状态监控/压力测试/辅助工具等</li>
</ul>
</li>
<li><em>Async-scribe-client</em>：<ul>
<li>用disruptor及一系列优化封装的scribe客户端，将log收集的QPS提升60+倍，应用于第一代Tracer等处</li>
</ul>
</li>
<li><em>Deployer</em>：<ul>
<li>服务一键部署：可将任意子模块部署到不同环境(开发机/测试机/沙箱/线上)的任意机器上</li>
<li>环境一键部署：可将Kafka集群、Redis/Twemproxy集群等轻松部署到不同的环境</li>
</ul>
</li>
<li><em>Tracer</em>：<ul>
<li>为业务系统中用来追踪消息、调查问题开发的框架</li>
<li>展示端使用Jerrymice，收集端第一代使用优化后的scribe、第二代使用kafka+MAMPA+hbase</li>
</ul>
</li>
<li><em>Xmpush/OMS-Console</em>：<ul>
<li>Jerrymice开发，查看服务/机器状态/PerfCounter、查询配置及数据、向服务发送控制命令等辅助工具集</li>
</ul>
</li>
<li><em>Oms-benchmark</em>：<ul>
<li>Jerrymice开发，将所有不同业务模块benchmark及压力测试的工作简化到只需要在页面上点几下按钮</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2011-03_~_2013-04_|_网易有道">2011.03 ~ 2013.04 | <em>网易有道</em></h3><ul>
<li>2012.11 ~ 2013.04 | luna.bisheng组·毕昇资料库项目<ul>
<li>毕昇资料库系统总体设计（包括收集层、存储层、构建层、服务层）</li>
<li>数据定义、构建层、存储层的详细设计与实现</li>
</ul>
</li>
<li>2011.10 ~ 2013.04 | discovery组·网易饭饭项目<ul>
<li>个性化餐馆推荐系统的设计、实现与优化</li>
<li>推荐算法评估方法及流程的设计与实现（自动质量测试流程及功能 / 质量 / 性能评估流程）</li>
<li>服务器端部分接口层、逻辑层及存储系统(包括持久化与缓存系统)的设计与研发</li>
<li>设计及实现“以图识菜”项目（提取图像特征、训练模型并进行菜品分类推测）</li>
<li>组织组内和公司范围的推荐算法及相关技术交流，多次分享相关知识与经验</li>
</ul>
</li>
<li>2011.03 ~ 2012.11 | mobile组·网易八方项目<ul>
<li>网易八方1.8版、2.0版服务器端90%以上的功能开发</li>
<li>自主设计与研发网易八方照片滤镜功能，并大范围分享算法技术和代码</li>
<li>网易八方后台技术组的负责人（2011.09之后），负责项目开发进度、上线以及对运维、运营的技术支持</li>
</ul>
</li>
</ul>
<h3 id="2011-BC_踏足江湖之前">2011.BC 踏足江湖之前</h3><ul>
<li><p>2010.11 ~ 2011.06 | 网格表面并行蓝噪声采样·毕业设计项目</p>
<ul>
<li>创新地结合图论理论与GPU并行计算特征，解决了非均匀网格表面采样并行化问题，极大提高了采样速度</li>
</ul>
</li>
<li><p>2010.07 ~ 2010.09 | 百度搜索研发部（spider）·实习生项目</p>
<ul>
<li>搜索引擎爬虫行为分析，UserAgent抓取对比实验及DNS解析服务器的设计与编码实现</li>
</ul>
</li>
<li><p>2009.03 ~ 2010.03 | LIBRS基于图像的立体绘制系统·公司合作项目</p>
<ul>
<li><em>微软亚洲研究院（MSRA）eHeritage文化遗产数字化研究</em> 的子项目</li>
<li>设计与实现多线程控制双目立体绘制并行流水线，创新地使用多级循环生产者-消费者模式</li>
<li>前后使用cg / CUDA对原算法进行多种基于并行的优化，加速比达到8,000（40FPS x 2 vs. 0.5FPM）</li>
<li>发会议Siggraph Asia 2010（Jie Feng, Yang Liu and Bingfeng Zhou. Real-time Stereo Visual Hull Rendering Using a Multi-GPU-accelerated Pipeline. SIGGRAPH Asia 2010, technical sketch, Seoul, Korea, Article 52, 2010.）</li>
</ul>
</li>
<li><p>2009.03 ~ 2009.05 | 基于内容的图像检索系统·课程项目</p>
<ul>
<li>负责项目规划、系统设计、结果分析、系统整合；负责系统界面与模块接口设计与实现；</li>
<li>负责4种/ 7种图像特征提取的调研与实现；分类准确率达近70%</li>
</ul>
</li>
<li><p>2007.12 ~ 2008.04 | 基于网页的协作地图绘制平台 | <em>Miparvo Technologies, Inc公司</em> 合作项目</p>
<ul>
<li>调研、设计、开发了系统的客户端；使用Silverlight、Microsoft VE SDK、YUI、JavaScript编程</li>
<li>实现了强大的图形绘制、图形修改功能，以及上传下载绘图数据的功能</li>
<li>设计并实现了优秀的用户界面（前后经过3次大改进，甲方负责人非常满意）</li>
</ul>
</li>
<li><p>2007.09 ~ 2007.11 | <em>北京普科新天科技有限公司</em> 兼职实习项目</p>
<ul>
<li>设计和实现了陆地边防视频监控系统客户端控制部分（包括部分界面功能的实现）</li>
</ul>
</li>
</ul>
<h2 id="经验值">经验值</h2><ul>
<li><em>语言</em>：<em>Java、Golang、Erlang、Python、C/C++、CUDA/cg/OpenGL</em></li>
<li><em>并发</em>：Java多线程模型/内存模型及优化、同构/异构并行计算(CPU/GPU)</li>
<li><em>Netty</em>：与前端机器的长连接维持、Redis-MAMPA中与redis/tewmproxy集群服务端的消息传输</li>
<li><em>Disruptor</em>：MAMPA中Actor的mailbox以及其他异步框架中的队列(如async-scribe-client等)</li>
<li><em>Kafka</em>：搭建kafka机群提供推送系统、开放消息系统所有业务的消息中转传输</li>
<li><em>Redis/Twemproxy</em>：修改redis-server源代码(v2.8.7+)，如提供更丰富的过期操作(getex/setex/lrangeex)等</li>
<li><em>HBase</em>：多种业务主要的底层存储，和infra的同事(小米有2个HBase Commiter)一起根据业务类型不同设计schema、优化client以达到更好的读写性能</li>
<li><em>Thrift</em>：用thrift服务提供消息序列化/反序列化、服务注册及查找等功能</li>
<li><em>Scribe</em>：服务集群中多模块的log收集汇总、消息追踪</li>
<li><em>Zookeeper</em>：用以进行配置等信息的统一化管理</li>
<li><em>Phabricator</em>：推动组内同事对phabricator等工具的使用，推动项目代码规范化(如maven规范等)</li>
</ul>
<h2 id="取之江湖，还之江湖">取之江湖，还之江湖</h2><ul>
<li>在学校时对自学的东西做过一些小范围内的讲座</li>
<li>参与一些公益志愿者活动</li>
<li>根据项目需求便利撰写些电子书共享出来，比如 <a href="http://download.csdn.net/detail/lyso1/1999537" target="_blank" rel="external">独立游戏开发指南之开源免费游戏引擎篇</a></li>
<li>组织公司内技术分享，并提供给母公司其他部门</li>
<li>开源项目及公共基础框架开发（参见前述）</li>
<li>送姜技术分享会</li>
<li>本博客</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="名片">名片</h2><ul>
<li><em>Lyso什么意思？</em> 小时候给自己起网名，本来就想叫ly的，发现要么是闲俩字太短，要么是ly被占用了。于是我就开始分析自己的名字，有三氧化硫之拆解义，故而拼凑上一个so3，于是lyso3就成了网名。但后来疑问]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[追查线上问题之——ByteBuf内存泄露]]></title>
    <link href="http://lyso.me/2014/07/01/bytebuf-memleak/"/>
    <id>http://lyso.me/2014/07/01/bytebuf-memleak/</id>
    <published>2014-07-01T13:22:11.000Z</published>
    <updated>2015-04-02T02:46:57.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://content.xilu.com/uploadfile/2011/0815/20110815094715719.jpg" alt="leak"></p>
<p>　　最近新上线的异步化服务，查看perf-counter完全没有达到理论的QPS，于是开始在线下模拟线上情况做实验，结果总是符合理论推算，无法重现线上的情况，甚至一度怀疑是hbase服务集群扛不住压力导致的。在无计可施时，在亮老师和欧老师的指点下，开启了这段分析之旅，这里做个记录，方便有遇到类似问题的童鞋们有个参照。</p>
<h3 id="看进程的情况：top">看进程的情况：top</h3><p><code>[leo@online:~]# top</code></p>
<p>top命令查看这个线程的情况，发现内存占用量很大：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Tasks</span>: <span class="string">254 total,   1 running, 232 sleeping,   0 stopped,  21 zombie</span></span><br><span class="line"><span class="attribute">Cpu(s)</span>: <span class="string">22.7%us,  5.3%sy,  0.0%ni, 71.8%id,  0.0%wa,  0.0%hi,  0.3%si,  0.0%st</span></span><br><span class="line"><span class="attribute">Mem</span>: <span class="string"> 32850724k total, 31968708k used,   882016k free,    88052k buffers</span></span><br><span class="line"><span class="attribute">Swap</span>: <span class="string">12582904k total,   953140k used, 11629764k free, 14371656k cached</span></span><br><span class="line"></span><br><span class="line"><span class="r">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</span><br><span class="line"><span class="number">13205</span> root      <span class="number">20</span>   <span class="number">0</span> 8120m <span class="number">3.</span>3g  18m S <span class="number">120.7</span> <span class="number">10.7</span>   <span class="number">5890</span>:<span class="number">33</span> java -XX:<span class="keyword">...</span></span><br><span class="line"> <span class="number">5591</span> root      <span class="number">20</span>   <span class="number">0</span> 8835m <span class="number">2.</span>3g <span class="number">9996</span> S <span class="number">33.6</span>  <span class="number">7.5</span>   <span class="number">3491</span>:<span class="number">29</span> java -XX:<span class="keyword">...</span></span></span><br></pre></td></tr></table></figure>
<h3 id="看gc情况：jstat">看gc情况：jstat</h3><p><code>[leo@online:~]# jstat -gcutil 13205 100 10</code></p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">S0     S1     <span class="keyword">E</span>      <span class="keyword">O</span>      P     YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25876</span> <span class="number">24241.376</span> <span class="number">24954.239</span></span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25876</span> <span class="number">24241.376</span> <span class="number">24954.239</span></span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25876</span> <span class="number">24241.376</span> <span class="number">24954.239</span></span><br><span class="line"><span class="number">0.00</span>  <span class="number">97.03</span>  <span class="number">99.56</span>  <span class="number">99.94</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25876</span> <span class="number">24243.470</span> <span class="number">24956.333</span></span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25877</span> <span class="number">24243.470</span> <span class="number">24956.333</span></span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25877</span> <span class="number">24243.470</span> <span class="number">24956.333</span></span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25877</span> <span class="number">24243.470</span> <span class="number">24956.333</span></span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25877</span> <span class="number">24243.470</span> <span class="number">24956.333</span></span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25877</span> <span class="number">24243.470</span> <span class="number">24956.333</span></span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25877</span> <span class="number">24243.470</span> <span class="number">24956.333</span></span><br></pre></td></tr></table></figure>
<p>　　不看不知道，一看吓一跳：Eden代、老生代全满了，频繁发生Full GC！  </p>
<h3 id="看进程内存占用情况：jmap">看进程内存占用情况：jmap</h3><p><code>[leo@online:~]# jmap -histo:live 13205 | less</code></p>
<figure class="highlight profile"><table><tr><td class="code"><pre><span class="line"> num     #instances         #bytes  class name</span><br><span class="line">----------------------------------------------</span><br><span class="line">   <span class="number">1</span>:         <span class="number">34943</span>     <span class="number">2675903544</span>  [B</span><br><span class="line">   <span class="number">2</span>:       <span class="number">3611235</span>      <span class="number">194315032</span>  [C</span><br><span class="line">   <span class="number">3</span>:       <span class="number">3622541</span>      <span class="number">115921312</span>  <span class="filename">java.lang.String</span><br><span class="line">   4</span>:       <span class="number">1037136</span>       <span class="number">29288720</span>  [J</span><br><span class="line">   <span class="number">5</span>:        <span class="number">979922</span>       <span class="number">23518128</span>  <span class="filename">java.util.BitSet</span><br><span class="line">   6</span>:        <span class="number">407110</span>       <span class="number">19541280</span>  <span class="filename">com.xiaomi.xmpush.thrift.Target</span><br><span class="line">   7</span>:         <span class="number">96961</span>       <span class="number">16289448</span>  <span class="filename">com.xiaomi.xmpush.thrift.XmPushServerContainer</span><br><span class="line">   8</span>:         <span class="number">70627</span>        <span class="number">9615944</span>  &lt;methodKlass&gt;</span><br><span class="line">   <span class="number">9</span>:         <span class="number">70627</span>        <span class="number">9534712</span>  &lt;constMethodKlass&gt;</span><br><span class="line">  <span class="number">10</span>:        <span class="number">158114</span>        <span class="number">8854384</span>  <span class="filename">com.xiaomi.xmpush.thrift.SubscribeTopicInfo</span><br><span class="line">  11</span>:        <span class="number">239540</span>        <span class="number">7665280</span>  <span class="filename">java.util.HashMap$Entry</span><br><span class="line">  12</span>:         <span class="number">76359</span>        <span class="number">6108720</span>  <span class="filename">com.xiaomi.xmpush.thrift.XmPushBroadcastTopic</span><br><span class="line">  13</span>:          <span class="number">5016</span>        <span class="number">6029160</span>  &lt;constantPoolKlass&gt;</span><br><span class="line">  <span class="number">14</span>:         <span class="number">89860</span>        <span class="number">5358112</span>  &lt;symbolKlass&gt;</span><br><span class="line">  <span class="number">15</span>:         <span class="number">80553</span>        <span class="number">5155392</span>  <span class="filename">com.xiaomi.xmpush.thrift.PushMetaInfo</span><br><span class="line">  16</span>:         <span class="number">69778</span>        <span class="number">5148672</span>  [<span class="filename">Ljava.lang.Object;</span><br><span class="line">  17</span>:         <span class="number">72151</span>        <span class="number">4617664</span>  <span class="filename">com.xiaomi.xmpush.thrift.PushRegistrationInfo</span><br><span class="line">  18</span>:         <span class="number">92951</span>        <span class="number">4461648</span>  <span class="filename">io.netty.util.HashedWheelTimer$HashedWheelTimeout</span><br><span class="line">  19</span>:          <span class="number">5016</span>        <span class="number">4450704</span>  &lt;instanceKlassKlass&gt;</span><br><span class="line">  <span class="number">20</span>:         <span class="number">96884</span>        <span class="number">3875360</span>  <span class="filename">com.xiaomi.xmpush.thrift.XmPushActionFetchMessage</span></span><br></pre></td></tr></table></figure>
<p>　　有34943个byte[]示例居然占去了2.5G的内存！得好好分析下这里出了什么问题。<span></span></p>
<h3 id="看进程内存详细占用情况：jmap">看进程内存详细占用情况：jmap</h3><p><code>[leo@online:~]# jmap -dump:format=b,file=/tmp/fetch.13205.bin 13205</code></p>
<p>　　将内存全部dump到本地文件（还是线上机器），然后压缩一下，传输到远程本地机器，并解压： </p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[leo<span class="variable">@online</span><span class="symbol">:~</span>]<span class="comment"># tar cvzf /tmp/fetch.tar.gz /tmp/fetch.13205.bin</span></span><br><span class="line">[leo<span class="variable">@online</span><span class="symbol">:~</span>]<span class="comment"># scp /tmp/fetch.tar.gz leo<span class="yardoctag">@leohost</span>:/tmp</span></span><br><span class="line">[leo<span class="variable">@leohost</span><span class="symbol">:~</span>]<span class="comment"># tar -xvzf /tmp/fetch.tar.gz</span></span><br></pre></td></tr></table></figure>
<h3 id="分析内存：mat">分析内存：mat</h3><p>　　jhat和mat可以查看jmap的结果，jhat挺弱，用mat可以在eclipse安装插件，也可以在这里<a href="http://www.eclipse.org/mat/downloads.php" target="_blank" rel="external">下载mat</a>  </p>
<h4 id="Overview">Overview</h4><p>　　在首页上点击【Open Dump File】，在【Overview】页发现4块大内存占去了绝大部分：<br><img src="http://lyso.qiniudn.com/memleak.4.png" alt="image">  </p>
<h4 id="Dominator_Tree">Dominator Tree</h4><p>　　在这里可以看得到，前四个是 <code>io.netty.buffer.PoolArena$HeapArena</code> 对象。难道我代码里哪里hold住了这么大的内存？印象中没有申请过啊，赶紧去看看吧。<br><img src="http://lyso.qiniudn.com/memleak.1.png" alt="image"> </p>
<h4 id="Reference_Tree">Reference Tree</h4><p>　　在任意一个对象上右击，【Path to GC Root】-&gt;【with all references】，可以看到下图，哈哈，找到了自己的代码（<code>com.xiaomi.mampa.redis.utils.Utils</code>）！<br><img src="http://lyso.qiniudn.com/memleak.3.png" alt="image"><br>　　这里有一段这样的代码：<br><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ByteBufAllocator bufPool = <span class="keyword">new</span> PooledByteBufAllocator();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">ByteBuf <span class="title">allocByteBuf</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> bufPool.<span class="title">buffer</span><span class="params">(initialCapacity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>　　就是这里的问题了，异步pipeline的客户端Redis-Mampa中在序列化前使用ByteBuf对象暂存指令和参数，这个ByteBuf是基于引用计数的，需要用完之后release。后来跟长者陈述这个问题时，长者一拍大腿“哎呀你不早问我！用netty的东西都得自己申请和释放！”。早问你了我不会像这样记这么<strong><em>深刻</em></strong>^^。<span></span></p>
<h3 id="修复">修复</h3><p>　　很简单，用完就release呗：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Encode and write this command to the supplied buffer using the new</span><br><span class="line"> * &lt;a href="http://redis.io/topics/protocol"&gt;Unified Request Protocol&lt;/a&gt;.</span><br><span class="line"> *</span><br><span class="line"> * @param buf Buffer to write to.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> encode(ByteBuf buf) &#123;</span><br><span class="line">    buf<span class="built_in">.</span>writeByte(<span class="string">'*'</span>);</span><br><span class="line">    Utils<span class="built_in">.</span>writeLongAsString(buf, <span class="number">1</span> <span class="subst">+</span> (args <span class="subst">!=</span> <span class="built_in">null</span> <span class="subst">?</span> args<span class="built_in">.</span>count() : <span class="number">0</span>));</span><br><span class="line">    buf<span class="built_in">.</span>writeBytes(Utils<span class="built_in">.</span>CrLf);</span><br><span class="line">    buf<span class="built_in">.</span>writeByte(<span class="string">'$'</span>);</span><br><span class="line">    Utils<span class="built_in">.</span>writeLongAsString(buf, <span class="keyword">type</span><span class="built_in">.</span><span class="built_in">bytes</span><span class="built_in">.</span>length);</span><br><span class="line">    buf<span class="built_in">.</span>writeBytes(Utils<span class="built_in">.</span>CrLf);</span><br><span class="line">    buf<span class="built_in">.</span>writeBytes(<span class="keyword">type</span><span class="built_in">.</span><span class="built_in">bytes</span>);</span><br><span class="line">    buf<span class="built_in">.</span>writeBytes(Utils<span class="built_in">.</span>CrLf);</span><br><span class="line">    <span class="keyword">if</span> (args <span class="subst">!=</span> <span class="built_in">null</span>) &#123;</span><br><span class="line">        buf<span class="built_in">.</span>writeBytes(args<span class="built_in">.</span>buffer());</span><br><span class="line">        args<span class="built_in">.</span>release();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="验证">验证</h3><p>　　好，改完了验证一下。写个循环申请500M内存，分别不release和release，然后sleep住，并用jmap将内存dump出来用mat查看，得到下列两幅图，验证成功。<br><img src="http://lyso.qiniudn.com/memleak.5.png" alt="不进行release的内存使用"><br><img src="http://lyso.qiniudn.com/memleak.6.png" alt="进行release的内存使用"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://content.xilu.com/uploadfile/2011/0815/20110815094715719.jpg" alt="leak"></p>
<p>　　最近新上线的异步化服务，查看perf-counter完全没有达到理论的QPS]]>
    </summary>
    
      <category term="ByteBuf" scheme="http://lyso.me/tags/ByteBuf/"/>
    
      <category term="MAT" scheme="http://lyso.me/tags/MAT/"/>
    
      <category term="NIO" scheme="http://lyso.me/tags/NIO/"/>
    
      <category term="Netty" scheme="http://lyso.me/tags/Netty/"/>
    
      <category term="PolledByteBufAllocator" scheme="http://lyso.me/tags/PolledByteBufAllocator/"/>
    
      <category term="jhat" scheme="http://lyso.me/tags/jhat/"/>
    
      <category term="jmap" scheme="http://lyso.me/tags/jmap/"/>
    
      <category term="内存泄露" scheme="http://lyso.me/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[餐后小记]]></title>
    <link href="http://lyso.me/2014/06/28/after-dine-with-classmates/"/>
    <id>http://lyso.me/2014/06/28/after-dine-with-classmates/</id>
    <published>2014-06-28T15:22:11.000Z</published>
    <updated>2015-04-02T02:46:57.000Z</updated>
    <content type="html"><![CDATA[<p>　　十几个同学的聚会，顺便去车库咖啡聊聊天，装模作样的码了几百行代码，才发现我这已有一年多的时间“两耳不闻屏外事，一心只做程序员”了。偏信则暗兼听则明，那段时间内跟好多前辈和朋友聊天，收获颇丰，记得跟本来生活喻华峰聊后写了一篇日志总结当时的心情。这一年多来自己在技术上有了很多的进步和收获，但似乎也局限了思考问题的角度。我本以为自己会是安心做事专研一术，但时代似乎给我们这代人的压力让我们变得浮躁和急功近利，尤其再加上传统家庭观念中生养相关的一系列待解决的问题。以前我也爱说，“钱能解决的问题都不是问题”，但面前摆着一坨需要钱才能解决的问题时，跟自己谈理想时自己都觉得心虚。前段时间领导说“如果像你这样有能力又上进的好员工都不能得到应有的，那这个社会太不公太操蛋了”让我鼻子猛的发酸，冷静下来想想这社会的确处处有着不公和操蛋。天航今天在车里问，人活着图个什么，我没答案，说不图什么。但我觉得人在做的，是自己逼自己，逼自己多想想多看看多动动多做点什么，让自己担负起社会和家庭责任之余能留出一片做梦的空白，免得走的太慢而被现实逼疯。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　十几个同学的聚会，顺便去车库咖啡聊聊天，装模作样的码了几百行代码，才发现我这已有一年多的时间“两耳不闻屏外事，一心只做程序员”了。偏信则暗兼听则明，那段时间内跟好多前辈和朋友聊天，收获颇丰，记得跟本来生活喻华峰聊后写了一篇日志总结当时的心情。这一年多来自己在技术上有了很]]>
    </summary>
    
      <category term="80后" scheme="http://lyso.me/tags/80%E5%90%8E/"/>
    
      <category term="人生" scheme="http://lyso.me/tags/%E4%BA%BA%E7%94%9F/"/>
    
      <category term="现实" scheme="http://lyso.me/tags/%E7%8E%B0%E5%AE%9E/"/>
    
      <category term="理想" scheme="http://lyso.me/tags/%E7%90%86%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[遗憾却也不易的亚军（多图^^）]]></title>
    <link href="http://lyso.me/2014/06/27/badminton-second-mi/"/>
    <id>http://lyso.me/2014/06/27/badminton-second-mi/</id>
    <published>2014-06-27T15:22:11.000Z</published>
    <updated>2015-04-02T02:46:57.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://lyso.qiniudn.com/badminton.2.jpg" alt="image"></p>
<h2 id="遗憾，也很不易。">遗憾，也很不易。</h2><p>我们队名叫云由队，即路由器/云平台队。</p>
<p>小组赛第一轮对阵小米网，在开赛前拉了拉球，我觉得状态还不错，跟荣堂商量谁打男单时我自告奋勇上了场。但比赛时各种失误和动作僵硬，竟将一场势在必得的比赛输掉了。后续的比赛赢了两场，总比分2:3输掉。</p>
<h2 id="球友的重要性">球友的重要性</h2><h2 id="专项训练">专项训练</h2><h2 id="记着什么，忘掉什么">记着什么，忘掉什么</h2><p><img src="http://lyso.qiniudn.com/badminton.1.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.3.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.4.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.5.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.6.jpg" alt="image"></p>
<p>再来几张好搭档荣堂的后场动作：）<br><img src="http://lyso.qiniudn.com/badminton.27.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.28.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.29.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.30.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.31.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.32.jpg" alt="image"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://lyso.qiniudn.com/badminton.2.jpg" alt="image"></p>
<h2 id="遗憾，也很不易。">遗憾，也很不易。</h2><p>我们队名叫云由队，即路由器/云平台队。</p>
<p>小组赛第一轮对阵]]>
    </summary>
    
      <category term="亚军" scheme="http://lyso.me/tags/%E4%BA%9A%E5%86%9B/"/>
    
      <category term="小米" scheme="http://lyso.me/tags/%E5%B0%8F%E7%B1%B3/"/>
    
      <category term="小米羽毛球联赛" scheme="http://lyso.me/tags/%E5%B0%8F%E7%B1%B3%E7%BE%BD%E6%AF%9B%E7%90%83%E8%81%94%E8%B5%9B/"/>
    
      <category term="羽毛球" scheme="http://lyso.me/tags/%E7%BE%BD%E6%AF%9B%E7%90%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[十年]]></title>
    <link href="http://lyso.me/2014/06/25/ten-years/"/>
    <id>http://lyso.me/2014/06/25/ten-years/</id>
    <published>2014-06-25T15:22:11.000Z</published>
    <updated>2015-04-02T02:46:57.000Z</updated>
    <content type="html"><![CDATA[<p>2004年来北京念大学，至今十年。</p>
<p>TO BE CONTINUED…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2004年来北京念大学，至今十年。</p>
<p>TO BE CONTINUED…</p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的博客站点搭建过程]]></title>
    <link href="http://lyso.me/2014/05/07/setup-this-site/"/>
    <id>http://lyso.me/2014/05/07/setup-this-site/</id>
    <published>2014-05-07T10:44:12.000Z</published>
    <updated>2014-05-10T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://lyso.qiniudn.com/mm.1.jpg" alt="builder"></p>
<h2 id="用什么搭建的">用什么搭建的</h2><ul>
<li>空间用的Github Pages<ul>
<li>用天航的话说，cnblogs/csdn/sina-blog等太低端太屌丝</li>
<li>流量不算太大时买空间又要花钱不太划算</li>
<li>我的代码大都在github上，Github Pages发布方便</li>
</ul>
</li>
<li>域名在godaddy上购买<ul>
<li>国外的，不需要备案</li>
</ul>
</li>
<li>DNS用DNSPod<ul>
<li>方便好用</li>
</ul>
</li>
<li><p>静态网页内容在本地用hexo生成（模板+markdown），并发布到github上</p>
<ul>
<li>用天航的话说，wordpress太低端</li>
<li>markdown简洁方便，在Jekyll、Octopress、Pelican、FarBox、Ghost、Marboo、Hexo、Medium中综合选取和Hexo，选取原因包括：<ul>
<li>名字好听</li>
<li>台湾人搞的，中文支持肯定不疼</li>
<li>对Node.js的印象比Ruby好<br>具体情况可以随便搜一下这些关键词，网上一大堆。</li>
</ul>
</li>
</ul>
</li>
<li><p>评论用多说（会换掉成我们自己开发的产品），分享用jiathis</p>
<ul>
<li>不用disqus/addthis是因为在天朝用的人不多，不需要装B的地方就别装了</li>
<li>我们已经做出来一套消息通信平台，可以做任何disqus可以做的和做不了的事情，敬请期待：）</li>
</ul>
</li>
</ul>
<h2 id="已有环境">已有环境</h2><p>已经安装好<code>git</code>，本地有<code>shell</code>命令终端，有个文本编辑器如<code>editplus</code>或<code>sublime text 2</code>或<code>记事本</code>，有<code>github</code>账号。</p>
<h2 id="安装node-js">安装node.js</h2><p>直接到<a href="http://nodejs.org/" target="_blank" rel="external">node.js官方网站</a> 下载安装即可。</p>
<h2 id="安装hexo">安装hexo</h2><p><code>npm install -g hexo</code></p>
<h2 id="初始化你的博客站点">初始化你的博客站点</h2><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">mkdir your-site</span><br><span class="line">cd your-site</span><br><span class="line">hexo init <span class="preprocessor"># 初始化站点</span></span><br><span class="line">hexo g <span class="preprocessor"># 同 hexo generate，生成静态文件</span></span><br><span class="line">npm install <span class="preprocessor"># 仅需运行一次</span></span><br><span class="line">hexo <span class="keyword">server</span> <span class="preprocessor"># 起服务</span></span><br></pre></td></tr></table></figure>
<p>此时在<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 就能看到服务了。</p>
<h2 id="上传到github">上传到github</h2><p>首先，需要在github上有个账号，并且把本机的ssh加入到github的authed-keys中。这些默认有节操的程序员都有的，自然不必再讲解了。如果你正在朝有节操的路上奔走，赶紧搜个教程搞定吧：）</p>
<p>其次，在github上新建一个特殊的repository，比如我的github账号是leoyonn，则我新建是 leoyonn.github.io 这个repository。</p>
<p>然后，在你的本地hexo站点目录下的_config.yml文件中添加配置：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: github</span><br><span class="line">  <span class="attribute">repository</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:leoyonn/leoyonn.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>
<p>然后使用命令 <code>hexo g -d</code> 就能通过git的commit和push命令直接发布到githubpages上了。等个十来分钟试一下吧： <a href="http://leoyonn.github.io" target="_blank" rel="external">http://leoyonn.github.io</a></p>
<h2 id="域名配置">域名配置</h2><p>有个个性的域名更拉风和装B，比如 <a href="http://lyso.me" target="_blank" rel="external">http://lyso.me</a> ^^。<br>域名在godaddy上买，支持支付宝支付。有一堆教程教如何购买，基本上搜一下一路next就行了。还有教如何使用优惠券的，这里不多说了。<em>建议大家申请.com或.me域名。据说.info因垃圾网站太多，被搜索引擎惩罚，而且续费较贵。</em><br>但由于墙的原因，godaddy的域名解析在国内基本上无法使用，看大家都用dnspod，我试着也不错。</p>
<p>首先，在godaddy帐户里设置本域名对应的dns解析地址为dnspod，如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">#</th>
<th style="text-align:left">Nameserver</th>
<th style="text-align:left">Status</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">F1G1NS1.DNSPOD.NET</td>
<td style="text-align:left">Active</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">F1G1NS2.DNSPOD.NET</td>
<td style="text-align:left">Active</td>
</tr>
</tbody>
</table>
<p>其次，在这里找到github的ip地址：<a href="https://help.github.com/articles/my-custom-domain-isn-t-working" target="_blank" rel="external">https://help.github.com/articles/my-custom-domain-isn-t-working</a> ，并在dnspod上的域名配置项里添加两个A记录，如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">主机记录</th>
<th style="text-align:left">记录类型</th>
<th style="text-align:left">线路类型</th>
<th style="text-align:left">记录值</th>
<th style="text-align:left">MX优先级</th>
<th style="text-align:left">TTL</th>
<th style="text-align:left">操作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">@</td>
<td style="text-align:left">A</td>
<td style="text-align:left">默认</td>
<td style="text-align:left">192.30.252.153</td>
<td style="text-align:left">-</td>
<td style="text-align:left">600</td>
<td style="text-align:left">删除  暂停</td>
</tr>
<tr>
<td style="text-align:left">@</td>
<td style="text-align:left">A</td>
<td style="text-align:left">默认</td>
<td style="text-align:left">192.30.252.154</td>
<td style="text-align:left">-</td>
<td style="text-align:left">600</td>
<td style="text-align:left">删除 暂停</td>
</tr>
<tr>
<td style="text-align:left">@</td>
<td style="text-align:left">NS</td>
<td style="text-align:left">默认</td>
<td style="text-align:left">f1g1ns1.dnspod.net.</td>
<td style="text-align:left">-</td>
<td style="text-align:left">600</td>
<td style="text-align:left">删除  暂停</td>
</tr>
<tr>
<td style="text-align:left">@</td>
<td style="text-align:left">NS</td>
<td style="text-align:left">默认</td>
<td style="text-align:left">f1g1ns2.dnspod.net.</td>
<td style="text-align:left">-</td>
<td style="text-align:left">600</td>
<td style="text-align:left">删除  暂停</td>
</tr>
<tr>
<td style="text-align:left">email</td>
<td style="text-align:left">CNAME</td>
<td style="text-align:left">默认</td>
<td style="text-align:left">email.secure…r.net.</td>
<td style="text-align:left">-</td>
<td style="text-align:left">600</td>
<td style="text-align:left">删除  暂停</td>
</tr>
</tbody>
</table>
<p>然后，在本地hexo根目录中<code>source</code>目录下添加<code>CNAME</code>文件，文件内容为一行，就是你的域名：<code>lyso.me</code>。<br>好了，用<code>hexo g -d</code>发布上去等一会试试吧。</p>
<h2 id="写一篇新文章">写一篇新文章</h2><p>写新文章的原理就是在<code>source/_posts</code>目录下添加新的md文档。你既可以手动新建一个文本文件扔进去，也可以通过以下命令新建：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> [layout] <span class="string">"postName"</span></span><br></pre></td></tr></table></figure>
<p>其中layout是可选参数，默认值为post。layout有哪些可以在scaffolds目录下查看，也可以添加自己的layout或编辑现有的layout。至于怎么写文章，就是看你怎么用简洁的markdown语法玩转自己的思路了。文章里可以添加标签、title、摘要、创建时间、永久链接等（可以伪造时间呢，哈哈）：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 我的博客站点搭建过程</span><br><span class="line">date: 2014-05-07 18:44:12</span><br><span class="line">updated: 2014-05-10 18:44:12</span><br><span class="line">permalink: setup-this-site</span><br><span class="line">tags:</span><br><span class="line"> - Hexo</span><br><span class="line"> - github pages</span><br><span class="line"> - Jekyll</span><br><span class="line">categories:</span><br><span class="line"></span><br><span class="line"><span class="horizontal_rule">---</span></span><br><span class="line">![<span class="link_label">builder</span>](<span class="link_url">http://lyso.qiniudn.com/mm.1.jpg</span>)</span><br><span class="line"><span class="header">## 用什么搭建的</span></span><br></pre></td></tr></table></figure>
<h2 id="使用模板">使用模板</h2><p>主题模板的使用很简单，到<a href="http://github.com/tommy351/hexo/wiki/Themes" target="_blank" rel="external">这里</a> 找到你喜欢的主题，然后用git下载到themes目录：<br><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/heroicyang</span><span class="regexp">/hexo-theme-modernist.git themes/modernist</span></span><br></pre></td></tr></table></figure></p>
<p>并修改<code>_config.yml</code>指定为此模板：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">theme</span>: <span class="string">modernist</span></span><br></pre></td></tr></table></figure>
<p>很多模板里都内置了评论、分享等插件，慢慢挖掘吧：）</p>
<h2 id="图床">图床</h2><p>考虑到博客的速度，同时也为了便于博客的迁移，图床是很有需求的，大家可以看看我的<a href="http://lyso.me/2014/06/27/badminton-second-mi/" target="_blank" rel="external">羽毛球亚军那篇博客</a> 体验一下速度：）。看到大家都墙裂推荐七牛，还访问速度极快，支持日志、防盗链和水印，我也试了试，果然不错。本想直接用百度云网盘的外链等方法的，解决不了连接过期问题，还没这个方便。七牛还支持网站直接备份，使用起来非常方便傻瓜，不介绍啦。</p>
<h2 id="评论和分享">评论和分享</h2><p>在很多模板的<code>_config.yml</code>中都可以找到配置，不再多说。</p>
<h2 id="自定义页面">自定义页面</h2><p>我做了两个自定义页面，一个<code>about</code>，一个<code>404.html</code>。用以下命令可以创建自定义页面：<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page <span class="string">"about"</span></span><br></pre></td></tr></table></figure></p>
<p>404页面我做了腾讯的找孩子公益，比如你点<a href="http://lyso.me/404" target="_blank" rel="external">这里</a> 进我博客的一个不存在的页面，页面下方有教你怎么做（非常简单，只需要把404.html放在source下，并把那句js代码放进去^^）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://lyso.qiniudn.com/mm.1.jpg" alt="builder"></p>
<h2 id="用什么搭建的">用什么搭建的</h2><ul>
<li>空间用的Github Pages<ul>
<li>用天航的话说，cnblog]]>
    </summary>
    
      <category term="Hexo" scheme="http://lyso.me/tags/Hexo/"/>
    
      <category term="Jekyll" scheme="http://lyso.me/tags/Jekyll/"/>
    
      <category term="github pages" scheme="http://lyso.me/tags/github-pages/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[小米异步消息处理架构：mampa应用篇之——Redis-mampa]]></title>
    <link href="http://lyso.me/2014/03/10/redis-mampa/"/>
    <id>http://lyso.me/2014/03/10/redis-mampa/</id>
    <published>2014-03-10T10:44:12.000Z</published>
    <updated>2014-03-20T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<h2 id="TO_BE_ADDED…">TO BE ADDED…</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="TO_BE_ADDED…">TO BE ADDED…</h2>]]>
    </summary>
    
      <category term="FSM" scheme="http://lyso.me/tags/FSM/"/>
    
      <category term="Redis" scheme="http://lyso.me/tags/Redis/"/>
    
      <category term="actor模型" scheme="http://lyso.me/tags/actor%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="erlang" scheme="http://lyso.me/tags/erlang/"/>
    
      <category term="java内存模型" scheme="http://lyso.me/tags/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="java线程模型" scheme="http://lyso.me/tags/java%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="netty" scheme="http://lyso.me/tags/netty/"/>
    
      <category term="redis pipline" scheme="http://lyso.me/tags/redis-pipline/"/>
    
      <category term="并发" scheme="http://lyso.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="开源" scheme="http://lyso.me/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="异步" scheme="http://lyso.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="异步Redis客户端" scheme="http://lyso.me/tags/%E5%BC%82%E6%AD%A5Redis%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
      <category term="有限状态机" scheme="http://lyso.me/tags/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[小米异步消息处理架构：mampa应用篇之——HBase-mampa]]></title>
    <link href="http://lyso.me/2014/03/01/hbase-mampa/"/>
    <id>http://lyso.me/2014/03/01/hbase-mampa/</id>
    <published>2014-03-01T10:44:12.000Z</published>
    <updated>2014-03-10T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<h2 id="TO_BE_ADDED…">TO BE ADDED…</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="TO_BE_ADDED…">TO BE ADDED…</h2>]]>
    </summary>
    
      <category term="FSM" scheme="http://lyso.me/tags/FSM/"/>
    
      <category term="HBase" scheme="http://lyso.me/tags/HBase/"/>
    
      <category term="actor模型" scheme="http://lyso.me/tags/actor%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="erlang" scheme="http://lyso.me/tags/erlang/"/>
    
      <category term="hbase-batch" scheme="http://lyso.me/tags/hbase-batch/"/>
    
      <category term="java内存模型" scheme="http://lyso.me/tags/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="java线程模型" scheme="http://lyso.me/tags/java%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="并发" scheme="http://lyso.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="开源" scheme="http://lyso.me/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="异步" scheme="http://lyso.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="异步HBase客户端" scheme="http://lyso.me/tags/%E5%BC%82%E6%AD%A5HBase%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
      <category term="有限状态机" scheme="http://lyso.me/tags/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[小米异步消息处理架构：mampa]]></title>
    <link href="http://lyso.me/2014/02/01/mampa/"/>
    <id>http://lyso.me/2014/02/01/mampa/</id>
    <published>2014-02-01T10:44:12.000Z</published>
    <updated>2014-02-10T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://lyso.qiniudn.com/mampa.jpg" alt="mampa"></p>
<h2 id="什么是mampa">什么是mampa</h2><p><em>MAMPA</em>的全称是：<em>xiaoMi Asynchronous Message Processing Architecture</em>，是我在小米消息组时用java开发的一套异步并发框架。</p>
<h2 id="为什么做mampa">为什么做mampa</h2><p>　　问各位一个问题：如何写并发程序？大家脑海中会浮现一堆关键词，synchronized, ReentrantReadWriteLock, Condition, await, notify, ThreadLocal, Lock, LinkedBlockingQueue, ConcurrentHashMap, volatile …… 也能想到一些其他的语言，如Erlang、Golang等。我们需要考虑到对象是需要对象和类是不是线程安全的，是不是需要在多个线程上运行，是不是要加锁，会不会造成死锁，会不会有饥饿，要不要为性能失掉一定的正确性，等等。在这种情况下，新手上路很难写出正确高效漂亮兼具的代码，高手和大牛的经验不具有可复制性可可扩展性。</p>
<p>　　小米消息系统的架构和业务逻辑代码大多用Erlang编写，这里另外一个越来越突出的问题是，大规模Erlang程序学习曲线太高，新手很难在短时间内参与到线上系统的开发和问题调查中去，这样会导致个别老员工疲于奔命……</p>
<p>　　一开始，老员工想做出这套erlang程序的java版。但后来Team Lead找到我，说我们应该着眼与更长远的目标，做一套通用的框架，让新同事写业务逻辑时就像连连线，不用考虑多线程问题。于是我开始研究Erlang中的gem_fsm，研究akka中的actor，在组里其他同事的协助和宝贵建议下，mampa出炉并一步一步走向成熟，逐步接管小米云平台消息系统各个业务中的各种模块。</p>
<h2 id="设计核心">设计核心</h2><p>　　我们的目标是，<em>设计一个高吞吐高性能的异步消息处理架构，并对开发者将并发问题隐藏起来</em>。</p>
<h3 id="从头开始">从头开始</h3><p>　　什么样的并发程序/机制是高效的？加锁？共享内存？信号量？</p>
<p>　　要回答这个问题，我们不妨想想，自然界的并发单位是什么？我们每个人都是一个并发单位，我们都在做着自己的事情，思考着自己的问题——哪里有什么共享内存？人与人之间交流，用说话，用短信，电子邮件，为什么需要在你大脑里的一块区域加锁，然后把要告诉你的信息放进去，然后再释放锁？哪有什么锁的概念？我想问题时到我自己大脑检索信息，难道也要锁不成？</p>
<p>　　我接触到这个概念是恍然大悟“是啊，是这样的”，不知道你怎么想。那在写程序时，为什么不能这样呢。这是MAMPA的设计核心思路——无锁。</p>
<h3 id="Actor：并发单元">Actor：并发单元</h3><p>　　在MAMPA中，一个并发单元就是Actor。每个Actor锁定在一个线程上：这个Actor中的所有数据只有这个线程能处理、这个线程也只为这个Actor服务。</p>
<p>　　有了Actor，怎么与之通信呢？<a href="http://golang.org/doc/effective_go.html" target="_blank" rel="external">Golang</a> 有一个我很喜欢的设计理念，</p>
<blockquote>
<p>Do not communicate by sharing memory; instead, share memory by communicating.</p>
</blockquote>
<p>　　在Golang里是通过channel传输消息的，那我们也需要给Actor做一个专用的channel，叫做mailbox。任何Actor想与其他Actor通信，就需要把消息发到他们的mailbox中，也就是说mailbox可以任意多个线程写，只有一个线程读——多线程的竞争问题只在此处体现，除此之外，全是单线程的天下，即除了mailbox的其它任意数据只有一个线程读写。</p>
<p>　　那如何高效实现这样的mailbox呢？当然有一种简单的实现方案是LinkedBlockingQueue。这个场景我们的第一反应是<a href="https://github.com/LMAX-Exchange/disruptor" target="_blank" rel="external">Disruptor</a> ，一个高效的无锁环形队列。对Disruptor的介绍参见我<a href="http://lyso.me/2013/09/01/disruptor/" target="_blank" rel="external">另一篇文章</a> 。</p>
<h2 id="应用案例">应用案例</h2><h2 id="mampa性能好在哪">mampa性能好在哪</h2>]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://lyso.qiniudn.com/mampa.jpg" alt="mampa"></p>
<h2 id="什么是mampa">什么是mampa</h2><p><em>MAMPA</em>的全称是：<em>xiaoMi Asynchronou]]>
    </summary>
    
      <category term="FSM" scheme="http://lyso.me/tags/FSM/"/>
    
      <category term="actor模型" scheme="http://lyso.me/tags/actor%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="erlang" scheme="http://lyso.me/tags/erlang/"/>
    
      <category term="java内存模型" scheme="http://lyso.me/tags/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="java线程模型" scheme="http://lyso.me/tags/java%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="并发" scheme="http://lyso.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="开源" scheme="http://lyso.me/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="异步" scheme="http://lyso.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="有限状态机" scheme="http://lyso.me/tags/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Disruptor剖析]]></title>
    <link href="http://lyso.me/2013/09/01/disruptor/"/>
    <id>http://lyso.me/2013/09/01/disruptor/</id>
    <published>2013-09-01T10:44:12.000Z</published>
    <updated>2014-03-10T10:44:12.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="并发" scheme="http://lyso.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="开源" scheme="http://lyso.me/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="异步" scheme="http://lyso.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="无锁" scheme="http://lyso.me/tags/%E6%97%A0%E9%94%81/"/>
    
      <category term="队列" scheme="http://lyso.me/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[初见喻华峰]]></title>
    <link href="http://lyso.me/2013/03/21/meet-yuhuafeng-benlai/"/>
    <id>http://lyso.me/2013/03/21/meet-yuhuafeng-benlai/</id>
    <published>2013-03-21T15:22:11.000Z</published>
    <updated>2015-04-02T02:46:57.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://www.jizhezhan.net/template/admin/editor/attached/image/20140411/20140411103913_58794.jpg" alt="image"></p>
<p>　　2012年底与本科的几个同学一起在北大西门的秦门吃饭。都是些老话题，最近怎么样，混的爽不爽。大家都走上了不同的路，有博士，陈博士、黄博士；有公务员，肖主席、刘主席，有央企巨头吴总，有bat大民企刘总邓总（都是飞哥），也有我这样的屌丝小民企。</p>
<p>　　饭间大家互相聊聊自己工作上的那些事，气氛不错，几口羊肉泡馍下了肚，我半开玩笑的说，现在项目做一个黄一个，正在做的事情挺无聊。看有没有靠谱的创业团队，给哥们介绍介绍。班长陈博士问我想去哪种行业，我说电商，不记得当时是否说生鲜电商了，陈博士说他还真知道一个，本来生活他们就是在做这一块的。陈博士说我认识喻总，你要感兴趣的话简历给我，我给你推一下，我说好啊好啊。</p>
<p>　　那个时候还没铁了心要离开，后来两天就没想这事情。倒是班长记着我，问我是不是真想去，并叮嘱我别试着玩，他们那边会当真。我认真的考虑了会，觉得自己本来不就是搞生鲜农副电商类的贴地气的事情么，那就试试吧，于是认真了起来，把简历发给了班长。这个时候对喻华峰还没有一点印象，于是顺着本来生活的藤慢慢的摸了些背景知识，陡然起敬，原来是个有这么段经历的人。再后来没音讯了，我问班长，他说已经跟那边说了，估计得年后会联系我。</p>
<p>　　年后我陆续看了两三家公司，恰巧都是以前同事推荐的老网易人搞的，主线就两个点，要找nb的创业团队，要做有意思的、自己认同的事情。这个过程中我挺感激的，跟前辈们聊总是能收获到很多，我觉得这段时间虽然写代码可能手生了些，但在看问题的角度、想事情的广度上我觉得自己都有很大的成长。我跟陈老师说，我东瞅瞅西看看并不是不知道自己想要什么，只是平时工作上哪有机会这样跟各个领域各个级别的人都能聊聊，从他们的视角看看当今世界。谢谢这些耐心给我讲故事的总们和老师们。</p>
<p>　　本来生活这边一直没消息，我又问班长，班长说耐心等下，另外告诫我他们给的钱不多，让我多看看其他地方。</p>
<p>　　不久之后本来生活老钱用浓重的南方口音给我打电话说有空来面试没，我手机多少多少，公司地点在哪在哪，你记一下吧。我接电话不好意思在室内接，室外用脑子记一个电话号码还行，加上地址就搞不定了，脑子缓存也就那点。。。后来实在想不起来房门号了，打回电话给老钱结果他没接到。回到座位上我一想，靠这么2b，上他们网站上看看不得了，于是直接把地址复制到了导航收藏里。</p>
<p>　　面试的过程很顺利，老钱先跟我各方各面海聊一同，说我找个我们这边技术挺牛的人小方来跟你互相理解一下吧。和小方的面试过程倒出乎我的意料，还是对着简历海聊，没问一个算法题或写代码什么的。昨晚还复习了半夜的算法分析书，没用上。有句话没错，面试是相互的，不仅面官在看你，你也在看这家公司里的技术团队是什么样子，从这个角度上即使有心理准备也增添了不少顾虑，当然这短短时间里看到的只是一个面，一个角。之后老钱又过来聊了聊，说对我印象很不错期望我过来，但也提前把问题摆出来：我们给不了你那么多的薪酬。我问你怎么不提股权的事情，他说我们现在都先不提，我云里雾里的走了。对老钱的印象还不错。</p>
<p>　　再后来在吃饭的路上偶遇google的威哥和肖哥，简单聊了几句，肖哥说这周就transfer到米国去了。晚上跟老婆聊聊，觉得诶不错，在天朝干嘛都觉得挺憋屈的，性价比好低，即使不考虑这一层，我们的人生经历也应该更丰富些，有机会出去看看不挺好嘛。于是找ares爷给做了个内推。后来想想，我的考虑因素的那主要两点：团队+技术 vs. 业务方向，google和本来生活在两个极端，这两者中间有数不清的公司，什么bat360最近也在大规模招人（从几个人给我介绍的情况来看给的钱也超多），我却是只对两个极端的感兴趣。我跟陈老师说这么选可能别人感觉有点2。我自己都觉得这种思路也挺2。不过就是贱贱的不想去中间的那些地方。google面试进度很慢，刚走完最后一轮的onsite，还没结果。感觉不是太好。</p>
<p>　　在这插入“天花板”的故事。（这里“天花板”代指，没有任何讥讽之类的贬义，只是个代名词，文章里不想有太多的信息量，多谢谢总的教导。。。）。也是老同事给推了个荐，去面了个试，给了个他们说已经到了这个年限天花板的offer。据了解是hr姐这边q1快结束了可kpi还远没达到，好不容易肝儿颤的给我了个天花板offer得赶紧签了，别占坑不拉屎。陈老师从挺早就站到他们的阵营了，每天例行问候“怎么样了”，我就像例行汇报……前面感激过了就不多说了，陈老师的心思我明白，大家磨合了不止一个项目，以后一起做事更好。这道理我懂，我不是心烦任何一个人，包括hr姐……他们在催我说明认可我，想让我一起做事情。</p>
<p>　　我只是在这件事情上不想被催促。</p>
<p>　　后来我跟hr姐说月底给答复，然后我们挂了电话倒是清净了几天。前两天突然打电话来说考虑的怎么样了，那周五给答复吧。怎么答复，之前老钱打电话来说喻华峰想找我聊，我还没拜见喻总呢，google还没说甩不甩我呢，要我现在答复，我不能打太极或玩欺骗吧，那我只能说咱跟天花板没缘分。想起之前跟陈老师提到了应届找工作时360很早给了offer，salary不错还有期权但要求1天答复，我直接说算了。虽说当时看不到现在360的势头，现在想起来也不后悔。除了我有点后悔毕业之前从小到大都傻不啦即的遇事不知道多想，印象中也没什么好后悔的事情。无论接不接天花板，都不会后悔。不一样的人生而已（插话：我突然想起一些影视桥段，问要再从来一遍，你是不是仍然会这样选择？我擦谁玩游戏会愿意原路走老剧情）。</p>
<p>　　之前跟老钱大致约在了这周四五的样子见喻总。上午老钱就发来短信问时间，我说我随意，看喻总时间安排。上午跟易帝聊到乱七八糟户口啊贷款啊买房啊之类的事情，我这方面是小白想请教一把，就说中午一起吃饭吧。恰在此时陈老师给了一堆醉爱券（谁想要来找我取吧。。），我说我们去醉爱吧。伟哥也一起去了，一听说去醉爱摸了摸兜憨厚一笑，我就30多块钱…… 伟哥肿是那么淳朴可爱，我会想你的，还有你的腊肉。</p>
<p>　　饭间1:20左右才看到老钱的短信，“2点准时到，喻总之后还有会”，幸好今天手痒开车来的，倒是赶上时间了。</p>
<p>　　初见喻华峰，跟想象中大模样差不多，老些。穿似乎80年代样子的深蓝色中山装，利索的短发。跟一个人面对面交流时才能知道什么是真什么是假。他说其实我们是前同事呢。简单问问我这边都还有些什么项目，问我现在在做什么，我说那我把我现在的情况给您摆一下吧，接着说了我做过什么想做什么在看那些机会对什么感兴趣之类的。之后继续就着本来生活的业务以及以后的情况介绍。喻总一步一步讲了以后的打算，很具体，聊的过程中也跟我说了些他在人生、职业方面的经验，很受用。后来我说了自己的两个顾虑，虽然没有在当下给我什么保证，他所说的后续打算也让我放心了许多。回来跟陈老师聊时开玩笑说，挺巧的，网易VP最近直接或间接接触了好几个…… 把我当回事找我认真聊的也就喻总吧，这也算是一种知遇吧，无论是谁当事，其他不说，也会心存感激的。这个场合可能不合适，不过我想到了王伯当。</p>
<p>　　昨天凌晨给哥们发了个短信，感慨我们没有当年高考填志愿时“大不了再来一年”的洒脱，人生有了那么一点点积累就失去了放弃的勇气。从另一个角度再回想下，心中也挺感激，身边都是些有血性不算计的善良人。这段时间收获了很多，要感谢指点我的人和认可我的人，也要抱歉因我长时间没做决定而影响到的人。这段时间“多聊聊”对我来说，是最受用的一门课。</p>
<p>　　还有三个月就毕业两年了。在这近两年里我浅知些算法、系统、架构，浅知些运维、运营、运作，浅知些产品、用户、推荐，浅知些项目、团队、敏捷…… 从身边人的口中也能发现一些也许自己不知道的点，比如谢总福老师都说我“有产品的潜质”，福老师跟我聊他在MS的情况时说你别来这，“你有google范”（其实是太抬举我了）…… 这个过程中我逐渐了解到，做事不只是做事。而我也意识到我所知道的这些都是做事的冰山一角。与一伙有意思的人一起做一件有意思的事，本身就是件很有意思的事。</p>
<p>　　这段时间里我需要感激的人和事有很多，都没提到。现在好像还没到总结的时候，只是今天下午收拾了东西没什么事想记录下对喻总的印象，然后背景不小心铺垫多了些……</p>
<p>leoyonn匝gmail.com<br>2013.3.21晚</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://www.jizhezhan.net/template/admin/editor/attached/image/20140411/20140411103913_58794.jpg" alt="image"></p>
<p>　　2012年底与本]]>
    </summary>
    
      <category term="创业" scheme="http://lyso.me/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="喻华峰" scheme="http://lyso.me/tags/%E5%96%BB%E5%8D%8E%E5%B3%B0/"/>
    
      <category term="本来生活" scheme="http://lyso.me/tags/%E6%9C%AC%E6%9D%A5%E7%94%9F%E6%B4%BB/"/>
    
      <category term="职业规划" scheme="http://lyso.me/tags/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
</feed>