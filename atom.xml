<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Lyso™]]></title>
  <subtitle><![CDATA[理想主义者在现实中的舞步]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lyso.me/"/>
  <updated>2016-10-05T04:44:12.000Z</updated>
  <id>http://lyso.me/</id>
  
  <author>
    <name><![CDATA[leoyonn]]></name>
    <email><![CDATA[leoyonn@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[悉知初心，见证未来]]></title>
    <link href="http://lyso.me/2016/10/05/brave-heart/"/>
    <id>http://lyso.me/2016/10/05/brave-heart/</id>
    <published>2016-10-05T04:44:12.000Z</published>
    <updated>2016-10-05T04:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://lyso.qiniudn.com/go-seek0.jpg"></p>
<blockquote>
<p>自述：悉见科技创始人刘洋的成长历程</p>
</blockquote>
<h2 id="好孩子的反叛">好孩子的反叛</h2><h3 id="巴掌">巴掌</h3><p>我出生在一个家教很严的农村家庭。父亲兄弟姐妹六个，到他和母亲结婚时，爷爷留给他们的只有半袋面粉。他们从河里挖泥挑墙，建立起了村里最穷困的家庭。后来，在母亲的支持下，父亲尝试了数十种养家糊口的营生，当教师、弹棉花、建楼板厂、代理调压器、自学无线电代理和维修电视机、电风扇、丝网印刷等，家里情况逐渐好转，有了全村里第一辆摩托车、第一台12寸电视、第一部电话，后来也买了车，搬到了县城。</p>
<p>也是因此，小时候我和父亲接触不多，母亲一边教学一边把我带大。农村观念信奉“严师出高徒”，用一个词形容我的童年，就是“妈妈的巴掌”。我是左撇子，刚开始学写字的时候用左手，母亲看到一次打一次；村里有外出打工回来的人逗我玩吓到我，我边骂边跑，母亲抓到我后打得我在地上打滚求饶；和小伙伴玩疯回来晚了，在巴掌下认错，还不准跑，越跑越挨打。是在巴掌下，知晓最基本的对错。</p>
<h3 id="试试">试试</h3><p><img src="http://lyso.qiniudn.com/go-seek2.jpg"></p>
<p>开始念小学一年级时，父亲已经辞去教师职务下海，母亲接着代他教三年级数学。有次她正批阅试卷，我看到一堆的大红叉，问母亲这是三年级的卷子吗，这么简单怎么还这么多错。母亲拿一张空白试卷让我做题，居然比大部分三年级学生答得要好，让父母很是欣喜。导致的结果是，自此更加严厉，“你要好好学习，等你上重点初中了，就可以随便玩了”。这句话后来一直在说，只是宾语从“初中”变成了“高中”，然后“大学”……</p>
<h3 id="回头">回头</h3><p>以小学里第一名的成绩进入重点初中，在初中也一直是第一名。但后来“被早恋”、玩街机，再加上身体一直多病，成绩飞速下滑，初三时已经是中间水平的成绩。接下来老生常谈：被软硬兼施地教育、“女朋友”被转学，我也觉得没啥意思了，心收回来，以学校第一的成绩考入重点高中。</p>
<h3 id="傲娇">傲娇</h3><p>但到了高一又重复了初中的问题，短短一年，成绩由班里第一下降到全校几百名。高二时分座位，因我年龄个头偏小、成绩靠后，座位就没得挑了，班主任贾老师让我坐第一排。我不情愿，贾老师说“有本事了再自己选座位”。于是又激活了我的小宇宙，第二次选座时就第一个选的，昂首阔步径直走向我最爱的中排的窗边。后来有同学向我转述，贾老师在找他们谈话时都笑语“刘洋真傲，比我还傲”。</p>
<h3 id="权威">权威</h3><p>后来就一直名列前茅，基本霸占榜单第一，尤其数理化。初高中的奖状贴满了家里的一面墙，这也是父母向朋友炫耀的荣誉墙。当时我的作风是拒绝学校的学习资料，做自己买的。老师开讲时提前三分钟再看，边做边听“流水线”，同时开开小差。在考试时我也特别喜欢试卷出难题，因为难易自己都是基本满分，难了才能有区分度，容易了反而更容易马虎。后来学校为了加强对尖子生的训练力度，开设“小班”，请最好的老师加灶培养。有一次好像因为一道很难的题全校只有我一份正确解答，小班的数学老师当着全校尖子生说“刘洋现在是我们高中的数学权威”。把我乐得当下就咧开了嘴——这是整个18岁以前我最受用的夸赞了吧。</p>
<h3 id="放纵">放纵</h3><p>后来就考入了北京大学。当年全县城唯一一个（另外还有一个北大医学部、一个清华、一个清华国防生）。在18岁，一直是在父母的严加看管下生活的，突然间像脱缰之马，玩不完的游戏、看不完的电影、谈得完的恋爱。为了买一台顶配的电脑，又不敢向父母申请那么多的经费，吃馒头豆瓣酱，一个月生活费170元。为了给女朋友买点小礼物，自学Photoshop做logo挣外快。但这些问题都不大，就像初、高中的开始一样。但过了18岁，需要了独立思考，思考得越多，越临近触碰那个点：我之前的人生有何意义，我在做的事情有何意义，我以后活着有何意义。</p>
<h2 id="价值观的涅槃">价值观的涅槃</h2><h3 id="崩塌">崩塌</h3><p>因为我当初报考计算机系，是因为高二时家里有了台电脑，接触了游戏《仙剑奇侠传》，好奇“卧槽这么好玩牛逼的东西，我要会做就好了”，后来听同学说，要做游戏就得学编程，学编程就得选计算机系。义无反顾。</p>
<p>在很长的时间，想不通这些问题。我知道玩完游戏后的空虚，也听说有学长被退学。当时陷入了一种绝望：因要做游戏选计算机系就变得没了意义，上北大也变得没了意义，之前十八年的成长也变得没了意义。于是，把自己搞的“神经衰弱”，经常半夜三更绕着未名湖转啊转，甚至不止一次动了轻生的念头。</p>
<h3 id="寻找">寻找</h3><p>还好寻死是个门槛挺高操作挺复杂的事情。后来逐渐积极面对这个事情：世上这么多人都活着，他们没遇到这个问题吗，还是他们压根不想这个问题？他们怎么解决的问题，还是选择欺骗自己？后来从宗教里找答案，佛教、禅宗、道教…… 也是第一次，从“唯物主义”的陷阱里走了出来，以更宏观的方式和更全局的角度看世界。</p>
<h3 id="涅槃">涅槃</h3><p>直至接触到阳明心学。</p>
<p>第一次接触是在《明朝那些事儿》，看了两遍，对王守仁印象很深，敬佩的五体投地，但没有真正理解阳明心学。后来看专门写王阳明的一些书，以及《传习录》等，边看边想，逐渐在看着书的时候能大概明白其要表达的含义，但与自己在现实中的言行是脱钩的。又过了些时日，经常会在做决策时想怎么样能从内心就知道如何选择，即使明白NFL理论：天下没有免费的午餐，没有一种理论可以普适地对所有的事起作用。在几次事件的影响下，又回来看王阳明的书，逐渐找到一点感觉，感觉好像明白了，亮堂了。继续读，继续想，反复读，反复想，结合想自己之前遇到的一些事情。终于“开悟”，对于心学里的关键词不再只是停留在字面上的理解。而后又发现，心学其实具有很高的“传播门槛”，因为知道心学和会运用心学并从中得益差别比一般的理论结构要大。所以在对方未从心学中得益时，你给他洗脑说心学多好是没用的，这是一门在结合每个人实践时才能明了的理论，而在表述和传播时只是冷冰冰的几行字——就像你现在在看我这篇文章，如果不是心学得益者，很难从这段文字中得益。</p>
<p>心学的根本是致良知。良知是决策的本源，任何待做之事只要问良知即可。心即理，理即天，撇开外界的干扰，内心认为正确的，就是良知所赞同的，就是真理，就是天理。我们被洗脑要坚持唯物主义、鄙弃唯心主义，其实事物即感知，若无感知，事物有何意义？每个人所理解的世界就是客观和他的主观相互交互相互作用中形成的。如果事物是一成不变的客观，为何有时候白驹过隙，有时候又度日如年？</p>
<p>心学四句教：无善无恶心之体，有善有恶意之动。知善知恶是良知，为善去恶是格物。格物致知，是要达到知行合一之境地。知发自内心，发自良知，知行合一则让行为遵循内心的指引，遵循良知的约束。心学的格物并不是理学的格物，心学的领悟也不是禅道的打坐、面壁。心学讲求“事上练”，在做事的过程中修炼身心，是一种入世的积极理论体系。</p>
<p>心秉良知，无所畏惧。自此之后，豁然开朗。</p>
<p><img src="http://lyso.qiniudn.com/go-seek3.jpg"></p>
<h2 id="选择与离开">选择与离开</h2><p>心是根，根深才能支撑起参天大树，无论风雨摇曳季节轮换，依然能保持生命力随时盛放。之后的选择，无论是合还是离，总是在朝向心中更高远处。</p>
<h3 id="起点">起点</h3><p>因爱好选择了在图形图像实验室实习，接下来直接保研。读研期间，主做了实验室和微软亚洲研究院合作的项目（数字化遗产保护）：用相机拍摄的普通照片进行实时三维建模与渲染。去中关村攒了一台NB的主机和两块nVidia的GTX260+显卡，用C++、cg和CUDA结合进行CPU+GPU的并行流水编程，将算法由原来数分钟1帧，加速到每秒近百帧双目渲染。也因此有文章发表到Siggraph Asia，图形学国际顶级会议。父亲和导师都敦促我直接把博士读了。我很明确，要去社会上取得更快的提升和更快的价值发挥。</p>
<h3 id="有道">有道</h3><p>毕业前拿到不少比有道更诱人的offer，不乏顶级游戏公司的。当时AR/VR还没成气候，搞视觉和图形的还是游戏公司对口。做选择时判断标准很明确：</p>
<ol>
<li>要有社会意义、创造价值、自己价值观认可；</li>
<li>做个有趣的人，做件有意思的事；</li>
<li>能发挥我的长处、我可以做成功、并可以快速成长。</li>
</ol>
<p>基于这三点，选择了有道，不仅是“有道”这两个字所蕴含的意义，更多是当时去实习时选择的有道最强mobile team在做一款很有意思的LBS产品叫网易八方。</p>
<p>这款移动互联网产品有许多开创性的功能特性。还在实习期间，PM召集下一个版本的讨论会，提出“滤镜”的想法，当时还不流行美拍等照片滤镜软件，我自告奋勇说自己做过图像处理，一周内给出是否可做的调研报告。先是网上搜代码，没有；再是搜索相关资料文献，寥寥。之后摸到了办法：用Photoshop处理照片做出很“好看”的滤镜效果，然后用简单片重放动作，用吸管吸取颜色画出色值变化曲线，用公式模拟曲线，再用代码实现公式。用这种办法在一周内写出了几十种滤镜算法，直接推进滤镜成为这个版本最主打功能。</p>
<p>后来毕业后直接转正，一个季度后就赶鸭子上架成了整个后台技术的负责人。</p>
<p>再后来和垂搜合并做网易饭饭，个性化餐饮推荐系统，也是挺超前挺有意思的产品，正值个性化推荐系统比较火的时候，作为推荐算法负责人，也经常跟豆瓣等团队交流。</p>
<p>但两个产品都面临商业化和运营乏力的问题，项目未做多久被砍掉。于是我选择离开。</p>
<h3 id="小米">小米</h3><p>因为当时认知到在大公司好项目不受团队控制、决策层和执行层不一致导致的问题，决定去创业公司。朋友推荐猿题库、春雨医生、本来生活等，都是后来发展都挺好的选择。最终我考虑很久，认为移动互联网是五年内最大的风口，手机是最重要的终端，任何一款产品要做大都绕不开高并发的问题。在产品和技术能力都需要再加强的情况下，我选择了小米。</p>
<p>也是运气不错，刚到小米1个月便转正，开始了和另外一位同事一起做刚立项的小米推送。在小米messaging team，经历了从我是唯一工号几百开外的新人、到除了Lead以外最资深元老的过程。米推做业务从零做起，做到千万级别时雷总开始重视。后来做到几千万时问题频现，根源在于所用语言Erlang的编程范式和工程师难招问题。但我得感谢Erlang，因其我才和悉见合伙人萨博相识。Pascal对我很信任，给了充分的授权，基于Java闭关开发我命名为MAMPA（xiaoMi Asynchronous Message Processing Architecture）高并发架构，后来经过OMS的打磨和团队成员的review、优化，逐渐成熟。后来和萨博等同事一起，应用在米推、米云、米信、米聊等小米大型消息系统里，做到了去Erlang化，并且性能有了很大的提升，比如某系统原来需要百台机器，后来节约到原来的几分之一。</p>
<p><img src="http://lyso.qiniudn.com/go-seek4.jpg"></p>
<p>可预料后续很长的时间内工作的状况：维护、修补、升级。于是“心里长草了”：回顾我当时选择小米的原因：加强移动互联网的产品和技术能力。是时候“学以致用”了。当时没有直接做AR创业，一是AR没到风口上，且硬件、供应链、生产等众多环节尚未打通；二是没有真正创过业（之前在有道时和同学兼职做了迅知科技，类似于现在分答的模式，后来不了了之）。在考查了几个朋友推荐的项目后，决定辞职，以联合创始人/CTO的身份加入送姜。</p>
<h3 id="送姜">送姜</h3><p>这是一段痛并快乐的时光，收获之多、成长之快。</p>
<p>项目方向上，当时是致力于做送姜钱包：救急不救穷，做大学生身边的及时雨。学生没有固定收入来源，生活费分配不均时可能会缺钱花，送姜提供千元信用额度，本月消费下月还款就行。考虑到学生的还款能力：只提供千元额度，并且消费有限额，不做大件分期产品。对商家来说，帮他们做宣传推广，做服务标准化，做线上支付，免去了找零、记账等多种麻烦工序。对这个方向我很认可。</p>
<p>团队上，CEO有着学友卡的经验，能来事，对整合资源、搞定人很有一手，中青老年男女通吃，这些都是我不具备的；5月2日在清华科技园国际会议中心举办了中国青年高校领袖峰会，我在现场，充分见证了团队的执行力。</p>
<p>加入后负责整个产品和技术团队。之前是外包开发的，太多的问题，于是制定了重构计划，包括技术选型、任务划分、进度规划、工作流程和模式规范化等等。比如，搭建phabricator做文档管理、code review等，用teambition做任务分配及bug管理（后迁回到phabricator上），搭建nexus做maven私服，搭建git管理代码及产品分支，用modao画原型图，用samba做内部文件共享，等等。同时，给出了产品研发部的代码规范、迭代流程等。这个过程不仅有产品和技术上的收获，更多的是如何带团队。在公司运营、团队管理、产品迭代等方面，这段时间也有不少的思考，开始逐渐形成自己的观念和方法论。一边在梳理产品的方向和版本迭代规划；一边在搭建代码框架并实现主要业务逻辑；一边在尽可能招到合适的人选；一边也在和CEO一起整理商业计划书搭线融资。部门里人员逐渐招入，但产品经理一直没有物色到合适的，所以我兼任产品负责人。之前锻炼得很棒的身体和8块腹肌，很快就消失不见了。</p>
<p><img src="http://lyso.qiniudn.com/go-seek5.jpg"></p>
<p>租下了清华科技园创业大厦3层的500平，并设计新办公空间整体规划、座位排布、去郊区厂子定做桌椅隔断等，整体白色+草绿色风格，还蛮有感觉的。回到了老东家网易有道的楼上，有次上楼梯还遇到CEO周枫寒暄了一阵。但新环境没有新气象，资本寒冬的到来也让很多O2O创业团队淡出人们视线。送姜在CEO和我的共同努力下，拿到清华控股领投的数千万preA轮。之后由于一些内因外因，CEO调整了方向和企业重心，我们在产品、团队、管理等方面的一些理念上的分歧也越来越大，而这个分歧是有悖于我决策理论中的根的。同时我对AR相关的摸索也到了一定的阶段，在年初决定启动悉见科技。在经过一段时间的沟通和安排，并确认产品技术部没有问题后，离开送姜。股份全部奉还，还是好兄弟。从这里，我带走了很多，能留下的，尽可能留下。</p>
<h2 id="而立之年的决定">而立之年的决定</h2><p>我是属虎的狮子座，2016年恰是而立之年。有太素宫道士曾给我算过一卦，2016年命犯太岁，10月份之前不宜穿亮色、不宜有换工作之类的大动作。但顺势而为，势到了事不做可能就永远错过了，即使难。“万事都一笑而过，还有什么意思呢”。</p>
<p><img src="http://lyso.qiniudn.com/go-seek8.jpg"></p>
<h3 id="初心">初心</h3><p>经历了政府国策号召双创点燃起来的创投圈的火热到股灾和经济下滑刮来的寒冬，从“初心”的维度上，可以把创业者和投资人都分为两种。</p>
<p>对于创业者，第一种是怀揣一个梦想，决心做好一件事情，改变一个现状，让世界或温暖一点，或美好一点，或感性一点，或干净一点；而第二种是觉得大家都在谈创业我也要创业，为了创业而创业，也许想趁着大潮能捞一笔，也许能搏一把成大富豪，也许进入一个新的领域成名，再不济能认识不少以前接触不到的人…… 大潮褪去，去伪存真。</p>
<p>对于投资人，当然不排除绝大多数投资人都是商人，无利不起早。撇开这个层面不讲，和创业者相对应，也分两种，一种是懂的、一种是不懂的。创业本就是一个风险大、失败分母基数大、成功的分子小的概率事件，不懂浑水摸鱼的，肯定要赔掉，要不然“不科学”。但即使“懂”的这一类，每个人也有自己的标准，有的看团队，有的看创始人，有的看行业，有的看盈利，也有运气的成分在里面。作为创业者，我希望遇到的投资人是“合伙人”型的，因为认可我而选择我，并且充分利用自己的优势，和我一起把公司做好，这样才能1+1&gt;2，这样的组合多了，会让小团队千倍万倍的成长。</p>
<p>而我这次创业的初心，是基于十年来对科技的理解及相关知识技术的积累，坚信科技解放个体应该为人服务，而AR+AI+Asistant是Phone的下一代，我看到了这一点，有责任且也有能力做好这件事情。</p>
<h3 id="AR_VS-_VR">AR VS. VR</h3><p>这大半年的时间，我重复做过最多的一件事情，莫过于解释什么是AR和VR以及两者的区别了。这里不写技术文章，只用一个词来描述两者的区别：</p>
<p>连接。</p>
<p>悉见的名称取意“洞悉一切，见所想见”，连接每个人与他眼前所见的一切，包括其背后的知识、记忆、情感。</p>
<h3 id="对未来的认知">对未来的认知</h3><p>但随着技术的进步，殊途同归，AR和VR最终会走到一起，一方面是软硬件技术的结合可以让眼镜在AR和VR模式下随意切换；另一方面是AR也可以达到了VR的沉浸感和娱乐体验，VR也可以和现实世界结合有实时的交互和反馈。</p>
<p>在这个过程中，AR显示技术的发展可能要经过这样几代：</p>
<ol>
<li>LCOS+棱镜方案，以Google Glass为首，目前技术已经比较成熟，FOV（视场角）20°以下、分辨率800以下；</li>
<li>OLED/LCD/LCOS+Freeform（自由曲面）/单面反射方案，FOV在30°~40°，分辨率可达720p，目前可量产，悉见第一代产品方案；</li>
<li>全息波导/几何波导，轻薄方便，暂无成熟量产方案，目前Lumus、灵犀（我师弟）等都在积极推进，悉见第二代产品方案；</li>
<li>光场成像，Magic Leap的成像原理的技术核心，但该技术现阶段还未能在市场中进行广泛应用；</li>
<li>视网膜成像显示方案，将AR眼镜做成隐形眼镜一般大小，目前Google解决了无线充电技术，并进行了相关实验，但该技术尚处于探索阶段，只能在视网膜显示器上出现一个光点。</li>
</ol>
<p>这只是显示技术这部分。我们对“下一代交互方式”的定义，不只是显示，我们最终要让这样的一个科技终端成为每个人的Assistant，除了显示还有其它的输出，包括听觉、触觉；除了输出还有输入和计算、存储，包括各种传感器，以及的AI大脑。</p>
<h2 id="OnePiece的信念">OnePiece的信念</h2><p><img src="http://lyso.qiniudn.com/go-seek7.jpg"></p>
<h3 id="贵人相助">贵人相助</h3><h3 id="从0到0-1">从0到0.1</h3><h3 id="吸引力">吸引力</h3><h3 id="千阳号">千阳号</h3><p><img src="http://lyso.qiniudn.com/go-seek6.jpg"></p>
<h3 id="文化">文化</h3><h2 id="新世界的征程">新世界的征程</h2><h3 id="立足">立足</h3><h3 id="深耕">深耕</h3><h3 id="布局">布局</h3><h3 id="破局">破局</h3><h3 id="远景">远景</h3><p><img src="http://lyso.qiniudn.com/go-seek1.jpg"></p>
<hr>

]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://lyso.qiniudn.com/go-seek0.jpg"></p>
<blockquote>
<p>自述：悉见科技创始人刘洋的成长历程</p>
</blockquote>
<h2 id="好孩子的反叛">好孩子的反叛</h2><h3 i]]>
    </summary>
    
      <category term="AR" scheme="http://lyso.me/tags/AR/"/>
    
      <category term="价值观" scheme="http://lyso.me/tags/%E4%BB%B7%E5%80%BC%E8%A7%82/"/>
    
      <category term="信念" scheme="http://lyso.me/tags/%E4%BF%A1%E5%BF%B5/"/>
    
      <category term="初心" scheme="http://lyso.me/tags/%E5%88%9D%E5%BF%83/"/>
    
      <category term="悉见" scheme="http://lyso.me/tags/%E6%82%89%E8%A7%81/"/>
    
      <category term="战略" scheme="http://lyso.me/tags/%E6%88%98%E7%95%A5/"/>
    
      <category term="未来" scheme="http://lyso.me/tags/%E6%9C%AA%E6%9D%A5/"/>
    
      <category term="海贼王" scheme="http://lyso.me/tags/%E6%B5%B7%E8%B4%BC%E7%8E%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[给青年学生有关创业的话]]></title>
    <link href="http://lyso.me/2016/05/01/entrepreneur/"/>
    <id>http://lyso.me/2016/05/01/entrepreneur/</id>
    <published>2016-05-01T10:44:12.000Z</published>
    <updated>2016-05-02T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://lyso.qiniudn.com/sheep.jpg" alt="entrepreneur"></p>
<blockquote>
<p>受邀对年轻人说下创业与实体经济。</p>
</blockquote>
<h2 id="什么是创业">什么是创业</h2><p>这是一个最好的时代，也是一个最坏的时代。政府支持“万众创新大众创业”，有各种各样的资金支持创业者试错，有不同有想法有技术的专业人才跃跃欲试。冷静下来看，大潮中的创业者可以分为两种，一种是看到别人创业了很恐慌或者很羡慕，觉得自己也得跟着走一遭，说不定能捞一笔。这种所谓的创业者不会坚持想法，见风使舵，最终会被大浪淘沙。如果你是这一种，后面不用看了。接下来说另一种。创业者最重要的是非常喜欢自己做的事情。因为很爱而去做，不是因为别人的一句话或者看到别人去做而去做。创业想的是就是想把它做好，喜欢它，做梦也为它做事。如果没有这样的事情，可能时机未到，多积累，多看，多想。</p>
<h2 id="该不该创业">该不该创业</h2><p>有些人想创业，是因为不喜欢打工时在做的工作内容，或者做不好，这种人创业必定失败。更多的是打工时做的非常出色，大公司的平台完全不能够支撑自己发挥能力和实现梦想。创业要与困难失败为伴，在刀光剑影中求生存，并且永不放弃，不给自己留后路。如果没从内心里认同和接受这些，不适合创业。</p>
<h2 id="创业者的核心素质">创业者的核心素质</h2><p>要有趋势力、学习力、领导力、决断力、毅力、担当。如果你不能完整的做完一件事，不适合创业。如果你不能召集朋友一起和你做事，不适合创业。如果你在该做选择是犹豫不决无法推动，不适合创业。如果你长时间一直在回味自己以前的辉煌没有近期的成长和成就，不适合创业。如果你忍不住寂寞和孤独，有苦楚必须向别人倾诉，不适合创业。如果不能把所有的不确定性自己扛，同时把前景和希望展示给你的伙伴，不适合创业。</p>
<h2 id="创业的方向">创业的方向</h2><p>趋势力，讲的是势。</p>
<p>顺势而为，因时造势。接下来会发生的事情有：</p>
<ol>
<li>世界经济/科技/创新中心转移到中国；</li>
<li>消费主力阶层由屌丝变为中产；</li>
<li>无差别劳动将被机器取代；</li>
<li>有想法/个性/有品/有趣的人，也就是感性素质高的人，会得到前所未有的重视；</li>
<li>解放个体、提升生活品质的的技术创新、模式创新会大行其道，包括以下行业：<br>A. AR/VR、智能硬件、物联网、人工智能<br>B. 智能交通、车联网、空中交通<br>C. 新能源：清洁能源<br>D. 新农业：有机、环保<br>E. 新教育：感性文明教育、新技术、新模式<br>F. 新商业：个体化、定制化、品质化、趣味化</li>
</ol>
<p>科技的发展和人文、经济相互促进，找准那个你喜欢的、认同的、能坚持的、有价值的点，是能做成事情的基础。</p>
<h2 id="实业与互联网">实业与互联网</h2><p>马云说过，脱离了实业，互联网什么都不是。“不能没有马云，但不能有太多马云。至于雷军、董明珠，越多越好。”实体经济能支撑一个国家的发展，尤其互联网时代的90后、00后，需要考虑如何将自己要做的事情落地、产生价值。真正的创业者是要去解决问题的，解决问题的前提是发现问题。</p>
<h2 id="实体经济的问题">实体经济的问题</h2><p>说“互联网+”对实体经济造成了一定影响，若深入分析，会发现以阿里、京东为代表的互联网商业平台，对实体经济、尤其是对低端实体经济的带动体量之大、影响之深远实在是有史以来任何一次商业革命之所不及；另一方面，当国内的商场、实体店铺门可罗雀，大量制造业裁员关门之际，大批的国人在世界各地横扫购物，中国人世界各地扫货不奇怪，奇怪的是从以前购买各类奢侈品到现在的诸如马桶盖、面膜、运动鞋、零食等等日常生活用品，这又是为何？</p>
<ol>
<li>品质：无论是日本的工匠精神还是德国的工匠精神，究其实质，是对其产品品质的认可，而国内更多是质量为成本让步；</li>
<li>体验：消费的过程就是体验的过程，国内太多行业的服务水平需要大量提高；</li>
<li>价格：现在很多消费级的产品海外价格比国内便宜，尤其是同品质条件下，国内更多出现的炒作概念、虚有其价而无实值。</li>
<li>产品：浮躁的企业家，要么不在产品上下功夫，要么喜欢新的概念、赶时髦却穿新鞋走老路，缺乏真正的思考和沉淀。</li>
<li>情怀：挣钱不是坏事，但如果企业家没有情怀，没有悲悯和同情，没有同理心和责任感，这个社会会成什么样子？这里就不提百度了。</li>
</ol>
<p>等等，还有很多方面，创业者需要思考。这些点，就是可以进行创新，改变现状的点。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://lyso.qiniudn.com/sheep.jpg" alt="entrepreneur"></p>
<blockquote>
<p>受邀对年轻人说下创业与实体经济。</p>
</blockquote>
<h2 id="什么是创业">什么]]>
    </summary>
    
      <category term="创业" scheme="http://lyso.me/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="创新" scheme="http://lyso.me/tags/%E5%88%9B%E6%96%B0/"/>
    
      <category term="实业" scheme="http://lyso.me/tags/%E5%AE%9E%E4%B8%9A/"/>
    
      <category term="素质" scheme="http://lyso.me/tags/%E7%B4%A0%E8%B4%A8/"/>
    
      <category term="趋势" scheme="http://lyso.me/tags/%E8%B6%8B%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[创业者最重要的素质]]></title>
    <link href="http://lyso.me/2016/03/26/ceo-capability/"/>
    <id>http://lyso.me/2016/03/26/ceo-capability/</id>
    <published>2016-03-26T15:59:11.000Z</published>
    <updated>2016-03-26T17:11:32.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/point-break1.JPEG" alt="image"></p>
<p>今天问老婆，你觉得一个CEO尤其是一个创业者所需的最重要的素质是什么？<br>她说，<br>前瞻性？<br>嗯，需要。<br>智慧？<br>嗯，挺重要。<br>人脉？<br>次之。<br>诚信？<br>这个是人人都需要的基本素质。<br>果敢？<br>嗯，需要决断力。</p>
<p>这些都挺重要，还有其它挺多方面她没提到，比如学习的能力、商业敏感性、谋略、胆量……</p>
<p>但我觉得最重要的，是坚定，是抗压能力，是担当。</p>
<p>即使再多的人看不上，即使别人都觉得这个难已实现，即使同伴心起疑虑，即使投资人不再支持，即使被人拒绝成百上千次。<br>只要自己看得到一线可能，就把这些自己吞下去。<br>只要还有事情做了可以推动，就把能做的做到最好。<br>只要梦想还没被浇灭，就把信念、勇气和希望传达给伙伴。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/point-break1.JPEG" alt="image"></p>
<p>今天问老婆，你觉得一个CEO尤其是一个创业者所需的最重要的素质是什么？<br>她说，<br>前瞻性？]]>
    </summary>
    
      <category term="创业" scheme="http://lyso.me/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="坚定" scheme="http://lyso.me/tags/%E5%9D%9A%E5%AE%9A/"/>
    
      <category term="素质" scheme="http://lyso.me/tags/%E7%B4%A0%E8%B4%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的决策理论体系]]></title>
    <link href="http://lyso.me/2016/01/05/mind-arch/"/>
    <id>http://lyso.me/2016/01/05/mind-arch/</id>
    <published>2016-01-05T10:44:12.000Z</published>
    <updated>2016-01-06T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/road.jpg" alt="mampa"></p>
<h1 id="源">源</h1><p>源是一切的开始，是决策的本初，是行动的起点，是内心的归属。</p>
<p>在未寻到可支撑起信念的源时，思维会是紊乱的，随机的，行为会是无法解释的，令人懊悔的。在北大求学的日子里，有段时间想不清楚在做事情的意义，想不明白做决策时的依据，理不出日后人生何去何从，甚至想到轻生。那段时间痛苦思索，向人请教，探寻“存在的意义”，长时间下来，虽未形成完整的体系，但确立了活在当下、做好眼前的做事方式，并且把很认同的Google“不作恶”原则作为决策时的准则。</p>
<p>直至接触到阳明心学。</p>
<p>第一次接触是在《明朝那些事儿》，看了两遍，对王守仁印象很深，敬佩的五体投地，但没有真正理解阳明心学。后来看专门写王阳明的一些书，以及《传习录》等，边看边想，逐渐在看着书的时候能大概明白其要表达的含义，但与自己在现实中的言行是脱钩的。又过了些时日，经常会在做决策时想怎么样能从内心就知道如何选择，即使明白NFL理论：天下没有免费的午餐，没有一种理论可以普适地对所有的事起作用。在几次事件的影响下，又回来看王阳明的书，逐渐找到一点感觉，感觉好像明白了，亮堂了。继续读，继续想，反复读，反复想，结合想自己之前遇到的一些事情。终于“开悟”，对于心学里的关键词不再只是停留在字面上的理解。而后又发现，心学其实具有很高的“传播门槛”，因为知道心学和会运用心学并从中得益差别比一般的理论结构要大。所以在对方未从心学中得益时，你给他洗脑说心学多好是没用的，这是一门在结合每个人实践时才能明了的理论，而在表述和传播时只是冷冰冰的几行字——就像你现在在看我这篇文章，如果不是心学得益者，很难从这段文字中得益。</p>
<p>心学的根本是致良知。良知是决策的本源，任何待做之事只要问良知即可。心即理，理即天，撇开外界的干扰，内心认为正确的，就是良知所赞同的，就是真理，就是天理。我们被洗脑要坚持唯物主义、鄙弃唯心主义，其实事物即感知，若无感知，事物有何意义？每个人所理解的世界就是客观和他的主观相互交互相互作用中形成的。如果事物是一成不变的客观，为何有时候白驹过隙，有时候又度日如年？</p>
<p>心学四句教：无善无恶心之体，有善有恶意之动。知善知恶是良知，为善去恶是格物。</p>
<p>格物致知，是要达到知行合一之境地。知发自内心，发自良知，知行合一则让行为遵循内心的指引，遵循良知的约束。</p>
<p>心学的格物并不是理学的格物，心学的领悟也不是禅道的打坐、面壁。心学讲求“事上练”，在做事的过程中修炼身心，是一种入世的积极理论体系。</p>
<p><em>心秉良知，无所畏惧</em>。</p>
<h1 id="道">道</h1><p>道生一，一生二，二生三，三生万物。</p>
<p>道是自一个人内心本源出发形成的对错观、价值观、人生观、世界观，是判断事物美丑的标准，是判断行为得当与否的原则框架，是指导人进行自我塑造的准绳，是人和世界和周边交流沟通和相互作用的约束。</p>
<p>从良知上生长的价值观，知善知恶，为善去恶。</p>
<p>多年前还未毕业时，李开复的一本书《世界因你而不同》书名对我有不小的影响。多年后回想下自己生活过的时代，“有我没我，有点不同”，这才是有意义的人生。我所理解的价值，就是个体出在环境中，与环境相互作用时对环境的影响。人从社会中汲取养分，回馈给社会的减去索取的，就是这个人存在的价值。</p>
<p>我很长时间以来一直把“科技解放个体，创新改变世界”作为座右铭，志在通过科技和设计等“术”和“器”，提高人们生活品质。常和朋友们说，“要在人类文明史上留下浓墨重彩的一笔”。做价值的生产者，而不是搬运工。</p>
<h1 id="法">法</h1><p>法是实现价值观的最根本的战略、方法、指导方针、思路。</p>
<p>毕业的时候有数十个offer，如何选择？是对人生未来的设计，迈左脚迈右脚，没有客观的绝对的对错，只要无愧于心。当初选择网易有道而非其他比这个有更好薪资待遇的offer（比如网易游戏等），是基于价值观的引导：有道在做的事情有意思、有意义、对我当下和之后的人生积累有更正面的积累效应。后来从网易有道到小米也是如此。让自己当下的价值最大化，并同时积累能力和经验，让自己在下个阶段的价值最大化，是有关选择的决策之法。</p>
<p>5月份从小米离职来送姜创业亦是如此：</p>
<ol>
<li>在小米完成了米推的从0到1从1到亿，完成了高并发基础架构的搭建和多种业务的重构，继续留下会在很长一段时间内处于稳定维护期，不符合价值最大化的方略；</li>
<li>选择送姜而不是其它创业项目，是考虑到团队执行力、核心团队差异化、产品愿景和方向这三个因素。</li>
</ol>
<p>人在成长，经验在积累，经验多寡、信息掌握多少、透过现象看本质等都是影响选择的因素。但这些都是更偏执行层面才需要考虑的事情。在“法”这层需要考虑的是，累积自己的经验，提升在冗余信息中看到重点的能力，提升在浮华表面中看到本质的能力，减少弯路，积极推进。</p>
<p>有这层自信，不急躁，不妄动，不被所谓的成功学蒙蔽做事之道，不被躁动的人潮扰动心之向往。所谓成功，是按照自己的方式去度过人生。所谓创业，是做一件有价值的事，一直做，然后等待时间回报。</p>
<h1 id="术">术</h1><p>具体到做每件事上，有不同的处理方式，术是多样的，决策就是个最优化问题解答过程。</p>
<p>比如前文提到的，如何在海量信息中提取有用信息，如何透过现象分析本质；比如产品如何设计，内容如何运营，用户需求如何挖掘，系统架构如何搭建，运维监控如何组建；比如一个想法如何落实到具体细节，如何说服投资人相信你靠谱、你做的事情靠谱；比如如何追上心仪的女孩，如何让家庭关系更和睦，如何让北京气候更宜居，如何减少城市拥堵和交通事故……</p>
<p>源和道指出对错，法指明方向，术则定义为了按照既定方向达到目标需要怎么做。</p>
<p>术的积累精进来源于三种途径：</p>
<ol>
<li>书籍，“书是人类进步的阶梯”，书是前辈总结的经验精华；</li>
<li>朋友，身边的同事、朋友，公司mentor、行业的牛人，他们是活生生的，他们的经验可以直接学为己用；</li>
<li>历练，自己亲身经历“事上练”才是精进的最直接、最深切、最持久的方式。</li>
</ol>
<h1 id="器">器</h1><ul>
<li>左撇子，右脑开发得多些，所以虽不太善言谈，但创造性、直觉、节奏、想象、空间感知还不错；</li>
<li>求学期间研究方向图形图像/计算机视觉，并在顶级国际会议上发有相关文献；</li>
<li>做事的产品思维，这也是多个同事夸赞过的；</li>
<li>目前不错且在不断努力提升的审美能力；</li>
<li>高并发分布式计算能力和经验，米推从0到1、从1到亿的过程、基础架构研发并应用到多个千万级产品的重构优化；</li>
<li>敢于冒险，喜欢挑战，关键词：滑板、平衡车、徒步50km、羽球亚军、3月减脂30斤等</li>
</ul>
<h1 id="势">势</h1><p>顺势而为，因时造势。</p>
<ol>
<li>世界经济/科技/创新中心转移到中国；</li>
<li>消费主力阶层由屌丝变为中产；</li>
<li>无差别劳动将被机器取代；</li>
<li>有想法/个性/有品/有趣的人，也就是感性素质高的人，会得到前所未有的重视；</li>
<li>解放个体、提升生活品质的的技术创新、模式创新会大行其道，包括以下行业：<br>A. 智能硬件、物联网、人工智能<br>B. 智能交通、车联网、空中交通<br>C. 新能源：清洁能源<br>D. 新农业：有机、环保<br>E. 新教育：感性文明教育、VR/AR等新技术、新模式<br>F. 新商业：个体化、定制化、品质化、趣味化</li>
</ol>
<p>科技的发展和人文、经济相互促进，拭目以待吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/road.jpg" alt="mampa"></p>
<h1 id="源">源</h1><p>源是一切的开始，是决策的本初，是行动的起点，是内心的归属。</p>
<p>在未寻到可]]>
    </summary>
    
      <category term="世界观" scheme="http://lyso.me/tags/%E4%B8%96%E7%95%8C%E8%A7%82/"/>
    
      <category term="事上练" scheme="http://lyso.me/tags/%E4%BA%8B%E4%B8%8A%E7%BB%83/"/>
    
      <category term="人生观" scheme="http://lyso.me/tags/%E4%BA%BA%E7%94%9F%E8%A7%82/"/>
    
      <category term="价值观" scheme="http://lyso.me/tags/%E4%BB%B7%E5%80%BC%E8%A7%82/"/>
    
      <category term="决策" scheme="http://lyso.me/tags/%E5%86%B3%E7%AD%96/"/>
    
      <category term="对错观" scheme="http://lyso.me/tags/%E5%AF%B9%E9%94%99%E8%A7%82/"/>
    
      <category term="心即理" scheme="http://lyso.me/tags/%E5%BF%83%E5%8D%B3%E7%90%86/"/>
    
      <category term="源道法术器势" scheme="http://lyso.me/tags/%E6%BA%90%E9%81%93%E6%B3%95%E6%9C%AF%E5%99%A8%E5%8A%BF/"/>
    
      <category term="知行合一" scheme="http://lyso.me/tags/%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80/"/>
    
      <category term="阳明心血" scheme="http://lyso.me/tags/%E9%98%B3%E6%98%8E%E5%BF%83%E8%A1%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[创业这大半年]]></title>
    <link href="http://lyso.me/2015/12/18/startup-half-hear/"/>
    <id>http://lyso.me/2015/12/18/startup-half-hear/</id>
    <published>2015-12-18T10:44:12.000Z</published>
    <updated>2015-12-18T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/startup1.jpg" alt="startup"><br><em>|注：本文为博主个人阶段感悟，请勿转载传播|</em></p>
<h1 id="引子">引子</h1><p>我一直是一个幸运的人，过程中也有不少贵人相助，显得30岁以前的路途很顺畅，每一步都积累到恰到好处的经验。</p>
<p>小学升初中、初中升高中都拿到第一的名次，高二尝试参加高考就拿到了不错的成绩，其中语文分数是包括高三的top5%。高三高考语文却因作文跑题不及格，报考南开一分之差落榜，选择复读。这一年简单快乐心无他事，一直是学校第一，小班数学老师当着全校尖子生说“刘洋是我们学校的数学权威”，这是大学以前对我评价很高也很受用的。</p>
<p>2004年，因对开发游戏有难抑制的好奇，顺理成章考到北大计算机系。考入后高中班主任李老师才告诉我，他做主隐瞒了后来的南开扩招，我是可以去的，但我应该念北大清华。所以李老师是我一位贵人，不是说北大比南开好多少，人生也没好坏，只有是否精彩，我人生的轨迹，有一段李老师铺的路。而后保研到图形图像实验室。在学校里曾很痛苦，后来梳理清楚了价值观，毕业时在数十个offer中放弃网易游戏等，选择网易有道。两年后因为项目被砍、招人门槛下降导致的团队质量下降等原因离开，通过朋友推荐和几个创业团队聊了不少，如春雨医生、猿题库（当时是粉笔网）、本来生活等等（都是很好的团队，现在发展也很不错）。经过长时间的慎重思考，觉得还需要再锻炼下，加入小米。</p>
<p>2013年初，进小米时是infra组航军、account组廷彬、messaging组长者面试的我，宝秋问我想去哪个team，我说都挺好，从兴趣是 messaging &gt; account &gt; infra（后来infra出了三个HBase Committer）。宝秋说廷彬那太缺人，先去两个月，然后调到messaging。一个月后在account上线了几个功能后，就正式加入到messaging。</p>
<p>首先是小米推送，我和启亮两个从零做起，后来辅光等同事加入，做到千万量级时雷总才重视起来，第一次在会议桌上和他相对，他还风趣的说我“挺年轻的嘛”，哈哈，是消息组其他70后们的对比导致的，后来业务量越来越大，到目前已然是和百度推送、个推齐名的云服务，有过亿同时在线。</p>
<p>推送业务稳定后，长者调动我和其他几位同事开始开发OMS（小米开放消息系统），在这之前我有机会先启动了一个高并发Java基础框架的研发，目的是取代越来越难维护的Erlang。我给这个框架取名MAMPA。大约2个月的时间憋出的大招，经过在OMS、米聊、米推、米信、micloud等业务的洗礼和同事的协助review、改进，成为我觉得做过最有意思的项目，也注入了大量的心思和思考，从架构和性能、整体和细节多个方面做了极致的优化改进。这个过程长者给我足够的信任和支持，所以长者也是我的一位贵人，带我敲开亿万并发的大门，后来负责米聊、米推等业务的消息系统的改造优化都轻轻松松。</p>
<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/startup4.jpg" alt="startup"></p>
<p>我也是一个不甘平淡的人，总觉得年轻人应该是江河中激流，汇入一片湖泊后的平静会让内心反不平静，接连的挑战才是填补空虚的良药。</p>
<p>2015年3月开始恰好陆续有朋友推荐创业机会，有人人贷、洋葱/刻桌、木仓科技等。这段时间倒是挺折腾长者的，最后确定了选择送姜，长者说“你心里长草了，留也留不住”。工作汇总后，由五位同事交接，留了一个月的交接时间。自此开启完全不一样的生涯，以送姜联合创始人/CTO的身份开始创业。</p>
<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/startup8.jpg" alt="startup"></p>
<h1 id="选择">选择</h1><p>不同创业团队有着自身独有的优势和短板，选择是一个双向各取所需的过程。比如刻桌团队成员大都是有道同team的同事，一起做过项目，背景也比较相近，认知、思考方式、工作习惯等都比较相似。但因考虑到两个方面：1. 房贷和半岁的女儿会有一定的经济压力；2. 匿名社交的方向我不太认可，觉得是昙花一现，没选择去刻桌。不过回头看看，团队的确是最重要的，他们从洋葱、刻桌，到非礼，到玩具超人，方向在摸索，但核心团队一直在。现在玩具超人这个方向我挺看好，如果能做好线下和物流会有不错的发展，我本身就在用户群体里。</p>
<p>木仓科技做与车相关的领域，驾考宝典等APP用户量很不错，CTO李佳文也是有道同事，在Google做了几年后出来创业，给我的position是后端负责人。这是个不缺钱的行业，一开始意向基本达成。但后来见到CEO，印象不是太好，一个企业的CEO是这个企业的DNA。也恰好认识有从木仓出来过的朋友，对其有微词；另外股权方面对我也不是太有吸引力，所以最后就放弃了。</p>
<p>后来选择送姜，是基于很简单的考虑：</p>
<ol>
<li>互补，团队中其他人的能力尤其是CEO与我要很互补，他们能做的事情我做不到；</li>
<li>方向，初期的业务方向我比较认可，后续有介绍；</li>
<li>比重，既然要出来创业，就把赌注筹码加大一点，堵个自己占比重大的，如果做好了收益更大，当然也风险更大。</li>
</ol>
<h1 id="结识与信任">结识与信任</h1><p>俊杰通过微信联系到我，尴尬的是怎么也找不到是谁介绍的了。一起吃了几顿饭，其中有一次请了一个所谓的清华的顾问“考”我，那哥们完全不入行，这里不多做评价，权且认为是术业有专攻吧。前面说到互补，这几顿饭下来我对送姜创始团队印象很好，也是因为他们有着足够的表达力让我相信这是个不错的项目和团队——这表达力我比较欠缺，不就是一种能力互补。</p>
<p>项目方向上，当时是致力于做送姜钱包：救急不救穷，做大学生身边的及时雨。学生没有固定收入来源，生活费分配不均时可能会缺钱花，送姜提供千元信用额度，本月消费下月还款就行。考虑到学生的还款能力：只提供千元额度，并且消费有限额，不做大件分期产品。对商家来说，帮他们做宣传推广，做服务标准化，做线上支付，免去了找零、记账等多种麻烦工序。对这个方向我很认可。</p>
<p>团队上，CEO有着学友卡的经验，能来事，对整合资源、搞定人很有一手，中青老年男女通吃，这些都是我不具备的；5月2日在清华科技园国际会议中心举办了中国青年高校领袖峰会，我在现场，充分见证了团队的执行力。</p>
<p>本着初步建立的认可并聊得投机，股份并没严格坚持自己开始时要求的，只留了底限，和CEO说，“我们一起做事，既然选择了团队，就是相信你相信团队，做不成多少股权都是白纸，做好了也相信你不会亏待我。” 。这点我认可自己的做法，要么不合作，要么就充分信任，只要不突破自己的底限，许多东西可以容忍，也是对当初的选择负责任。</p>
<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/startup5.jpg" alt="startup"></p>
<h1 id="接手">接手</h1><p>我来之前，送姜联合创始人都非理工科出身，更别说懂产品和技术了。之前的产品是外包做的，易创互联谢文团队，据说名声很差，把他们坑个不行。俊杰后来和我说对我加入的感激，因为之前已经到了濒临崩溃的地步。</p>
<p>接收后我看了代码，从UI到接口协议设计到服务架构都很粗劣，于是制定了重构计划，包括技术选型、任务划分、进度规划、工作流程和模式规范化等等。比如，搭建phabricator做文档管理、code review等，用teambition做任务分配及bug管理（后迁回到phabricator上），搭建nexus做maven私服，搭建git管理代码及产品分支，用modao画原型图，用samba做内部文件共享，等等。同时，给出了产品研发部的代码规范、迭代流程等。</p>
<p>这是我创业的第一个教训。</p>
<ol>
<li>“空降”管理人员火烧得太猛，导致必然的反抗；</li>
<li>不因地制宜考虑产品研发团队的水平，以自己在有道和小米的模式、标准、强度来要求送姜的员工，是不可能的事情；</li>
<li>“微管理”，事无巨细，把架构搭建、协议设计、code-review等本是同级同事一起做的事情以一个管理人员的身份强行推动，导致本意和员工的理解产生了严重分歧：我以同事的角度对编码风格提review意见，他们会理解为领导在诸如代码命名、缩进等如此细微处的强势；</li>
<li>未能在CEO对进度的要求和员工能力之间做好平衡。</li>
</ol>
<h1 id="改变">改变</h1><p>大动作的推动我带来的东西、以及没平衡好工作进度，导致的结果可想而知，团队成员陆续离职。这是我比较难的一段时间。当然，回顾往事的时候会发现，觉得难的时间也是收获比较多，成长比较快的时间。在公司运营、团队管理、产品迭代等方面，这段时间也有不少的思考，开始逐渐形成自己的观念和方法论。</p>
<p>一边在梳理产品的方向和版本迭代规划；一边在搭建代码框架并实现主要业务逻辑；一边在尽可能招到合适的人选；一边也在和CEO一起整理商业计划书搭线融资。之前锻炼得很棒的身体和8块腹肌，很快就消失不见了。</p>
<p>产品方向上，结合公司大战略，制定了5步迭代方案（画大饼）：</p>
<ol>
<li>钱包，信用消费、无息提现，学生身边的及时雨；</li>
<li>优惠，周边店铺、线上支付，学生贴心的生活服务管家；</li>
<li>平台，在线服务、垂直聚合，整合每个垂直领域对学生有用的在线服务，一个APP即可轻松享受校园生活；</li>
<li>生态，社交关系、评价互动，让学生和商家在平台上都活跃起来；</li>
<li>现象，师兄师姐都在用，无送姜不校园。</li>
</ol>
<p>这张大饼每步迭代都有几倍的涨幅，最终达到十亿美金量级的估值——如果坚持下来认真做，也许做成不是天方夜谭。</p>
<p>Java，Android，iOS，web，测试…… 创业团队重新启动技术团队的招人真的挺难，但再难的事情，只要理论上不是不可实现，都有可能逐渐完成。</p>
<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/startup3.jpg" alt="startup"></p>
<h1 id="鼎盛">鼎盛</h1><p>部门里人员逐渐招入，但产品经理一直没有物色到合适的，所以我兼任产品负责人。幸亏我这个T字形人才的横线里也有产品的sense，这个之前有道和小米的不少同事也说到过（如果我当初毕业选的工作方向是产品经理，现在又在做什么呢）。画原型图，写接口文档，分配任务，迭代了1.6，1.8，1.8.1，2.0几个版本。有之前的教训，对员工也不是那么苛责，功能能实现，无已知bug作为底限，优化多少是多少。团队也逐渐习惯这样的工作流程，并且互相之间也比较团结融洽。</p>
<p>同时，公司也招募了在京东做过挺长时间的HR张旭，不少的产品研发部同事是张旭协作招进来的。还招了运营和市场的能手，天啸有做地推的经验，苏彤之前就创业做过公司，东君是北邮研一学生，学生价和帝都学生圈公众号运营的很出色，文杰是从滴滴挖来的运营高手，做事效率质量都值得信赖。</p>
<p>当我出来创业时，才发现亲朋好友里不少土豪，先是鄂尔多斯一个政府官员想以个人名义投资，后是一个姐夫（以下称大亮哥）能牵线对接纪源资本中国区副总裁。后来因为纪源资本行动太慢，并且要投资的额度比较高（千万美元量级，送姜计划preA融资千万人民币量级），大亮哥对接了中信体系相关的个人投资。但当时CEO已经对接上了清华控股董事长徐井宏，并且徐老师有意向投资送姜，考虑到资源方面的优势，就回绝了大亮哥，说看是不是下轮可以跟进。后来因为清华控股流程比较慢，送姜濒临死亡，我又重新对接到大亮哥，最终谈下1500万的个人投资，并先入账300万解送姜燃眉之急。所以说大亮哥是我的一个贵人。我们在此前只有一面之缘，当时我刚毕业不久，在有道，他请我和母亲吃了顿饭，当时就表示说看好我，如果我想做什么事情会支持我。仅凭这一面之缘，凭对我的认可，在完全不懂这个领域的情况下对接了1500万元资金。所以后来发生的事情，我觉得挺对不住他，虽然我能做的不多。但我有信心承诺，之后会做好做大，再来对大亮哥好好表达一下我的感激之情。</p>
<p>至此，有人、有钱，公司似乎到达了鼎盛的阶段，从之后的发展看，的确是鼎盛…… 只是当时挤在文津国际公寓1515这样的商用住宅里，没有鼎盛的感觉，员工开始抱怨拥挤不堪，搬家势在必行。</p>
<h1 id="搬家">搬家</h1><p>租下了清华科技园创业大厦3层的500平，并设计新办公空间整体规划、座位排布、去郊区厂子定做桌椅隔断等，随后买活性炭口罩给员工。整体白色+草绿色风格，还蛮有感觉的。回到了老东家网易有道的楼上，有次上楼梯还遇到CEO周枫寒暄了一阵。</p>
<p>但新环境没有新气象，资本寒冬的到来也让很多O2O创业团队淡出人们视线。</p>
<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/startup7.jpg" alt="startup"></p>
<h1 id="分歧">分歧</h1><p>从一开始，我和CEO、COO等在一些事情的看法和做法上是存在着分歧的，但本着求同存异的原则，只要不触及底限，我在有限的条件下把事情尽可能做好。随着时间的推移，分歧是越来越大的，顾全大局，我一直在忍让，甚至所谓的”底限“也在逐渐放松，在这几个月里，我收敛隐藏了太多。</p>
<h2 id="1-_管理">1. 管理</h2><p>一个健康积极的团队，其实不用怎么谈管理的，因为团队每个成员都有主人公态度，精力都放在做具体事务上，团队的Lead应该是指方向和服务的角色，鼓励员工发挥主观能动性，创造更大的价值，并在适当的时机给予合适的奖惩，推动团队和项目良性发展。</p>
<p>差的团队管理者则以领导自居，觉得我是领导我比你高等，颐指气使、横加指责，无计划、无原则、想一出是一出，让员工没有任何安全感，且不尊重员工的劳动成果，不尊总员工的意见，每一点都会打消员工的积极性。</p>
<p>在产品研发部我推行的弹性工作制、绩效考核等激励机制，也寸步难行，最终被取消。</p>
<p>有次CEO说“取消双休是因为钱没到账，对整体公司进程把控，整体企业各部位没有跟上节奏，下周末开始会裁员”。先不说懂不懂加班与否对效率的影响，双休是之前定的，其它类似这种出尔反尔的事情，不少人跟我反应过了。别说我总是站在CTO或者产品研发部门领导的角度考虑而未从公司副总裁的角度考虑，只不过我考虑的你没懂。无法立信，何谈立业，怎么让人踏实跟你干。</p>
<p>归结起来，以人为本。团队是核心，可太多的人只是拿来当口号博投资人的眼球、拉拢更多的人跟自己干，但没认真的想过人这个字，没有给予最基本的尊重，人你拉的来，能不能带的住。</p>
<h2 id="2-_方向">2. 方向</h2><p>在这个“大众创业，万众创新”成为国策的时代，创业逐渐变成一个成本很低的事情，创业的人也逐渐分化为两个阵营：</p>
<p>一是心里有个想法，想做好一件事情，改变一个现状，让世界或温暖一点，或美好一点，或感性一点，或干净一点；<br>二是大家都在谈创业我也要创业，为了创业而创业，也许想趁着大潮能捞一笔，也许能搏一把成大富豪，也许进入一个新的领域成名，再不济能认识不少以前接触不到的人……</p>
<p>太多的人是第二种。所以，对要做的事情不坚定，做不成再换方向，做不成再换……</p>
<p>由于战略方向的不定，甚至会直接决定了公司性质的不同：</p>
<h2 id="3-_性质">3. 性质</h2><p>我刚来时他们都说，送姜团队不错，执行力很强，但只是个装甲车；你来了组建产品研发部，就相当于装甲车装上炮筒成为坦克，将无坚不摧无往不胜。看吧，这也是他们在“说”上的本事。事实上，给产品研发部的预算招不到很优秀的人才。</p>
<p>更囧的是，青领会期间，公司行政人事调集到青领会的筹备上，根本无人手负责招聘事宜。</p>
<p>随着运营、BD等有不错的同事加入，公司的性质逐渐从名称中标榜“科技公司”的地推公司转型到运营公司、公关公司、媒体公司，或许，从来就不是科技公司，基本一个企业的DNA是CEO决定的，尤其是非常强势的CEO。</p>
<h2 id="4-_本末">4. 本末</h2><p>公司战略的不明，产品方向的多变，人员配置的不合理，导致公司里有一些后来想想挺滑稽的事情，甚至我本人在当时也会参与其中。</p>
<p>每个人都知道小米的七字诀“专注、极致、口碑、快”，但专注一词又有几人做得到。梁山学院就是一例，甚至在没有理解什么是管培生的情况下就做管培生机制，公司规模就这点，让市场和研发串岗培训有什么意思？只是分散真正愿意干活的人的精力。</p>
<p>整个过程没有多少时间聚焦在产品的研发上，无论资源还是人力支持上。</p>
<h2 id="5-_牛皮">5. 牛皮</h2><p>吹牛皮不上税，说这个公司怎么怎么不行，那个团队怎么怎么差劲，而别人在用心做事，展示出来的只是真实情况的一个片面，而我们过度的包装，包得里三层外三层，公关能力绝顶，可华丽光鲜的表面之下是虚无。</p>
<p>战略调整后砍掉了原送姜校园产品，做VIP，我不甘心，挤时间把2.0优化了做出来并上线，换来的只有一个微信表情。而后为了让投资人看，把2.0做改版，把VIP里的内容往2.0里拿。对App的上线提这样那样的需求，要拍录像给辽宁某电视台，要演示给投资人……</p>
<p>太多的表面文章，一个谎去圆另一个谎。</p>
<p>所有的这些，我都在退让，逐渐发现，我已经找不到我的底限是什么。</p>
<h1 id="裁员">裁员</h1><p>CEO召开全员大会，宣布公司已无钱发工资，员工有两个选择，一是签字三个月不拿工资，二是找行政领工资走人。对此我完全保持沉默。产品研发部的员工留了下来，其他部门走了大半。而后部门里两位因为实在无法接受没钱无法回家过年，只好请辞，最基本功能成员缺失，其他成员也没有勉强留下的必要了。</p>
<p>裁员后搬家到创业大街飞马旅，清河科技园创业大厦我们精心做的规划和人肉除甲醛后转租，恭喜下家了。</p>
<p>摘一下部分员工（不只是产品研发部）的话：</p>
<p>zhangjun:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">哎。别的都不说了。来送姜近3个月的时间，其实工作的特别压抑，心也特别累，但还好有你，总感觉有你在，再累，再气我也还好，可以坚持一下。你一直是我这段时间的精神支柱，这些日子我会铭记在心的，感谢洋哥在这段时间的陪伴与鼓励。</span><br></pre></td></tr></table></figure></p>
<p>zhonghua：<br><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">部门领导给买的书，本想着请他在书上留下些只言片语，或是勉励的话语，或是一些其他的赠言<span class="regexp">/.只是没想到打开书的瞬间竟真的看到洋哥的字迹/</span>.我是个感性的人，这是自毕业以来第一次收到领导（洋哥）送的书，所以会格外的珍惜....我相信，这不仅仅是希望团队一起成长，更是对我们以后无论身在何处的一种祝愿吧/.谢谢你，洋哥。</span><br></pre></td></tr></table></figure></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">洋哥，我想了很长时间，决定还是离开，不只是因为工资得问题，还有就是搬家后距离有点远，时间成本太高，我工资本来就不多，未来的一段时间能不能照常发还是未知。别说生活不能保障，春节回家我总不能空手回去，而且我个人也有难处。只是没有明说…也不方便明说…这个时候了找工作基本上也找不到了。我就拿着这不到两个月得工资，万八块钱得打算回家了。明年再回来。希望洋哥能跟领导说说，也别为难我一个女生了。我觉得我这点工资还是发的出来的…另外洋哥，我也很感激您得知遇之恩，如果不是因为这件事，我肯定会跟着您一起学经验。只是天时地利人和一样都不具备。我也没有办法了…希望洋哥不要怪罪才好…</span><br></pre></td></tr></table></figure>
<p>wenna:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">洋哥，我走啦。很高兴认识你，也得到你一路的帮助。你是我见过的最帅气和nice的CTO啦^^嘿嘿，也许有一天我也会敲开产品世界的大门哦，希望还能有机会得和得到洋哥的指点。人生长远，相遇是缘分，祝以后一切顺利洋哥❤️</span><br></pre></td></tr></table></figure></p>
<p>文娜来公司很早，工作一直很负责。即使在离职后，还在帮忙处理用户反馈。。。</p>
<p>zhangxu:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">我要走了，文杰和我聊天时说很佩服你，如果有人背地里这样夸我，我肯定感到倍儿满足。</span><br></pre></td></tr></table></figure></p>
<p>我并没有想让谁背后夸我或说佩服我，我用心做好该做的事情，用心对待身边的每一个人。</p>
<p>我要对所有不是因为自己问题而离开公司的员工说声抱歉。</p>
<h1 id="蛰伏">蛰伏</h1><p>搬到创业大街，CEO将这段时间比喻为冬眠的蛇。</p>
<p>我理解他的压力，在互联网金融无法大量砸钱、O2O行情大变、资本市场寒冬、主要消费阶层转移等大环境的影响下，方向变化之下裁减人员削减开支蛰伏过冬，春后再战的思路我也认同。</p>
<p>剩下的人也有比较强的向心力，希望送姜来年会有好的重新起步和发展。</p>
<p>这段时间也会思考，有时候有些决策是有不得以的出发点，只不过不同的人看到的角度不一样。</p>
<p>虽然我与他们做事方式、理念有诸多分歧，但他们都是很好的人，对我很好，我们情如兄弟。</p>
<p>每个人在当下在做的事情中都有不同的诉求，我也会尽己所能帮助兄弟们达成愿望。</p>
<h1 id="结语">结语</h1><p>之初的预期，更能反衬现状。<br>预期年底产品研发部有几十号员工，预期产品有百万用户，预期跟进A轮……<br>选择就有放弃，放弃了之前的不少东西，带着梦想和热情，带着家人好友的期望。</p>
<p>你们玩过家家，我陪着贡献青春年华。<br>为何我还在，因为当初的选择，我尽可能坚持，对自己的选择负责。<br>大亮哥对接的资金，我还没能给个交代。<br>我们称兄道弟，兄弟玩坏了我也不能弃之而去。<br>直到，我们一起寻找到解决方案吧。</p>
<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/startup9.jpg" alt="startup"></p>
<p>这个过程中，教训之余我也有不少收获。我会更坚定自己原本的一些看法，对管理，对产品，对价值，对对错。</p>
<p>所以之后，我不会迁就，不将就。</p>
<p>以人为本，不忘初心，方可久远，方得始终。</p>
<p>能力越大，责任就越大。对自己言行和未来负责，对家人安康幸福负责，对送姜因缘走到一起的兄弟负责，对自己梦想涉及到的群体负责。</p>
<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/startup2.jpg" alt="startup"></p>
<p>无善无恶心之体，有善有恶意之动。知善知恶是良知，为善去恶是格物。</p>
<p>致良知，知行合一，在事上练。</p>
<p>加快我发挥光热的速度和力量。</p>
<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/startup6.jpg" alt="startup"></p>
<p><em>|注：本文为博主个人阶段感悟，请勿转载传播|</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/startup1.jpg" alt="startup"><br><em>|注：本文为博主个人阶段感悟，请勿转载传播|</em></p>
<h1 id="引子">引子</h1><p]]>
    </summary>
    
      <category term="CEO" scheme="http://lyso.me/tags/CEO/"/>
    
      <category term="CTO" scheme="http://lyso.me/tags/CTO/"/>
    
      <category term="产品" scheme="http://lyso.me/tags/%E4%BA%A7%E5%93%81/"/>
    
      <category term="信任" scheme="http://lyso.me/tags/%E4%BF%A1%E4%BB%BB/"/>
    
      <category term="兄弟" scheme="http://lyso.me/tags/%E5%85%84%E5%BC%9F/"/>
    
      <category term="创业" scheme="http://lyso.me/tags/%E5%88%9B%E4%B8%9A/"/>
    
      <category term="团队" scheme="http://lyso.me/tags/%E5%9B%A2%E9%98%9F/"/>
    
      <category term="方向" scheme="http://lyso.me/tags/%E6%96%B9%E5%90%91/"/>
    
      <category term="管理" scheme="http://lyso.me/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="送姜" scheme="http://lyso.me/tags/%E9%80%81%E5%A7%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[图文排版：应该用什么样尺寸的图片？]]></title>
    <link href="http://lyso.me/2015/11/12/resolution/"/>
    <id>http://lyso.me/2015/11/12/resolution/</id>
    <published>2015-11-12T10:44:12.000Z</published>
    <updated>2015-11-12T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/resolution.jpg" alt="resolution"></p>
<h1 id="引子">引子</h1><p>新送姜以轻奢新主义为导向打造校园高品质生活，通过精心编辑精美排版的图文体验将优质内容展现给用户。为了让内容展现得淋漓尽致，图像清晰度一定要到位，否则再好的内容和文案也传达不到位，爱美之心人皆有之。但流量毕竟不是免费的，即使按包月算耗流量也会导致耗电耗时间，那多么“清晰”的图像才满足需求并且不会导致过多的流量耗费呢？我们需要从图像的构成说起。</p>
<h1 id="世界是离散的">世界是离散的</h1><p>是的，绝对的连续只在数学中存在。在自然界中，任何事物的构成单位都是离散的，你，我，一叶一菩提，一花一世界，包括光线，包括意识，都是由离散的物质构成的。在计算机的世界更甚，所有事物都是由比特构成，不可再分，没有半比特。图片（Image）是指由图形、图像等构成的平面媒体，或说用点、线、符号、文字和数字等描绘事物几何特征、形态、位置及大小的一种形式。随。在计算机术语上，图像可以分为点阵图和矢量图两大类，但真正的矢量图只是一个数学公式，一旦这个公式被表达，被人所见，就是离散的了。就像薛定谔的猫一旦被观察，就要么死要么活着。</p>
<h1 id="什么是像素、pixel、ppi、dpi、分辨率">什么是像素、pixel、ppi、dpi、分辨率</h1><h2 id="像素/pixel">像素/pixel</h2><p>计算机中的数据以比特为基本单位，那图像则以像素为基本单位。<br>像素，又称画素，为图像显示的基本单位，译自英文“pixel”，pix是英语单词picture的常用简写，加上英语单词“元素”element，就得到pixel，故“像素”表示“图像元素”之意，有时亦被称为pel(picture element)。每个这样的信息元素不是一个点或者一个方块，而是一个抽象的采样。仔细处理的话，一幅图像中的像素可以在任何尺度上看起来都不像分离的点或者方块;但是在很多情况下，它们采用点或者方块显示。每个像素可有各自的颜色值，可采三原色显示，因而又分成红、绿、蓝三种子像素(RGB色域)，或者青、品红、黄和黑(CMYK色域，印刷行业以及打印机中常见)。照片是一个个采样点的集合，故而单位面积内的像素越多代表分辨率越高，所显示的图像就会接近于真实物体。<br>简而言之，图像就是以一个一个矩阵排列的像素组成的。</p>
<h2 id="分辨率/ppi/dpi">分辨率/ppi/dpi</h2><p>分辨率这个词随着数码产品等的日益流行和平民化，衍生出两个意思：一指大小，图片的整体像素排布个数，二指解析度，也就是每个单位尺寸里能放多少像素。第一种用法举例“这张图分辨率多少？”“你的屏幕分辨率多少？”，1920x1080是指图像或屏幕是由纵向1080个、横向1920个像素组成的矩阵，共207.36万，一般说200万像素指的这种分辨率规格（当然也可以是其它长宽比，如1600x1200等）。第二种用法就是ppi（pixel per inch，每英寸像素数）/dpi（dot per inch，每英寸点数）的概念，例如300ppi指的是每英寸有300像素，iPhone 3G的屏幕分辨率是163ppi，iPhone 4/5/6的屏幕分辨率是326ppi，iPhone 6 plus的分辨率是401ppi。一般dpi用于实际物理输出时的计量，比如打印机300dpi指的是每英寸300个点，在非专业表述时这两个单位经常混用了。</p>
<h1 id="视网膜屏幕：人眼极限？">视网膜屏幕：人眼极限？</h1><p>视网膜（Retina）屏幕是苹果公司在部分移动产品使用的一种显示技术。第一次被人们熟知，是苹果将其用在iphone 4手机上，它将960×640的分辨率压缩到一个3.5英寸的显示屏内。也就是说，该屏幕的像素密度达到326像素/英寸（ppi）史蒂夫·乔布斯（Steve Jobs）在iPhone 4发布会上介绍视网膜技术时是这样阐述的：“当你所拿的东西距离你10-12英寸（约25-30厘米）时，它的分辨率只要达到300ppi这个“神奇数字”（每英寸300个像素点）以上，你的视网膜就无法分辨出像素点了。”这也就是苹果对“视网膜屏幕”的最初定义。<br>由于视网膜屏幕具备超高像素密度的液晶屏，近乎接近人眼视网膜所能分辨的能力，因此屏幕显示异常清晰、锐利，就算放眼睛近处也看不到屏幕中的颗粒。所以当每英寸屏幕上的像素超过300个（人眼的临界点），人眼的视网膜就无法分辨出像素与像素之间的间隙（颗粒感），当你在正常距离观看屏幕的时候，屏幕就犹如纸质版细腻。<br>其实严格说来，视网膜（Retina Display）甚至都算不上一种技术，而只是一个针对消费者的营销术语。它向用户展示了一种全新的显示方法，带给用户视觉上前所未有的极致体验。</p>
<h1 id="用什么样的尺寸？">用什么样的尺寸？</h1><p>那么用什么样的尺寸合适呢？在产品所要适配的分辨率最高的屏幕上仍然保持人眼无法感知颗粒的精细度即可。的那么不失一般性，以iphone最大屏幕举例，iPhone 6 plus / 6S plus（以下简称6p）在苹果官网的规格是：<br>具备 3D Touch 技术的 Retina HD 显示屏，5.5 英寸 (对角线) LED 背光宽显示屏，1920x1080像素分辨率，401 ppi，1300:1 对比度 (标准)。<br>通过截屏发现，6p的分辨率是2208x1242，正好是414x736的3倍，所以6p要用@3x的素材图。但其实这样大的尺寸是浪费了的，硬件上只支持1920x1080的分辨率，对角线长2202，对应的是5.5”，正好是401ppi。那我们提供这么大尺寸的图也没更多的好处。另一方面，人眼极限约300ppi，401ppi也浪费了，所以我们只需要图片尺寸宽度为1080x3/4=810。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/resolution.jpg" alt="resolution"></p>
<h1 id="引子">引子</h1><p>新送姜以轻奢新主义为导向打造校园高品质生活，通过精心编辑精]]>
    </summary>
    
      <category term="dpi" scheme="http://lyso.me/tags/dpi/"/>
    
      <category term="pixel" scheme="http://lyso.me/tags/pixel/"/>
    
      <category term="ppi" scheme="http://lyso.me/tags/ppi/"/>
    
      <category term="resolution" scheme="http://lyso.me/tags/resolution/"/>
    
      <category term="像素" scheme="http://lyso.me/tags/%E5%83%8F%E7%B4%A0/"/>
    
      <category term="分辨率" scheme="http://lyso.me/tags/%E5%88%86%E8%BE%A8%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[送姜高校校招]]></title>
    <link href="http://lyso.me/2015/11/05/songjiang-campus-recruitment/"/>
    <id>http://lyso.me/2015/11/05/songjiang-campus-recruitment/</id>
    <published>2015-11-05T10:44:12.000Z</published>
    <updated>2015-11-05T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-21.jpg" alt="songjiang.campus.recruitment"></p>
<h2 id="送姜高校校招">送姜高校校招</h2><p>这几天在人大、北航等高校进行了校招，送姜以新形象示人，从重型地面O2O转型到高逼格轻奢主义路线，广纳爱生活会玩乐的达人加入送姜。<br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-22.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-23.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-24.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-25.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-26.jpg" alt="songjiang.campus.recruitment"></p>
<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-01.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-02.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-03.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-04.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-05.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-06.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-07.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-08.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-09.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-10.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-11.jpg" alt="songjiang.campus.recruitment"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-12.jpg" alt="songjiang.campus.recruitment"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/sj.campus-21.jpg" alt="songjiang.campus.recruitment"></p>
<h2 id="送姜高校校招">送姜高校校招</h2><p>这]]>
    </summary>
    
      <category term="中关村创业大街" scheme="http://lyso.me/tags/%E4%B8%AD%E5%85%B3%E6%9D%91%E5%88%9B%E4%B8%9A%E5%A4%A7%E8%A1%97/"/>
    
      <category term="人大" scheme="http://lyso.me/tags/%E4%BA%BA%E5%A4%A7/"/>
    
      <category term="北航" scheme="http://lyso.me/tags/%E5%8C%97%E8%88%AA/"/>
    
      <category term="校招" scheme="http://lyso.me/tags/%E6%A0%A1%E6%8B%9B/"/>
    
      <category term="送姜" scheme="http://lyso.me/tags/%E9%80%81%E5%A7%9C/"/>
    
      <category term="高校" scheme="http://lyso.me/tags/%E9%AB%98%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[亿万并发的背后]]></title>
    <link href="http://lyso.me/2015/08/01/concurrency-behind-1g/"/>
    <id>http://lyso.me/2015/08/01/concurrency-behind-1g/</id>
    <published>2015-08-01T10:44:12.000Z</published>
    <updated>2015-08-01T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.001.jpeg" alt="concurrency"></p>
<h2 id="送姜技术分享会">送姜技术分享会</h2><p>在组建送姜产品研发部的过程中，举办了几期送姜技术分享会（SJTC），其中第二期我主讲，总结之前在网易有道/小米做高并发服务积累的一些经验和认知，分享内容汇总如下。</p>
<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.002.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.003.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.004.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.005.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.006.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.007.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.008.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.009.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.011.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.012.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.013.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.014.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.015.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.016.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.017.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.018.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.019.jpeg" alt="concurrency"><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.020.jpeg" alt="concurrency"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/concurrency.arch.001.jpeg" alt="concurrency"></p>
<h2 id="送姜技术分享会">送姜技术分享会</h2><p>在组建送姜产品]]>
    </summary>
    
      <category term="FSM" scheme="http://lyso.me/tags/FSM/"/>
    
      <category term="actor模型" scheme="http://lyso.me/tags/actor%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="erlang" scheme="http://lyso.me/tags/erlang/"/>
    
      <category term="java内存模型" scheme="http://lyso.me/tags/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="java线程模型" scheme="http://lyso.me/tags/java%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="并发" scheme="http://lyso.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="开源" scheme="http://lyso.me/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="异步" scheme="http://lyso.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="有限状态机" scheme="http://lyso.me/tags/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[生命的感触]]></title>
    <link href="http://lyso.me/2015/07/01/about-life/"/>
    <id>http://lyso.me/2015/07/01/about-life/</id>
    <published>2015-07-01T10:44:12.000Z</published>
    <updated>2014-07-10T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/a1.jpg" alt="life"></p>
<h1 id="生命的感触">生命的感触</h1><blockquote>
<p>团队出去team-building两天整个过程都很开心。回来的路上才知道，CEO至亲之人离世了。他没告诉团队，让团队按计划出行游玩。虽未见过阿姨，我满心难过，也心疼这位兄弟，有此感触。</p>
</blockquote>
<p>一路望向窗外，</p>
<p>每片树叶，</p>
<p>每株小草，</p>
<p>每条小道，</p>
<p>每座桥梁，</p>
<p>每栋房舍，</p>
<p>每陇田地，</p>
<p>每条溪流，</p>
<p>每座山川⋯⋯</p>
<p>都不是简单仓促一蹴而就，</p>
<p>背后有其默无声息无人所知不图回报的精耕细作。</p>
<p>这些自然的创作者，</p>
<p>也许没有什么伟大的改变世界的梦想，</p>
<p>甚至不知道为什么要改变世界，</p>
<p>甚至连什么是梦想，为什么有梦想都不知道。</p>
<p>但是他们知道要做好眼前的事情，</p>
<p>要过好当下的生活，</p>
<p>要增加田野里的收成，</p>
<p>要让身边的人过得好一点，比昨天好一点。</p>
<p>他们不知道，</p>
<p>他们的点点滴滴，细细微微，</p>
<p>无人可知，无忆可追，</p>
<p>却是改变这个世界的基本元素。</p>
<p>这些元素如此渺小，</p>
<p>如果我未在回京车上望向车外，</p>
<p>永远无从知晓，</p>
<p>如同几十亿平凡的人的每一个动作每一个表情，</p>
<p>散布在这个星球上。</p>
<p>而我们的一生涓滴汇聚的几十年生命之河，</p>
<p>在人类文明史上又是多么微不足道，</p>
<p>如同人类历史在生命进化史中，</p>
<p>如同生命史在地球历史中，</p>
<p>如同地球在银河系中，</p>
<p>如同银河系在宇宙中。</p>
<p>谁又能知道，</p>
<p>宇宙之外是否还有方圆，</p>
<p>时间之外是否还有春秋。</p>
<p>存在着，</p>
<p>渺小着，</p>
<p>但渺小不是虚无，</p>
<p>意念所至的所有，</p>
<p>皆为渺小所组成，</p>
<p>都是渺小所演化。</p>
<p>存在着，</p>
<p>伟大着。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7jprdp.com1.z0.glb.clouddn.com/a1.jpg" alt="life"></p>
<h1 id="生命的感触">生命的感触</h1><blockquote>
<p>团队出去team-building两天整个过程都]]>
    </summary>
    
      <category term="人生" scheme="http://lyso.me/tags/%E4%BA%BA%E7%94%9F/"/>
    
      <category term="当下" scheme="http://lyso.me/tags/%E5%BD%93%E4%B8%8B/"/>
    
      <category term="梦想" scheme="http://lyso.me/tags/%E6%A2%A6%E6%83%B3/"/>
    
      <category term="河流" scheme="http://lyso.me/tags/%E6%B2%B3%E6%B5%81/"/>
    
      <category term="渺小" scheme="http://lyso.me/tags/%E6%B8%BA%E5%B0%8F/"/>
    
      <category term="生命" scheme="http://lyso.me/tags/%E7%94%9F%E5%91%BD/"/>
    
      <category term="生活" scheme="http://lyso.me/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[内部信：致产品研发部的小伙伴们]]></title>
    <link href="http://lyso.me/2015/05/14/product-dept/"/>
    <id>http://lyso.me/2015/05/14/product-dept/</id>
    <published>2015-05-14T10:44:12.000Z</published>
    <updated>2015-05-15T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p>各位好，</p>
<p>很期待即将与大家共事，一起在送姜打造业界一流的产品，同时也是更重要的，把我们自己打造成一流的团队。<br>本周三开始，我将全职投入到送姜产品技术部的工作中来，7X24为大家服务，大家有任何建议和意见随时提出。</p>
<p>届时我们要做的首件要事就是讨论和制定重构方案。在此之前我们需要做好准备：</p>
<ol>
<li>公司lead层会根据市场、用户的情况等对产品有更深入全面的看法和设想，这些会融入到新的产品设计和技术方案中；</li>
<li>我会带来一些框架和组件上的浅薄经验，提出来大家一起讨论；</li>
<li>各位根据现有业务逻辑， 对各自的部分给出重构的方案及建议；</li>
<li>重构与对现有代码/服务的维护工作分工及时间比例划分。</li>
</ol>
<p>以下是我们将推行的一部分约定和措施，</p>
<h2 id="【团队文化基础】">【团队文化基础】</h2><p>我们是梁山好汉，有一份共同的事业理想，我们共事的基础是相互 信任。<br>我们期望更多聪明能干的牛人加入，但 正直、尽责、合作的品格是考量评估是否适合这个团队的首要因素。<br>我们公司成员都是80后、90后，处于技术、能力、想法快速成长的时期， 进步、互助也将是公司对大家考量评估的重要方面，鼓励大家互相帮助，和公司一起、和其他同事共同成长。</p>
<h2 id="【技术改变生活】">【技术改变生活】</h2><p>作为技术人员，我们相信 Technology liberate individuals，用自己的天赋、能力、付出，通过公司提供的平台，逐步改善人们的生活品质。<br>我们把自己看作研发（ R&amp;D，Research &amp; Development），不只是Developer。鼓励大家有自己的想法，思考每个问题、每个技术背后的原因，勇于尝试用新的技术解决问题。</p>
<h2 id="【效率&amp;质量】">【效率&amp;质量】</h2><p>提倡各位同事爱惜自己，包括身体、头脑、时间、能力等，不把精力毫无节制的浪费在重复的工作上，经常思考如何将重复的、手工的工作 工具化、自动化、智能化，并付诸实施。珍爱绳命最高效的方法就是 高效。<br>希望大家有追求极致、做到最好的情结。从设计、实现、测试到部署，都有高度的主人翁态度来把关质量，让问题在最早的时间被发现和消灭。我们也会逐渐建立起审查等流程来通过制度提高工作成果的 质量。</p>
<h2 id="【SJTC】">【SJTC】</h2><p>公司将组建送姜技术分享会，每两周一次，会议形式是一个人来主讲，然后较多比例的时间大家在会议主题相关的范围展开讨论。会议内容大致安排是，初期阶段由我来主讲两次，后续请同行或朋友来主讲，会议主题可以由大家来提出。之后团队中每位同事都要准备一次分享，鼓励大家踊跃报名主讲。</p>
<h2 id="【送姜图书馆】">【送姜图书馆】</h2><p>公司将筹办内部图书馆，并制定一套方便的借阅规则，让每一位小伙伴都可以在工作之余有尽可能多的便利资源 提升自己。大家可以提交自己期望读的书单，公司优先提供需求较多的书籍。鼓励大家推荐自己喜欢的书给图书馆长，让其他同事也能从中学习成长。</p>
<h2 id="【送姜点子库】">【送姜点子库】</h2><p>公司和产品属于每一位员工。鼓励大家对公司产品提出各种各样的新鲜idea，并从生活中收集潜在用户的想法加入到点子库中。每个员工可以对点子库中的点子评分。我们会定期组织brain storming，将点子库中人气较高的点子拿出来，讨论其可行性及方案，最终落实到产品中。</p>
<h2 id="【送姜技术库】">【送姜技术库】</h2><p>鼓励大家积极推动和参与到技术的积累沉淀中，将比较通用的功能组件开发成 基础类库或工具，这将是公司的财富，在这过程中的技能提升也将是自身的财富。</p>
<h2 id="【团队建设】">【团队建设】</h2><p>我们每个月都有一定量的经费做 Team Building，Bui的方式是团队成员轮流组织，形式可以多种多样，不损害公司形象、不影响社会安定即可。</p>
<h2 id="【出勤】">【出勤】</h2><p>推行 弹性工作制。统一上班时间是公司作为一个集体的必然制度，否则每位同事的出勤时间都飘忽不定，会影响其他同事沟通的效率和积极性。但用严格约束限定技术人员的工作时间具有其不合理性，可能会导致效率的低下。员工可以根据交通/家庭/工作量等情况合理安排出勤时间，建议范围是 [9:00-10:00上班，6:00-8:00下班]，若有突发情况须提前告知相关同事并安排好工作进度。<br>我们是一家朝气蓬勃的创业公司，每位同事的每段工作时间都是为公司的未来发展铺路建基，公司尊重和信任每一位同事，感激每一位同事的付出和辛劳，大家现在所做的一点一滴都会在未来放大，促进和影响公司的成长壮大。现在公司以能拥有大家这样一群敢上梁山的热血青年而感动，我们要努力做到以后让自己为曾为送姜的发展添砖加瓦而感动。</p>
<h2 id="【工作方式】">【工作方式】</h2><p>我们推行自上而下的设计、自下而上的实现。<br>开发流程上，我们将产品目标划分为milestone，再细化为task和子task，每位同事领取task，结合自己的方法方式逐个完成。<br>我们实行每天上午10:00开5分钟 站立会议，同步进度和问题。</p>
<h2 id="【工作方法论】">【工作方法论】</h2><p>团队是公司的第一财富，各位同事要爱惜自己的身体。建议每位同事都找到合适自己的工作方法，劳逸结合。推荐类似番茄工作法的方式，把自己当天要做的Job划分成Task，每45分钟工作、5分钟短休息，3轮后长休息。休息期间建议起身活动、喝水、做运动，以不影响其他同事的工作、不损坏公物为度。<br>若有同事尤其喜欢安静地工作不被打扰，可以声明自己的“免打扰时间段”，在这时间段内除非线上故障等紧急问题不允许其他人打扰。</p>
<h2 id="【编码规范】">【编码规范】</h2><p>另附。</p>
<h2 id="【代码审查机制】">【代码审查机制】</h2><p>另附。</p>
<h2 id="【内部工具集】">【内部工具集】</h2><p>另附。</p>
<p>加油，做让自己感动的事！</p>
<p>—刘洋</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>各位好，</p>
<p>很期待即将与大家共事，一起在送姜打造业界一流的产品，同时也是更重要的，把我们自己打造成一流的团队。<br>本周三开始，我将全职投入到送姜产品技术部的工作中来，7X24为大家服务，大家有任何建议和意见随时提出。</p>
<p>届时我们要做的首件要事就是]]>
    </summary>
    
      <category term="产品研发部" scheme="http://lyso.me/tags/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E9%83%A8/"/>
    
      <category term="价值" scheme="http://lyso.me/tags/%E4%BB%B7%E5%80%BC/"/>
    
      <category term="团队" scheme="http://lyso.me/tags/%E5%9B%A2%E9%98%9F/"/>
    
      <category term="成长" scheme="http://lyso.me/tags/%E6%88%90%E9%95%BF/"/>
    
      <category term="技术" scheme="http://lyso.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="效率" scheme="http://lyso.me/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="文化" scheme="http://lyso.me/tags/%E6%96%87%E5%8C%96/"/>
    
      <category term="认可" scheme="http://lyso.me/tags/%E8%AE%A4%E5%8F%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[小豆芽表情九连拍]]></title>
    <link href="http://lyso.me/2015/01/02/douya/"/>
    <id>http://lyso.me/2015/01/02/douya/</id>
    <published>2015-01-02T04:44:12.000Z</published>
    <updated>2015-01-03T04:44:12.000Z</updated>
    <content type="html"><![CDATA[<h4 id="今天天气不错啊，想想我也出生快5天了，是不是留点什么纪念给未来的我看呀？">今天天气不错啊，想想我也出生快5天了，是不是留点什么纪念给未来的我看呀？</h4><p><img src="http://lyso.qiniudn.com/douya1.jpg" height="400"></p>
<hr>

<h4 id="哎呀_A_great_idea_hit_me！不如咱来一个表情九连拍？真是个好主意！">哎呀 A great idea hit me！不如咱来一个表情九连拍？真是个好主意！</h4><p><img src="http://lyso.qiniudn.com/douya2.jpg" height="400"></p>
<hr>

<h4 id="笑什么笑？说你呢！不相信我会摆表情啊？今天给你见见世面">笑什么笑？说你呢！不相信我会摆表情啊？今天给你见见世面</h4><p><img src="http://lyso.qiniudn.com/douya3.jpg" height="400"></p>
<hr>

<h4 id="等等，等等……我想一下，摆个什么表情好看呢？">等等，等等……我想一下，摆个什么表情好看呢？</h4><p><img src="http://lyso.qiniudn.com/douya4.jpg" height="400"></p>
<hr>

<h4 id="小酒窝/长睫毛/迷人的无可救药/我放慢了步调/感觉像是喝醉了">小酒窝/长睫毛/迷人的无可救药/我放慢了步调/感觉像是喝醉了</h4><p><img src="http://lyso.qiniudn.com/douya5.jpg" height="400"></p>
<hr>

<h4 id="非一般的表情控制能力不是说说就算了，看咱眯一只眼睛">非一般的表情控制能力不是说说就算了，看咱眯一只眼睛</h4><p><img src="http://lyso.qiniudn.com/douya6.jpg" height="400"></p>
<hr>

<h4 id="啊呀，说到眼睛，我出生时右眼皮皮上被护士阿姨弄痛了，当时担心留下疤疤，我哭的可伤心了">啊呀，说到眼睛，我出生时右眼皮皮上被护士阿姨弄痛了，当时担心留下疤疤，我哭的可伤心了</h4><p><img src="http://lyso.qiniudn.com/douya7.jpg" height="400"></p>
<hr>

<h4 id="算了算了还是不拍了，等我完全恢复了再来">算了算了还是不拍了，等我完全恢复了再来</h4><p><img src="http://lyso.qiniudn.com/douya8.jpg" height="400"></p>
<hr>

<h4 id="喔！嘻嘻嘻，算上这一张正好九连拍了，完成任务，粉丝们下期见喔。哦对了，我叫豆芽，我的粉丝叫啥呢？豆粥？">喔！嘻嘻嘻，算上这一张正好九连拍了，完成任务，粉丝们下期见喔。哦对了，我叫豆芽，我的粉丝叫啥呢？豆粥？</h4><p><img src="http://lyso.qiniudn.com/douya9.jpg" height="400"></p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="今天天气不错啊，想想我也出生快5天了，是不是留点什么纪念给未来的我看呀？">今天天气不错啊，想想我也出生快5天了，是不是留点什么纪念给未来的我看呀？</h4><p><img src="http://lyso.qiniudn.com/douya1.jpg" heig]]>
    </summary>
    
      <category term="生命" scheme="http://lyso.me/tags/%E7%94%9F%E5%91%BD/"/>
    
      <category term="米莱" scheme="http://lyso.me/tags/%E7%B1%B3%E8%8E%B1/"/>
    
      <category term="豆芽" scheme="http://lyso.me/tags/%E8%B1%86%E8%8A%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[reactor代码浅析]]></title>
    <link href="http://lyso.me/2014/08/27/reactor/"/>
    <id>http://lyso.me/2014/08/27/reactor/</id>
    <published>2014-08-27T10:44:12.000Z</published>
    <updated>2014-08-27T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://lyso.qiniudn.com/reactor.jpg" alt=""></p>
<h2 id="简介">简介</h2><p>从<a href="http://lyso.me/2014/08/26/backpressure/" target="_blank" rel="external">Reactive-Streams</a> 的实现列表中看到了<a href="https://github.com/reactor/reactor/" target="_blank" rel="external">Reactor</a>， 但通读了其代码发现完全与reactor streams不沾边，而其做的事情与<a href="http://lyso.me/2014/02/01/mampa/" target="_blank" rel="external">MAMPA</a> 很接近，还是整理一下吧。</p>
<p>Reactor是一套在JVM上实现异步应用的框架，为Java、Groovy等JVM语言提供更便捷地搭建事件/数据驱动应用程序的底层抽象和接口，例如publish/consume事件。Reactor号称自己很快，在流行的硬件情况下，用其非阻塞Dispatcher吞吐能达到15,000,000的QPS。一个Reactor可以由多个不同的Dispatcher来实现，提交到Reactor的Task可以根据不同的配置而运行在Actor中的单个线程上/线程池中的一个线程/或LMAX Disruptor RingBuffer，如何配置可以根据业务类型来决定，比如阻塞IO操作用线程池，非阻塞快速计算用RingBuffer，等等。</p>
<h2 id="用法">用法</h2><p>可以参见其<a href="https://github.com/reactor/reactor/wiki/Usage-Guide" target="_blank" rel="external">Usage-Guide wiki</a>，简单来说，</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">// <span class="number">1.</span> 创建一个环境</span><br><span class="line">final Environment env = new Environment();</span><br><span class="line"></span><br><span class="line">// <span class="number">2.</span> 通过环境创建一个Reactor</span><br><span class="line">Reactor r = Reactors.reactor().env(env).get();</span><br><span class="line"></span><br><span class="line">// <span class="number">3.</span> 告诉Reactor如何处理事件（指定handler，即Consumer）</span><br><span class="line">reactor.on($(<span class="string">"topic"</span>), new Consumer&lt;Event&lt;Message&gt;&gt;() &#123; <span class="keyword">...</span> &#125;);</span><br><span class="line"></span><br><span class="line">// <span class="number">4.</span> 向reactor中发送消息</span><br><span class="line">Message msg = msgService.nextMessage();</span><br><span class="line">reactor.notify(<span class="string">"topic"</span>, Event.wrap(msg));</span><br></pre></td></tr></table></figure>
<p>接下来按从整体到局部、从数据源头到尾的方式，简单分析其代码架构。</p>
<h2 id="Observable/Reactor">Observable/Reactor</h2><p>Reactor的接口定义为Observable，主要提供了三种接口。</p>
<h3 id="respondsToKey">respondsToKey</h3><p>查询是否这个key在Reactor中有对应的处理</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Are there any &#123;<span class="comment">@link Registration&#125;s with &#123;@link Selector Selectors&#125; that match the given &#123;@code key&#125;.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param key</span></span><br><span class="line"> <span class="keyword">*</span>         The key to be matched by &#123;<span class="comment">@link Selector Selectors&#125;</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return &#123;@literal true&#125; if there are any matching &#123;@literal Registration&#125;s, &#123;@literal false&#125; otherwise</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">boolean respondsToKey(Object key);</span><br></pre></td></tr></table></figure>
<h3 id="on">on</h3><p>将Consumer通过Selector注册到Reactor上，如果有消息到达Reactor并在Selector中match了，会发到这个Consumer。</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Register a &#123;<span class="comment">@link reactor.function.Consumer&#125; to be triggered when a notification matches the given &#123;@link</span></span><br><span class="line"> <span class="keyword">*</span> Selector&#125;.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param sel</span></span><br><span class="line"> <span class="keyword">*</span>         The &#123;<span class="comment">@literal Selector&#125; to be used for matching</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param consumer</span></span><br><span class="line"> <span class="keyword">*</span>         The &#123;<span class="comment">@literal Consumer&#125; to be triggered</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param &lt;E&gt;</span></span><br><span class="line"> <span class="keyword">*</span>         The type of the &#123;<span class="comment">@link reactor.event.Event&#125;</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return A &#123;@link Registration&#125; object that allows the caller to interact with the given mapping</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"><span class="variable">&lt;E extends Event&lt;?&gt;</span>&gt; Registration<span class="variable">&lt;Consumer&lt;E&gt;</span>&gt; on(Selector sel, Consumer<span class="variable">&lt;E&gt;</span> consumer);</span><br></pre></td></tr></table></figure>
<h3 id="notify">notify</h3><p>notify接口有很多种，大同小异，相当于MAMPA中的tell，告诉Reactor这个事件可以进行处理了，处理完后调用参数中consumer的onComplete。</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Notify this component that an &#123;<span class="comment">@link Event&#125; is ready to be processed and &#123;@link Consumer#accept accept&#125; &#123;@code</span></span><br><span class="line"> <span class="keyword">*</span> onComplete&#125; after dispatching.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param key</span></span><br><span class="line"> <span class="keyword">*</span>         The key to be matched by &#123;<span class="comment">@link Selector Selectors&#125;</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param ev</span></span><br><span class="line"> <span class="keyword">*</span>         The &#123;<span class="comment">@literal Event&#125;</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param onComplete</span></span><br><span class="line"> <span class="keyword">*</span>         The callback &#123;<span class="comment">@link Consumer&#125;</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param &lt;E&gt;</span></span><br><span class="line"> <span class="keyword">*</span>         The type of the &#123;<span class="comment">@link Event&#125;</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return &#123;@literal this&#125;</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"><span class="variable">&lt;E extends Event&lt;?&gt;</span>&gt; Observable notify(Object key, E ev, Consumer<span class="variable">&lt;E&gt;</span> onComplete);</span><br></pre></td></tr></table></figure>
<h3 id="Reactor中的成员">Reactor中的成员</h3><p>一个Reactor中管理着如下几种成员对象。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Dispatcher                             dispatcher;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Registry&lt;Consumer<span class="preprocessor">&lt;?</span> extends Event<span class="preprocessor">&lt;?</span>&gt;&gt;&gt; consumerRegistry;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> EventRouter                            eventRouter;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Consumer&lt;Throwable&gt;                    dispatchErrorHandler;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Consumer&lt;Throwable&gt;                    uncaughtErrorHandler;</span><br></pre></td></tr></table></figure>
<ul>
<li>当外部调用<code>on</code>接口时，会将Consumer的注册信息加入到<code>consumerRegistry</code>中去</li>
<li>一个事件通过<code>notify</code>接口发送到Reactor时，Reactor通过<code>dispatcher</code>进行处理，从<code>comsuerRegistry</code>中找到响应的consumer进行处理</li>
<li>dispatcher进行分发时，需要<code>eventRouter</code>做路由</li>
<li>在事件的分发过程中如果出现异常，会调用<code>dispatchErrorHandler</code>来处理</li>
<li>在Reactor初始化时会调用<code>on</code>注册一个单独的Selector<throwable>，使用<code>uncaughtErrorHandler</code>来处理</throwable></li>
</ul>
<h2 id="Dispatcher">Dispatcher</h2><p>Dispatcher中主要是一个<code>dispatch</code>接口，负责将事件分发到对应的consumers上。</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Instruct the &#123;<span class="comment">@code Dispatcher&#125; to dispatch the &#123;@code event&#125; that has the given &#123;@code key&#125;. The &#123;@link Consumer&#125;s</span></span><br><span class="line"> <span class="keyword">*</span> that will receive the event are selected from the &#123;<span class="comment">@code consumerRegistry&#125;, and the event is routed to them using</span></span><br><span class="line"> <span class="keyword">*</span> the &#123;<span class="comment">@code eventRouter&#125;. In the event of an error during dispatching, the &#123;@code errorConsumer&#125; will be called. In</span></span><br><span class="line"> <span class="keyword">*</span> the event of successful dispatching, the &#123;<span class="comment">@code completionConsumer&#125; will be called.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param key                The key associated with the event</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param event              The event</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param consumerRegistry   The registry from which consumer's are selected</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param errorConsumer      The consumer that is invoked if dispatch fails. May be &#123;@code null&#125;</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param eventRouter        Used to route the event to the selected consumers</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param completionConsumer The consumer that is driven if dispatch succeeds May be &#123;@code null&#125;</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param &lt;E&gt;                type of the event</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@throws IllegalStateException If the &#123;@code Dispatcher&#125; is not &#123;@link Dispatcher#alive() alive&#125;</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"><span class="variable">&lt;E extends Event&lt;?&gt;</span>&gt; void dispatch(Object key,</span><br><span class="line">                                 E event,</span><br><span class="line">                                 Registry<span class="variable">&lt;Consumer&lt;? extends Event&lt;?&gt;</span>&gt;&gt; consumerRegistry,</span><br><span class="line">                                 Consumer<span class="variable">&lt;Throwable&gt;</span> errorConsumer,</span><br><span class="line">                                 EventRouter eventRouter,</span><br><span class="line">                                 Consumer<span class="variable">&lt;E&gt;</span> completionConsumer);</span><br></pre></td></tr></table></figure>
<p>在Reactor通过<code>notify</code>收到一个事件时，直接调用dispatcher的<code>dispatch</code>接口。在<code>dispatch</code>中，申请一个Task，然后提交执行：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Task</span> <span class="keyword">task</span>;</span><br><span class="line"><span class="keyword">boolean</span> isInContext = isInContext();</span><br><span class="line"><span class="keyword">if</span> (isInContext) &#123;</span><br><span class="line">    <span class="keyword">task</span> = allocateRecursiveTask();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">task</span> = allocateTask();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span>.setKey(key)</span><br><span class="line">    .setEvent(event)</span><br><span class="line">    .setConsumerRegistry(consumerRegistry)</span><br><span class="line">    .setErrorConsumer(errorConsumer)</span><br><span class="line">    .setEventRouter(eventRouter)</span><br><span class="line">    .setCompletionConsumer(completionConsumer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isInContext) &#123;</span><br><span class="line">    addToTailRecursionPile(<span class="keyword">task</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    execute(<span class="keyword">task</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至于提交执行的实现，视不同的不同的Dispatcher实现而异，Reactor中Dispatcher实现有很多种，如</p>
<ul>
<li>ActorDispatcher</li>
<li>EventLoopDispatcher</li>
<li>RingBufferDispatcher</li>
<li>NettyEventLoopDispatcher</li>
<li>ThreadPoolExecutorDispatcher</li>
<li>WorkQueueDispatcher</li>
</ul>
<p>比如RingBufferDispatcher的<code>execute</code>是直接将Task丢到实现申请好的RingBuffer的slot中：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> execute(<span class="keyword">Task</span> <span class="keyword">task</span>) &#123;</span><br><span class="line">    ringBuffer.publish(((RingBufferTask) <span class="keyword">task</span>).getSequenceId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其Task中的sequenceId是在<code>dispatch</code>中<code>allocateTask</code>时阻塞申请到的：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Task <span class="title">allocateTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> seqId = ringBuffer.next();</span><br><span class="line">    <span class="keyword">return</span> ringBuffer.<span class="keyword">get</span>(seqId).setSequenceId(seqId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后RingBuffer的消费线程会将ringBuffer中的Task依次消费执行。</p>
<p>又如<code>NettyEventLoopDispatcher</code>则更简单，直接将Task提交到Excutor上：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> execute(<span class="keyword">Task</span> <span class="keyword">task</span>) &#123;</span><br><span class="line">    eventLoop.execute(<span class="keyword">task</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Task">Task</h3><p>Task的执行是做了什么事情呢？调用EventRouter进行分发。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> route(<span class="keyword">Task</span> <span class="keyword">task</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == <span class="keyword">task</span>.eventRouter) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">task</span>.eventRouter.route(</span><br><span class="line">                <span class="keyword">task</span>.key,</span><br><span class="line">                <span class="keyword">task</span>.event,</span><br><span class="line">                (<span class="keyword">null</span> != <span class="keyword">task</span>.consumerRegistry ? <span class="keyword">task</span>.consumerRegistry.select(<span class="keyword">task</span>.key) : <span class="keyword">null</span>),</span><br><span class="line">                <span class="keyword">task</span>.completionConsumer,</span><br><span class="line">                <span class="keyword">task</span>.errorConsumer</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">task</span>.recycle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="EventRouter">EventRouter</h2><p>EventRouter进行分发的逻辑如下（以ConsumerFilterEventRouter为例），首先过滤出所有符合要求的Registration列表：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != consumers &amp;&amp; !consumers.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">List</span>&lt;Registration<span class="preprocessor">&lt;?</span> extends Consumer<span class="preprocessor">&lt;?</span> extends Event<span class="preprocessor">&lt;?</span>&gt;&gt;&gt;&gt; regs = filter.filter(consumers, key);</span><br></pre></td></tr></table></figure>
<p>然后对每一个Registration，调用其Selector的HeaderResolver将headers塞到event里，并调用<code>ConsumerInvoker</code>的<code>invoke</code>：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">size</span> = regs.<span class="keyword">size</span>();</span><br><span class="line"><span class="comment">// old-school for loop is much more efficient than using an iterator</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">size</span>; i++) &#123;</span><br><span class="line">    Registration&lt;? <span class="keyword">extends</span> Consumer&lt;? <span class="keyword">extends</span> Event&lt;?&gt;&gt;&gt; reg = regs.get(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == reg || reg.isCancelled() || reg.isPaused()) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != reg.getSelector().getHeaderResolver()) &#123;</span><br><span class="line">            event.getHeaders().setAll(reg.getSelector().getHeaderResolver().resolve(key));</span><br><span class="line">        &#125;</span><br><span class="line">        consumerInvoker.invoke(reg.getObject(), <span class="keyword">Void</span>.TYPE, event);</span><br></pre></td></tr></table></figure>
<p>在出现问题时如果遇到CancelConsumerException则将Registration取消，对其他异常调用<code>errorConsumer</code>进行处理。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (CancelConsumerException cancel) &#123;</span><br><span class="line">            reg.cancel();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != <span class="keyword">event</span>.getErrorConsumer()) &#123;</span><br><span class="line">                <span class="keyword">event</span>.consumeError(t);</span><br><span class="line">            &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(<span class="keyword">null</span> != errorConsumer)</span> </span>&#123;</span><br><span class="line">                errorConsumer.accept(t);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.error(<span class="string">"Event routing failed for &#123;&#125;: &#123;&#125;"</span>, reg.getObject(), t.getMessage(), t);</span><br><span class="line">                <span class="keyword">if</span> (RuntimeException.class.isInstance(t)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reg.isCancelAfterUse()) &#123;</span><br><span class="line">                reg.cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完成转发后如果<code>completionConsumer</code>存在则执行其accept：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (null != completionConsumer) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            consumerInvoker.invoke(completionConsumer, Void.<span class="keyword">TYPE</span>, event);</span><br><span class="line">        &#125; catch (Exception <span class="keyword">e</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (null != errorConsumer) &#123;</span><br><span class="line">                errorConsumer.accept(<span class="keyword">e</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.<span class="keyword">error</span>(<span class="string">"Completion Consumer &#123;&#125; failed: &#123;&#125;"</span>, completionConsumer, <span class="keyword">e</span>.getMessage(), <span class="keyword">e</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Registry、Registration">Registry、Registration</h2><p>一个Registry管理一个Reactor中所有的Regitration，可以认为它就是一个Registration的List，有接口<code>register</code>，<code>unregister</code>，<code>clear</code>：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Assign the given &#123;<span class="comment">@link reactor.event.selector.Selector&#125; with the given object.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param sel The left-hand side of the &#123;@literal Selector&#125; comparison check.</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param obj The object to assign.</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return &#123;@literal this&#125;</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"><span class="variable">&lt;V extends T&gt;</span> Registration<span class="variable">&lt;V&gt;</span> register(Selector sel, V obj);</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Remove any objects matching this &#123;<span class="comment">@code key&#125;. This will unregister &lt;b&gt;all&lt;/b&gt; objects matching the given</span></span><br><span class="line"> <span class="keyword">*</span> &#123;<span class="comment">@literal key&#125;. There's no provision for removing only a specific object.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param key The key to be matched by the Selectors</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return &#123;@literal true&#125; if any objects were unassigned, &#123;@literal false&#125; otherwise.</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">boolean unregister(Object key);</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Select &#123;<span class="comment">@link Registration&#125;s whose &#123;@link Selector&#125; &#123;@link Selector#matches(Object)&#125; the given &#123;@code key&#125;.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param key The key for the Selectors to match</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return A &#123;@link List&#125; of &#123;@link Registration&#125;s whose &#123;@link Selector&#125; matches the given key.</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">List<span class="variable">&lt;Registration&lt;? extends T&gt;</span>&gt; select(Object key);</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Clear the &#123;<span class="comment">@link Registry&#125;, resetting its state and calling &#123;@link Registration#cancel()&#125; for any active &#123;@link</span></span><br><span class="line"> <span class="keyword">*</span> Registration&#125;.</span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">void clear();</span><br></pre></td></tr></table></figure>
<p>可以看到，<code>register</code>接口会返回<code>Registration</code>，Registration描述了一个<code>Selector</code>和一个<code>Consumer</code>的对应关系，有<code>getSelector</code>，<code>getObject</code>，<code>cancel</code>等接口，其中getObject就是获取Consumer：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> The &#123;<span class="comment">@link reactor.event.selector.Selector&#125; that was used when the registration was made.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return the registration's selector</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">Selector getSelector();</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> The object that was registered</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return the registered object</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">T getObject();</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Cancel this &#123;<span class="comment">@literal Registration&#125; by removing it from its registry.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return &#123;@literal this&#125;</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line">Registration<span class="variable">&lt;T&gt;</span> cancel();</span><br></pre></td></tr></table></figure>
<p>在Reactor中的<code>on</code>接口中就是执行了注册操作：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">public &lt;<span class="keyword">E</span> extends Event&lt;?&gt;&gt; Registration&lt;Consumer&lt;<span class="keyword">E</span>&gt;&gt; <span class="keyword">on</span>(Selector selector, final Consumer&lt;<span class="keyword">E</span>&gt; consumer) &#123;</span><br><span class="line">    <span class="keyword">Assert</span>.notNull(selector, <span class="string">"Selector cannot be null."</span>);</span><br><span class="line">    <span class="keyword">Assert</span>.notNull(consumer, <span class="string">"Consumer cannot be null."</span>);</span><br><span class="line">    Registration&lt;Consumer&lt;<span class="keyword">E</span>&gt;&gt; <span class="keyword">reg</span> = consumerRegistry.register(selector, consumer);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reg</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而在Registry的<code>select</code>接口中，就是通过遍历其Registration的Selector的match来找到Registration列表来实现的：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">public <span class="built_in">List</span>&lt;Registration&lt;? <span class="keyword">extends</span> T&gt;&gt; select(<span class="built_in">Object</span> key) &#123;</span><br><span class="line">    <span class="comment">// maybe pull Registrations from cache for this key</span></span><br><span class="line">    <span class="built_in">List</span>&lt;Registration&lt;? <span class="keyword">extends</span> T&gt;&gt; selectedRegs = FastList.newList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find Registrations based on Selector</span></span><br><span class="line">    <span class="keyword">for</span> (Registration&lt;? <span class="keyword">extends</span> T&gt; reg : <span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (reg.getSelector().matches(key)) &#123;</span><br><span class="line">            selectedRegs.add(reg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// nothing found, maybe invoke handler</span></span><br><span class="line">    <span class="keyword">if</span> (selectedRegs.isEmpty() &amp;&amp; <span class="keyword">null</span> != onNotFound) &#123;</span><br><span class="line">        onNotFound.accept(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return</span></span><br><span class="line">    <span class="keyword">return</span> selectedRegs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Selector">Selector</h2><p>Selector的接口就不言自明了，需要提供<code>match</code>和<code>getHeaderResolver</code>：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Indicates whether this Selector matches the &#123;<span class="comment">@code key&#125;.</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param key The key to match</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return &#123;@code true&#125; if there's a match, otherwise &#123;@code false&#125;.</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">boolean matches(Object key);</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Return a component that can resolve headers from a key</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@return A &#123;@link HeaderResolver&#125; applicable to this &#123;@link Selector&#125; type.</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">HeaderResolver getHeaderResolver();</span><br></pre></td></tr></table></figure>
<h2 id="Consumer">Consumer</h2><p>最后我们到了Consumer，看它的接口：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Implementations accept a given value and perform work on the argument.</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@author Jon Brisbin</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@author Stephane Maldini</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@param &lt;T&gt; the type of values to accept</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">public interface Consumer<span class="variable">&lt;T&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    /<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> Execute the logic of the action, accepting the given parameter.</span><br><span class="line">     <span class="keyword">*</span></span><br><span class="line">     <span class="keyword">*</span> <span class="comment">@param t The parameter to pass to the consumer.</span></span><br><span class="line">     <span class="keyword">*</span>/</span><br><span class="line">    void accept(T t);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Reactor_vs-_Mampa">Reactor vs. Mampa</h2>]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://lyso.qiniudn.com/reactor.jpg" alt=""></p>
<h2 id="简介">简介</h2><p>从<a href="http://lyso.me/2014/08/26/backpressure/" targe]]>
    </summary>
    
      <category term="mampa" scheme="http://lyso.me/tags/mampa/"/>
    
      <category term="reactive streams" scheme="http://lyso.me/tags/reactive-streams/"/>
    
      <category term="reactor" scheme="http://lyso.me/tags/reactor/"/>
    
      <category term="并发" scheme="http://lyso.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="开源" scheme="http://lyso.me/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="异步" scheme="http://lyso.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[back pressure及reactive streams研究]]></title>
    <link href="http://lyso.me/2014/08/26/backpressure/"/>
    <id>http://lyso.me/2014/08/26/backpressure/</id>
    <published>2014-08-26T10:44:12.000Z</published>
    <updated>2014-08-26T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://lyso.qiniudn.com/backpressure.png" alt="back pressure-图片来自akka"></p>
<h2 id="引子">引子</h2><p>　　随着<a href="http://lyso.me/2014/02/01/mampa/" target="_blank" rel="external">Mampa</a> 越来越多的应用在线上系统中，我们在逐步优化同时，发现一个很难绕过去的问题。一个系统中可能有多个ActorGroup，每个ActorGroup中负责一中业务类型（或层次）。比如：</p>
<ul>
<li>FetchActor中负责fetch消息的接收、处理、发回</li>
<li>RedisActor中负责消息中与redis请求相关的操作，发请求到redis-server并把server的返回结果解码后返回给FetchActor</li>
<li>HBaseActor同RedisActor，负责处理HBase相关请求</li>
<li>KakfaActor负责处理与Kafka相关的请求</li>
</ul>
<p>　　如果当前HBase性能较差，RedisActor又没有挡住大量的请求，而FetchActor中过来的消息太快，根据<a href="http://lyso.me/2014/07/26/queue-threory-littles-law/" target="_blank" rel="external">排队理论</a> 中所述，对于HBaseActor这样一个子系统来说，如果消息到达速率 &gt; 服务速率，这就不是一个稳定的系统，会导致Queue快速增长，直至内存爆掉或达到保护上限。到此上限后怎么处理更多的请求：</p>
<ul>
<li>丢弃</li>
<li>将压力向上反馈到源头</li>
</ul>
<p>　　第二种方法，就是我们所要系统考虑的back pressure。</p>
<h2 id="什么是back_pressure">什么是back pressure</h2><p>　　这种情况一般成为“持续压力”（sustained load），如果系统设计时不慎重考虑过载的情况，可能造成的结果是完全无法服务。如果请求量超过了系统的处理能力，就是要做取舍决定的时候了：Something has to give。比较理想的降级服务方法是，让系统仍以正常的latency、以最高的吞吐运行，而高于这个吞吐的那部分请求就拒绝服务好了。</p>
<p>　　举一个过载例子。小米公司每周四都去奥体打羽毛球，8-10块场地，每块场地都&gt;8个人，打起来都觉得等的时间长，汗都出不来，再加上2B的奥体服务态度，忒不爽了。如果采用报名制，每个场地报名6人，报名晚的就只能自己想办法了——比如自己花个钱定场地，那结果是绝得大多数都玩的爽。（当然不久后场地会换到西三旗伟士，没有2B管理员后打的会更爽）</p>
<p>　　什么是“Back Pressure”呢？再比如小米食堂里有500个座位，平均每人吃饭30min，如果同时有超过500个人到食堂，那就得有人等座，再加上饭菜不好吃肯定给差评了。如果可以即时在门口放一个牌子，显示已经进去了多少人（减去已经吃完出来的，就像很多车库的电子指示牌一样），发现食堂比较满的人就可以先不进去，去大桥上溜溜弯，去小米之家看会“万万想不到”，去咖啡厅坐会聊聊天…… 这样食堂里面正在吃饭的也觉得环境宽松，心情不错。根据Little’s Law，食堂不能服务超过每小时1000人，如果12:00-12:30有600人来吃饭，那就有100人在咖啡厅或其它地方消遣。在线上系统亦是如此，超过系统处理能力的部分如果能及时反馈到咖啡厅、大桥上，就是实现了BackPressure。</p>
<h2 id="什么是reactive_streams">什么是reactive streams</h2><p>　　Reactive Streams 是一个在JVM上提供有非阻塞Back-Pressure能力的异步数据流的计划。</p>
<h3 id="要解决的问题">要解决的问题</h3><p>　　处理实时数据流在异步系统里尤其需要小心，其中最主要的问题是在数据流的入口需要控制好不至于后续阶段中被冲垮。</p>
<p>　　Reactive streams的主要目标是在“异步边界”上控制数据流的流量，例如把数据传输给另一个线程或线程池时需要确保其不会buffer溢出。换句话说，Back Pressure 是整个模型中重要的环节以确保队列大小的可控（<a href="http://lyso.me/2014/07/26/queue-threory-littles-law/" target="_blank" rel="external">队列：稳定的系统</a>）。 如果Back Pressure是同步的，那整个系统的异步带来的好处就不存在了。</p>
<h3 id="First_Draft_Specification">First Draft Specification</h3><p>Available immediately is a First Draft Specification covering:</p>
<ul>
<li><a href="https://github.com/reactive-streams/reactive-streams/blob/v0.3/tck/src/main/resources/spec.md" target="_blank" rel="external">Semantics</a> —a specification document</li>
<li><a href="https://github.com/reactive-streams/reactive-streams/tree/v0.3/spi/src/main/java/org/reactivestreams/api/" target="_blank" rel="external">API</a> —Java interfaces for end users</li>
<li><a href="https://github.com/reactive-streams/reactive-streams/tree/v0.3/spi/src/main/java/org/reactivestreams/spi/" target="_blank" rel="external">SPI</a> —Java interfaces for implementations</li>
<li><a href="https://github.com/reactive-streams/reactive-streams/tree/v0.3/tck/src/main/java/org/reactivestreams/tck/" target="_blank" rel="external">TCK</a> —a test harness to validate implementations and guide implementors<br>All of the parts of the Draft Proposal is released under Creative Commons Zero (Public Domain).</li>
</ul>
<h3 id="Implementations_of_the_draft_spec">Implementations of the draft spec</h3><ul>
<li>Akka Streams<ul>
<li>See this Activator template introducing the Akka Project implementation in Scala; a Java version will follow shortly.</li>
<li>Please give Feedback on the issue tracker.</li>
</ul>
</li>
<li>Reactor Composable<ul>
<li><a href="http://github.com/reactor/reactor" target="_blank" rel="external">Reactor (1.1+)</a></li>
<li>Current Implementation Draft is being explored for 1.1 and onwards, see Reactor Composable</li>
</ul>
</li>
<li>RxJava<ul>
<li>Support being prototyped and explored for inclusion in RxJava 1.0<h3 id="Implementors">Implementors</h3></li>
</ul>
</li>
</ul>
<p>To get started implementing the draft specification, it is recommended to start by reading the README, then taking a look at the Specification then taking a look at the TCK. If you have an issue with any of the above, please take a look at closed issues and then open a new issue if it has not already been answered.</p>
<h2 id="接口定义">接口定义</h2><p>　　Reactive Streams的接口分为两种，用户使用的接口和实现使用的接口。</p>
<p>　　用户实现的接口包括Producer、Consumer、Processor，实现使用的接口包括Publisher、Subscriber、Subscription。</p>
<h3 id="Producer">Producer</h3><p>　　Producer是消息源，底层实现使用Publisher。Producer中有2个接口，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Producer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Publisher&lt;T&gt; <span class="title">getPublisher</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produceTo</span><span class="params">(Consumer&lt;T&gt; consumer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>getPublisher：获取底层实现的Publisher</li>
<li>produceTo：将制定的consumer连接到此producer上，在底层实现上需要让consumer去subscribe这个producer的publisher，之后producer产生的stream就能一直被这个consumer消费了，直到以下情况之一：<ul>
<li>Stream里没有数据了</li>
<li>Producer抛异常了</li>
<li>Consumer取消接收更多消息</li>
</ul>
</li>
</ul>
<h3 id="Consumer">Consumer</h3><p>　　Consumer消费消息的stream，由Subscriber实现，只提供一个getSubscriber接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Subscriber&lt;T&gt; <span class="title">getSubscriber</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Processor">Processor</h3><p>　　Processor包含了Producer和Consumer的功能，consume <i>类型的消息，produce <o>类型的消息：</o></i></p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Processor</span>&lt;<span class="title">I</span>, <span class="title">O</span>&gt; <span class="keyword">extends</span> <span class="title">Consumer</span>&lt;<span class="title">I</span>&gt;, <span class="title">Producer</span>&lt;<span class="title">O</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Publisher">Publisher</h3><p>　　Publisher是消息源，一个或多个Subscriber会连接到publisher上接收publisher产生的消息，通过Subscription的<code>requestMore</code>接口来决定是否生成更多消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Publisher</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Subscriber&lt;T&gt; subscriber)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Subscriber">Subscriber</h3><p>　　Subscriber从Publisher接收消息，通过Subscription的<code>requestMore</code>接口向publisher提交“需求”，只有当“需求”和publisher的消息都有的情况下才会接收到更多消息。</p>
<p>　　Subscriber被传送到Publisher进行subscribe时，如果producer接受此subscribe，会调用<code>onSubscribe</code>接口，如果拒绝会调用<code>onError</code>接口。</p>
<p>　　Publisher在条件满足（有需求且有更多的消息）的情况下调用<code>onNext</code>向Subscriber发送消息。</p>
<p>　　如果Publisher已经结束产生更多消息，会调用<code>onComplete</code>通知Subscriber。</p>
<p>　　如果生成消息的stream出了问题无法恢复，也会调用<code>onError</code>通知Sbuscriber。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription subscription)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T element)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable cause)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Subscription">Subscription</h3><p>　　Subscription描述一个Subscriber对一个Publisher的注册，注册成功后才可以通过这个Subscription的<code>requestMore</code>接口向Producer索取更多消息。</p>
<p>　　可以通过<code>cancel</code>接口取消掉这个subscription，取消时即使Publisher还有更多消息，也会停止向对应的Subscriber发送。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Subscription</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestMore</span><span class="params">(<span class="keyword">int</span> elements)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Mampa里怎么做">Mampa里怎么做</h2><p>TO BE ADDED…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://lyso.qiniudn.com/backpressure.png" alt="back pressure-图片来自akka"></p>
<h2 id="引子">引子</h2><p>　　随着<a href="http://lyso.me/2]]>
    </summary>
    
      <category term="Reactive Streams" scheme="http://lyso.me/tags/Reactive-Streams/"/>
    
      <category term="back pressure" scheme="http://lyso.me/tags/back-pressure/"/>
    
      <category term="mampa" scheme="http://lyso.me/tags/mampa/"/>
    
      <category term="并发" scheme="http://lyso.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="开源" scheme="http://lyso.me/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="异步" scheme="http://lyso.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mampa应用之——小米推送Fetcher服务性能调校]]></title>
    <link href="http://lyso.me/2014/08/05/fetcher-mampa/"/>
    <id>http://lyso.me/2014/08/05/fetcher-mampa/</id>
    <published>2014-08-05T13:22:11.000Z</published>
    <updated>2015-04-02T02:46:57.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://blog.xiaomi.com/wp-content/uploads/2014/03/mipush.jpg" alt=""></p>
<h3 id="背景">背景</h3><p>小米消息推送系统在前不久开始使用<a href="http://lyso.me/2014/02/01/mampa/" target="_blank" rel="external">MAMPA</a> 进行异步化改造，改造的过程中，发现对hbase的读写是关键路径，而这一步骤是同步操作，与mampa的异步化框架是相悖的，可优化空间并不大，调试很久后性能甚至尚未达到原同步版：要么线程数开少了竞争不过其它的非异步化实例，要么线程数开太多导致load太高，性能更差。</p>
<p>随后我们分析到hbase性能方面的问题后，参考<a href="https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final170_update.pdf&amp;sa=U&amp;ei=gWJjU97pOeqxsQSDkYDAAg&amp;ved=0CBsQFjAA&amp;usg=AFQjCNGMeuWne9ywncbgux_XiZW6lQWHNw" target="_blank" rel="external">Scaling memcache at Facebook</a> <a href="http://qcontokyo.com/pdf/qcon_MarcKwiatkowski.pdf" target="_blank" rel="external">PPT</a> 设计了一套leased-cache，底层使用<a href="http://lyso.me/2014/03/10/redis-mampa/" target="_blank" rel="external">redis-mampa</a> （使用netty的异步化pipiline redis客户端）。</p>
<h3 id="初步试验">初步试验</h3><h4 id="实验环境：">实验环境：</h4><ul>
<li>hostA 作为压力测试客户端；</li>
<li>hostB 作为fetcher业务服务端；</li>
<li>hostC 作为redis、rabbitmq；</li>
<li>hostD 作为mysql；</li>
<li>Hbase访问采用mock数据并sleep一定时常方式；</li>
</ul>
<h4 id="实验环境：-1">实验环境：</h4><ul>
<li>HBase请求 sleep100ms左右；</li>
<li>Fetcher主逻辑线程6个、redis线程实验1/2/4/8个、hbase-mampa线程64个；</li>
</ul>
<h4 id="实验数据：">实验数据：</h4><ul>
<li>初始状态，cache里没有任何数据，请求全落到hbase：<ul>
<li>qps = 600，latency.99 =800ms</li>
</ul>
</li>
<li>以qps = 600将200w数据灌到redis中，模拟cache全命中情况：<ul>
<li>qps = 10000, latency.99 = 800ms，redis的latency.average在30ms左右</li>
<li>最大qps可以达到12000，此时查看数据生成导致mysql访问总是存在（mysql在主业务线程里访问，latency=0.5ms，6个线程qps峰值则为12000，后续可以通过mock 数据不需要访问mysql的情况来测试）</li>
</ul>
</li>
</ul>
<p>这里首先得到初步印象，latency的.99在800ms时，qps能达到10000，但没有获取到redis的latency.99以及这800ms的分布情况，而且有一个奇怪的现象是改变redis线程个数对结果影响不是太大，跟单独测试redis-mampa的性能情况不符。接下来进行更细致的实验和调校。</p>
<h3 id="实验调校">实验调校</h3><h4 id="步骤1：qps=5000">步骤1：qps=5000</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">6</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">4</span></span><br><span class="line"><span class="variable">qps=</span><span class="number">5000</span></span><br></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wait~before~process.HIST-75-percentile</span>: <span class="string">86.0</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-95-percentile</span>: <span class="string">105.0</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-99-percentile</span>: <span class="string">118.71000000000004</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-999-percentile</span>: <span class="string">123.971</span></span><br><span class="line"></span><br><span class="line"><span class="stylus">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">73.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">115.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">142.71000000000004</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">191.942</span></span></span><br></pre></td></tr></table></figure>
<p>消息在系统中处理的总时间.99为142.71ms，latency是可以接受的，先看下这些时间的主要分布，之后增加qps后再放大地看是否存在问题：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-75-percentile</span>: <span class="number">2.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-95-percentile</span>: <span class="number">14.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-99-percentile</span>: <span class="number">46.710000000000036</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-999-percentile</span>: <span class="number">59.971000000000004</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-75-percentile</span>: <span class="number">22.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-95-percentile</span>: <span class="number">57.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-99-percentile</span>: <span class="number">64.71000000000004</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-999-percentile</span>: <span class="number">91.71000000000004</span></span><br><span class="line"></span><br><span class="line">(from tell是from send的超集，包括在actor的mailbox的时间）</span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-75-percentile</span>: <span class="number">37.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-95-percentile</span>: <span class="number">65.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-99-percentile</span>: <span class="number">70.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-999-percentile</span>: <span class="number">96.85500000000002</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤2：qps=8000">步骤2：qps=8000</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">6</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">4</span></span><br><span class="line"><span class="variable">qps=</span><span class="number">8000</span></span><br></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wait~before~process.HIST-75-percentile</span>: <span class="string">111.0</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-95-percentile</span>: <span class="string">142.0</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-99-percentile</span>: <span class="string">160.42000000000007</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-999-percentile</span>: <span class="string">164.971</span></span><br><span class="line"></span><br><span class="line"><span class="stylus">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">118.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">173.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">228.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">295.1880000000001</span></span></span><br></pre></td></tr></table></figure>
<p>消息在系统中处理的总时间.99为228ms，主要分布如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-75-percentile</span>: <span class="number">4.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-95-percentile</span>: <span class="number">26.549999999999955</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-99-percentile</span>: <span class="number">74.97000000000025</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-999-percentile</span>: <span class="number">99.0</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-75-percentile</span>: <span class="number">49.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-95-percentile</span>: <span class="number">165.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-99-percentile</span>: <span class="number">196.71000000000004</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-999-percentile</span>: <span class="number">207.0</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-75-percentile</span>: <span class="number">81.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-95-percentile</span>: <span class="number">174.54999999999995</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-99-percentile</span>: <span class="number">204.42000000000007</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-999-percentile</span>: <span class="number">210.0</span></span><br></pre></td></tr></table></figure>
<h4 id="步骤3：qps=10000">步骤3：qps=10000</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">6</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">4</span></span><br><span class="line"><span class="variable">qps =</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wait~before~process<span class="class">.HIST-75-percentile</span>: <span class="number">131.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-95-percentile</span>: <span class="number">227.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-99-percentile</span>: <span class="number">463.5500000000002</span></span><br><span class="line">wait~before~process<span class="class">.HIST-999-percentile</span>: <span class="number">499.884</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">2451.5</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">3307.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">3501.42</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">3581.980000000001</span></span><br></pre></td></tr></table></figure>
<p>消息在系统中处理的总时间.99飙升到3.5s，比之前初步实验时的情况还差，主要分布如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-75-percentile</span>: <span class="number">43.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-95-percentile</span>: <span class="number">330.2999999999997</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-99-percentile</span>: <span class="number">699.0100000000011</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-999-percentile</span>: <span class="number">1298.5780000000004</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-75-percentile</span>: <span class="number">32.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-95-percentile</span>: <span class="number">151.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-99-percentile</span>: <span class="number">133294.30000000008</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-999-percentile</span>: <span class="number">136519.942</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-75-percentile</span>: <span class="number">57.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-95-percentile</span>: <span class="number">310.3499999999983</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-99-percentile</span>: <span class="number">133891.84</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-999-percentile</span>: <span class="number">136521.681</span></span><br></pre></td></tr></table></figure>
<p>打到200w请求时，问题暴露出来了，这时发现内存飙升！<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="setting">load = <span class="value"><span class="number">5</span></span></span></span><br><span class="line"><span class="setting">mem=<span class="value"><span class="number">15</span>G</span></span></span><br></pre></td></tr></table></figure></p>
<h4 id="步骤4：分析内存异常">步骤4：分析内存异常</h4><p>重复实验几次后，大多数情况下都能重现内存暴涨的情况。于是通过 <a href="http://lyso.me/2014/07/01/bytebuf-memleak" target="_blank" rel="external">MAT分析java内存</a> 发现，redis-mampa内部的queue的size暴涨。这个queue是用来缓存pipiline发送到redis-server的命令以解析结果的发回给客户端的，当netty到redis-server这条通道的消息速度比客户端发来的慢时，就会导致queue堆积。</p>
<p>这就需要两个角度解决问题：</p>
<ol>
<li>需要对queue的size设置上限，在达到上限时降级服务，并打perf-counter</li>
<li>调查为何queue会堆积，因为qps没有达到实验性能</li>
</ol>
<h4 id="步骤5：queue-size限制">步骤5：queue-size限制</h4><p>加上 queue size 限制及perf：<br><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">6</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">4</span></span><br><span class="line"><span class="variable">qps =</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></p>
<p>跑第一次时发现latency很小并且内存未涨，重复实验后又重现压力大的情况，但表现是：绝大多数请求因为redis超时和queue堆积而丢掉了（latency也很大）：<br><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">redis~mampa~fail~<span class="built_in">queue</span>~<span class="literal">full</span><span class="built_in">.</span>COUNTER<span class="subst">=</span><span class="number">761222</span></span><br></pre></td></tr></table></figure></p>
<p>但查看redis-server的cpu/内存占用情况和机器load情况都无异常，猜测是由于主业务actor和redis-mampa的actor都是基于多优先级版disruptor的，用的SleepingWaitStrategy，这个等待策略先spin100次、再spin并yield100次、然后parkNanos，对CPU占用较大（由于是多优先级队列，不易使用BlockingWaitStrategy），于是将线程数改掉继续试验。</p>
<h4 id="步骤6：调整线程数">步骤6：调整线程数</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">3</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">3</span></span><br><span class="line"><span class="variable">qps =</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wait~before~process<span class="class">.HIST-75-percentile</span>: <span class="number">133.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-95-percentile</span>: <span class="number">167.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-99-percentile</span>: <span class="number">175.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-999-percentile</span>: <span class="number">196.942</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">131.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">201.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">249.71000000000004</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">260.913</span></span><br><span class="line"></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-75-percentile</span>: <span class="number">5.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-95-percentile</span>: <span class="number">29.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-99-percentile</span>: <span class="number">55.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-999-percentile</span>: <span class="number">114.59400000000005</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-75-percentile</span>: <span class="number">58.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-95-percentile</span>: <span class="number">109.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-99-percentile</span>: <span class="number">156.71000000000004</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-999-percentile</span>: <span class="number">171.971</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-75-percentile</span>: <span class="number">67.75</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-95-percentile</span>: <span class="number">116.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-99-percentile</span>: <span class="number">167.1300000000001</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-999-percentile</span>: <span class="number">172.0</span></span><br></pre></td></tr></table></figure>
<p>数据表示毫无压力，继续增加qps试试。</p>
<h4 id="步骤7：qps=12000">步骤7：qps=12000</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">3</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">3</span></span><br><span class="line"><span class="variable">qps=</span><span class="number">12000</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wait~before~process<span class="class">.HIST-75-percentile</span>: <span class="number">144.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-95-percentile</span>: <span class="number">166.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-99-percentile</span>: <span class="number">181.71000000000004</span></span><br><span class="line">wait~before~process<span class="class">.HIST-999-percentile</span>: <span class="number">195.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">128.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">214.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">296.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">316.942</span></span><br></pre></td></tr></table></figure>
<p>此时load=0.1，CPU=400%，latency.99在300ms，继续增加qps：</p>
<h4 id="步骤8：qps=15000">步骤8：qps=15000</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">3</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">3</span></span><br><span class="line"><span class="variable">qps=</span><span class="number">15000</span></span><br></pre></td></tr></table></figure>
<p>在启动阶段load和CPU较高，latency也比较大，在打到60w-100w的时候latency降下来了：<br><code>mem=1.6G，CPU450%，load=3.0</code><br><code>rabbitmq.load=0.29, cpu=450%</code></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wait~before~process.HIST-75-percentile</span>: <span class="string">186.0</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-95-percentile</span>: <span class="string">223.54999999999995</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-99-percentile</span>: <span class="string">235.0</span></span><br><span class="line"><span class="attribute">wait~before~process.HIST-999-percentile</span>: <span class="string">250.0</span></span><br><span class="line"></span><br><span class="line"><span class="stylus">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">140.75</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">239.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">369.84000000000015</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">408.797</span></span></span><br></pre></td></tr></table></figure>
<p>但是latency相对较高，每次请求有两次redis的cmget请求，qps=15000时redis请求为30000，4个线程的实验数据要比这个好的多，所以猜测这里还有猫腻，降低redis线程数继续试验：</p>
<h4 id="步骤9：比较不同redis线程数">步骤9：比较不同redis线程数</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">2</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">2</span></span><br><span class="line"><span class="variable">qps=</span><span class="number">15000</span></span><br></pre></td></tr></table></figure>
<p>的情况是：</p>
<p><code>mem=1.9G，CPU450%，load=4.0</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wait~before~process<span class="class">.HIST-75-percentile</span>: <span class="number">192.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-95-percentile</span>: <span class="number">224.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-99-percentile</span>: <span class="number">241.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-999-percentile</span>: <span class="number">263.942</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">201.75</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">316.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">348.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">383.0</span></span><br></pre></td></tr></table></figure>
<p>而<br><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">2</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">4</span></span><br><span class="line"><span class="variable">qps=</span><span class="number">15000</span></span><br></pre></td></tr></table></figure></p>
<p>的情况是：</p>
<p><code>mem=1.5G，CPU450%，load=0.3</code><br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wait~before~process<span class="class">.HIST-75-percentile</span>: <span class="number">183.0</span></span><br><span class="line">wait~before~process<span class="class">.HIST-95-percentile</span>: <span class="number">216.54999999999995</span></span><br><span class="line">wait~before~process<span class="class">.HIST-99-percentile</span>: <span class="number">378.1300000000001</span></span><br><span class="line">wait~before~process<span class="class">.HIST-999-percentile</span>: <span class="number">416.65200000000004</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">90.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">160.54999999999995</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">241.42000000000007</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">312.942</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-75-percentile</span>: <span class="number">53.75</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-95-percentile</span>: <span class="number">198.54999999999995</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-99-percentile</span>: <span class="number">250.84000000000015</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-999-percentile</span>: <span class="number">266.971</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-75-percentile</span>: <span class="number">69.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-95-percentile</span>: <span class="number">198.0999999999999</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-99-percentile</span>: <span class="number">262.5500000000002</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-999-percentile</span>: <span class="number">270.0</span></span><br></pre></td></tr></table></figure></p>
<p>发现增加线程数的影响很小，进一步分析perf-counter，发现了redis的actor压力分布不均的情况，以下是redis线程分别是3、4、5的情况：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mampa~tell~actor~RedisMampa~<span class="number">0</span>/<span class="number">3</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">743969</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">1</span>/<span class="number">3</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">2833514</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">2</span>/<span class="number">3</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">743539</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mampa~tell~actor~RedisMampa~<span class="number">0</span>/<span class="number">4</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">155403</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">1</span>/<span class="number">4</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">156336</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">2</span>/<span class="number">4</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">155332</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">3</span>/<span class="number">4</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">758472</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mampa~tell~actor~RedisMampa~<span class="number">0</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">620549</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">1</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">3686638</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">2</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">620688</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">3</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">620500</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">4</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">620516</span></span><br></pre></td></tr></table></figure>
<p>分析发现数字很有规律，总是有一个actor上落的比较多，其他的比较平均，多的数量是少的数量的(actor个数+1)倍，以上表5个actor为例，可以这样认为，有两种请求，第一种请求平均分给了5个actor，每个62w，第二种请求全落在actor-1上了，共306w，则actor-1上有368w个。然后意识到一种key是带userid的，另一种是appid的，这里测试app只有一个，所以落在了一个actor上。解决方案是，提供可配置的<code>random-actor</code>方式路由到不同的actor，继续试验。</p>
<h4 id="步骤10：配置redis-mampa使用random-actor路由消息">步骤10：配置redis-mampa使用random-actor路由消息</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">2</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">5</span></span><br><span class="line"><span class="variable">qps=</span><span class="number">20000</span></span><br></pre></td></tr></table></figure>
<p>实验结果中redis的actor分布较均匀了。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mampa~tell~actor~RedisMampa~<span class="number">0</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">908895</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">1</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">907672</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">2</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">910176</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">3</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">910250</span></span><br><span class="line">mampa~tell~actor~RedisMampa~<span class="number">4</span>/<span class="number">5</span><span class="class">.P0</span><span class="class">.COUNTER</span>=<span class="number">909681</span></span><br></pre></td></tr></table></figure>
<p>此时的latency为：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wait~before~process<span class="class">.HIST-75-percentile</span>: <span class="number">21866.25</span></span><br><span class="line">wait~before~process<span class="class">.HIST-95-percentile</span>: <span class="number">25688.65</span></span><br><span class="line">wait~before~process<span class="class">.HIST-99-percentile</span>: <span class="number">26831.920000000002</span></span><br><span class="line">wait~before~process<span class="class">.HIST-999-percentile</span>: <span class="number">27347.855</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">43.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">106.54999999999995</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">190.20000000000027</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">239.913</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-75-percentile</span>: <span class="number">5.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-95-percentile</span>: <span class="number">23.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-99-percentile</span>: <span class="number">80.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-999-percentile</span>: <span class="number">115.50700000000006</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-75-percentile</span>: <span class="number">7.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-95-percentile</span>: <span class="number">27.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-99-percentile</span>: <span class="number">75.71000000000004</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-999-percentile</span>: <span class="number">121.94200000000001</span></span><br><span class="line"></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-75-percentile</span>: <span class="number">13.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-95-percentile</span>: <span class="number">224.64999999999986</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-99-percentile</span>: <span class="number">291.4200000000001</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-999-percentile</span>: <span class="number">440.6220000000003</span></span><br></pre></td></tr></table></figure>
<p>可见redis的请求latency已经落回到合理的范围，但<code>wait~before~process</code>的时间很长，而且观察rabbitmq的状态发现fetcher模块整体produce的速度只有18000，而fetcher业务模块的disruptor占用情况为：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mailbox~occupied~size~Fetcher~<span class="number">0</span><span class="class">.p1</span><span class="class">.GAUGE</span>=<span class="number">465</span></span><br><span class="line">mailbox~occupied~size~Fetcher~<span class="number">0</span><span class="class">.p2</span><span class="class">.GAUGE</span>=<span class="number">1859</span></span><br><span class="line">mailbox~occupied~size~Fetcher~<span class="number">1</span><span class="class">.p1</span><span class="class">.GAUGE</span>=<span class="number">533</span></span><br><span class="line">mailbox~occupied~size~Fetcher~<span class="number">1</span><span class="class">.p2</span><span class="class">.GAUGE</span>=<span class="number">1981</span></span><br></pre></td></tr></table></figure>
<p>因此猜测是main.thread成为了瓶颈，于是调整一下线程分配：</p>
<h4 id="步骤11：调整main/redis线程分配">步骤11：调整main/redis线程分配</h4><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">main.<span class="variable">thread=</span><span class="number">3</span></span><br><span class="line">redis.<span class="variable">thread=</span><span class="number">4</span></span><br><span class="line"><span class="variable">qps=</span><span class="number">20000</span></span><br></pre></td></tr></table></figure>
<p>此时<code>load=9, cpu=700%</code>，fetcher模块整体produce的速度基本达到了20000。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wait~before~process<span class="class">.HIST-75-percentile</span>: <span class="number">7854.75</span></span><br><span class="line">wait~before~process<span class="class">.HIST-95-percentile</span>: <span class="number">11740.599999999999</span></span><br><span class="line">wait~before~process<span class="class">.HIST-99-percentile</span>: <span class="number">16918.420000000013</span></span><br><span class="line">wait~before~process<span class="class">.HIST-999-percentile</span>: <span class="number">18196.202</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>: <span class="number">64.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>: <span class="number">126.64999999999986</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>: <span class="number">206.84000000000015</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>: <span class="number">249.79700000000003</span></span><br><span class="line"></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-75-percentile</span>: <span class="number">17.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-95-percentile</span>: <span class="number">255.54999999999995</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-99-percentile</span>: <span class="number">374.3900000000003</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span><span class="class">.HIST-999-percentile</span>: <span class="number">443.971</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-75-percentile</span>: <span class="number">8.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-95-percentile</span>: <span class="number">37.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-99-percentile</span>: <span class="number">47.0</span></span><br><span class="line">redis~mampa~from~send<span class="class">.HIST-999-percentile</span>: <span class="number">51.0</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-75-percentile</span>: <span class="number">13.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-95-percentile</span>: <span class="number">37.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-99-percentile</span>: <span class="number">50.0</span></span><br><span class="line">redis~mampa~from~tell<span class="class">.HIST-999-percentile</span>: <span class="number">51.971000000000004</span></span><br></pre></td></tr></table></figure>
<p>但<code>wait~before~process</code>时间仍然较长，一部分原因是启动时就有堆积的延迟导致的，另外还需继续跟进的方面有：</p>
<h3 id="后续工作">后续工作</h3><ol>
<li>rabbitmq的CPU占用一直在500%上下，这里是否是瓶颈</li>
<li>能在多优先级队列的disruptor中支持更多的wait策略是否能解决load高的问题</li>
</ol>
<h4 id="多优先级队列disruptor支持BlockingWaitStrategy">多优先级队列disruptor支持BlockingWaitStrategy</h4><p>实验验证这种策略发现性能是有一定折扣的，</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">Blocking:</span>  Benchmark/Single <span class="string">Ellapsed:</span> <span class="number">3007.42</span>ms, <span class="string">QPS:</span> <span class="number">468862.87</span>. (producerCount=<span class="number">1</span>, ringSize=<span class="number">1024</span>, queries=<span class="number">10000000</span>). </span><br><span class="line"><span class="string">Blocking:</span>  Benchmark/Multi  <span class="string">Ellapsed:</span> <span class="number">6067.46</span>ms, <span class="string">QPS:</span> <span class="number">232398.09</span>. (priorities=[<span class="number">1000</span>, <span class="number">1000</span>], ringSize=<span class="number">1024</span>x2, queries=<span class="number">10000000</span>).</span><br><span class="line"><span class="string">Sleeping:</span>  Benchmark/Single <span class="string">Ellapsed:</span> <span class="number">1126.05</span>ms, <span class="string">QPS:</span> <span class="number">1252227.05</span>. (producerCount=<span class="number">1</span>, ringSize=<span class="number">1024</span>, queries=<span class="number">10000000</span>). </span><br><span class="line"><span class="string">Sleeping:</span>  Benchmark/Multi  <span class="string">Ellapsed:</span> <span class="number">1378.33</span>ms, <span class="string">QPS:</span> <span class="number">1023022.22</span>. (priorities=[<span class="number">1000</span>, <span class="number">1000</span>], ringSize=<span class="number">1024</span>x2, queries=<span class="number">10000000</span>).</span><br></pre></td></tr></table></figure>
<p>但我们肯定达不到20w+的qps，可以先不关心这个，试一下用BlockingWaitStrategy的Fetcher性能：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="variable">load=</span><span class="number">5</span>, <span class="variable">mem=</span><span class="number">1.3</span>g, <span class="variable">CPU=</span><span class="number">700</span>%</span><br></pre></td></tr></table></figure>
<p>无请求时CPU由60%降到7%</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-75-percentile</span>=<span class="number">57.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-95-percentile</span>=<span class="number">80.0</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-99-percentile</span>=<span class="number">93.71000000000004</span></span><br><span class="line">Request<span class="class">.lifetime</span><span class="class">.HIST-999-percentile</span>=<span class="number">106.91300000000001</span></span><br><span class="line"></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span>.HIST-<span class="number">75</span>-percentile=<span class="number">13.0</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span>.HIST-<span class="number">95</span>-percentile=<span class="number">51.549999999999955</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span>.HIST-<span class="number">99</span>-percentile=<span class="number">94.42000000000007</span></span><br><span class="line">mampa~event~inqueue~<span class="tag">time</span>.HIST-<span class="number">999</span>-percentile=<span class="number">181.56500000000005</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis~mampa~from~send.HIST-<span class="number">75</span>-percentile=<span class="number">5.0</span></span><br><span class="line">redis~mampa~from~send.HIST-<span class="number">95</span>-percentile=<span class="number">11.0</span></span><br><span class="line">redis~mampa~from~send.HIST-<span class="number">99</span>-percentile=<span class="number">20.0</span></span><br><span class="line">redis~mampa~from~send.HIST-<span class="number">999</span>-percentile=<span class="number">24.91300000000001</span></span><br><span class="line"></span><br><span class="line">redis~mampa~from~tell.HIST-<span class="number">75</span>-percentile=<span class="number">7.0</span></span><br><span class="line">redis~mampa~from~tell.HIST-<span class="number">95</span>-percentile=<span class="number">16.0</span></span><br><span class="line">redis~mampa~from~tell.HIST-<span class="number">99</span>-percentile=<span class="number">26.710000000000036</span></span><br><span class="line">redis~mampa~from~tell.HIST-<span class="number">999</span>-percentile=<span class="number">44.76800000000003</span></span><br></pre></td></tr></table></figure>
<p>OK，latency.99降到了100ms。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://blog.xiaomi.com/wp-content/uploads/2014/03/mipush.jpg" alt=""></p>
<h3 id="背景">背景</h3><p>小米消息推送系统在前不久开始使用<a href="http:/]]>
    </summary>
    
      <category term="mampa" scheme="http://lyso.me/tags/mampa/"/>
    
      <category term="内存泄露" scheme="http://lyso.me/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
      <category term="小米推送系统" scheme="http://lyso.me/tags/%E5%B0%8F%E7%B1%B3%E6%8E%A8%E9%80%81%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="并发" scheme="http://lyso.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="异步" scheme="http://lyso.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[排队理论及Little's Law]]></title>
    <link href="http://lyso.me/2014/07/26/queue-threory-littles-law/"/>
    <id>http://lyso.me/2014/07/26/queue-threory-littles-law/</id>
    <published>2014-07-26T10:44:12.000Z</published>
    <updated>2014-07-26T10:44:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://img01.e23.cn/2012/0729/20120729064952752.jpg" alt=""></p>
<h2 id="队列无处不在">队列无处不在</h2><p>　　最近一直在做异步编程框架方面的工作。异步化最重要的几个概念是，消息/事件、队列/缓冲区、线程池等，在实际应用中需要考虑到队列满等问题。其实队列无处不在，不止是在异步程序框架里。诶，等一等，同步程序哪来的队列？的确是没有“明显的”。如果你用线程池执行同步代码，你得有有锁或信号量或等待队列从池里取出线程。如果你很彪悍，每个请求都新建一个线程来处理，那当你的线程数超过CPU数时，线程得在队列里等OS调度，还徒增线程上下文切换和条件变量的开销。队列无处不在，拥抱队列吧！既然无法避免队列，就用心设计好队列，比如用上无锁队列。</p>
<p>　　现实生活中队列也是无处不在，比如宇宙中心五道口的枣糕王队列和最近刚出来的西少爷队列，五彩城的外婆家队列，小米的周二抢手机队列，每个小米员工身上都挂着一堆F码队列，北京车牌摇号是个巨大的队列，等等……</p>
<h2 id="什么是队列，什么是排队理论">什么是队列，什么是排队理论</h2><p>　　<em>queue</em>一词来自于拉丁语<em>cauda</em>，是“马尾巴”的意思。排队理论（Queueing theory）是研究排队（queues，或者waiting lines）的数学方法。拼写成 “queueing” 而不是”queuing”据说是因为学术界相关领域有个很牛叉的期刊叫“Queueing Systems”……</p>
<p>　　一个在丹麦哥本哈根电话交换局工作的工程师 Agner Krarup Erlang（哈哈，就是Erlang编程语言的出处之一，另一出处是<em>Er</em>icsson <em>Lang</em>uage），研究人们打电话的方式，发展出人们需要等待多久的公式，并于1909年出版了关于排队理论的第一篇论文，当时称为话务理论。他在热力学统计平衡理论的启发下，成功地建立了电话统计平衡模型，并由此得到一组递推状态方程，从而导出Erlang电话损失率公式。自20世纪初以来，电话系统的设计一直在应用这个公式。30年代苏联数学家А.Я.欣钦把处于统计平衡的电话呼叫流称为最简单流。瑞典数学家巴尔姆又引入有限后效流等概念和定义。他们用数学方法深入地分析了电话呼叫的本征特性，促进了排队论的研究。50年代初，美国数学家关于生灭过程的研究、英国数学家D.G.肯德尔提出嵌入马尔可夫链理论，以及对排队队型的分类方法，为排队论奠定了理论基础。在这以后，L.塔卡奇等人又将组合方法引进排队论，使它更能适应各种类型的排队问题。70年代以来，人们开始研究排队网络和复杂排队问题的渐近解等，成为研究现代排队论的新趋势。</p>
<h2 id="队列的形成">队列的形成</h2><p>　　队列的形成是由于服务对象到达时间快于服务时间导致的。看这两种极端情况：</p>
<ul>
<li>服务时间为1秒/个，到达时间为2秒/个，永远不会产生队列堆积</li>
<li>服务时间为2秒/个，到达时间为1秒/个，队列会永无止境的增加</li>
</ul>
<p>　　而在现实服务系统中，服务时间和到达时间都是不是恒定的。如果一个队列不会随时间增加而无限增长，那么可以说它是<em>稳定</em>的。而对于单服务节点队列来说，如果其<em>平均服务时间</em>小于<em>平均到达时间</em>（或<em>平均服务速率</em>大于<em>平均到达速率</em>），则可以说它是稳定的。</p>
<p>　　例如下图，横坐标为时间，纵坐标为队列长度，这是一个稳定的队列，我们能看到“忙”与“闲”的交替，<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">　|</span><br><span class="line">队|                                   __</span><br><span class="line">列|        <span class="strong">__                      __</span>|  |__</span><br><span class="line">长|     <span class="strong">__|  |__</span>          <span class="strong">__    __</span>|        |</span><br><span class="line">度|  <span class="strong">__|        |__</span>    <span class="strong">__|  |__</span>|           |<span class="emphasis">___</span>_</span><br><span class="line">　|<span class="emphasis">_|_</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">___|__</span>|<span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span>|<span class="strong">_____</span>_</span><br><span class="line">　　　　时间</span><br></pre></td></tr></table></figure></p>
<p>　　而下图则是一个不稳定的队列，就像在高速路上发生车祸后的结果一样：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">　|                          <span class="emphasis">___</span>_| </span><br><span class="line">　|                       __|        </span><br><span class="line">　|                    __|            </span><br><span class="line">队|                 __|               </span><br><span class="line">列|        <span class="strong">__    __</span>|               </span><br><span class="line">长|     <span class="strong">__|  |__</span>|</span><br><span class="line">度|  __|        </span><br><span class="line">　|<span class="emphasis">_|_</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="emphasis">___</span>_</span><br><span class="line">　　　　时间</span><br></pre></td></tr></table></figure></p>
<!-- mathjax config similar to math.stackexchange -->
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  jax: ["input/TeX", "output/HTML-CSS"],
  tex2jax: {
    inlineMath: [ ['$', '$'] ],
    displayMath: [ ['$$', '$$']],
    processEscapes: true,
    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
  },
  messageStyle: "none",
  "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] }
});
</script>

<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"></script>

<h2 id="基本模型">基本模型</h2><p>　　排队系统又称服务系统。服务系统由服务系统和服务对象（顾客）构成。服务对象到来的时刻和对他服务的时间（即占用服务系统的时间）都是随机的。最简单的排队系统模型包括三个组成部分：输入过程、排队策略和服务系统。</p>
<h3 id="输入过程">输入过程</h3><p>　　输入过程考察的是顾客到达服务系统的规律。它可以用一定时间内顾客到达数或前后两个顾客相继到达的间隔时间来描述，一般分为确定型和随机型两种。例如，在生产线上加工的零件按规定的间隔时间依次到达加工地点，定期运行的班车、班机等都属于确定型输入。随机型的输入是指在时间 $t$ 内顾客到达数 $n(t)$ 服从一定的随机分布。如服从泊松分布，则在时间 $t$ 内到达$n$个顾客的概率为<br>$$<br>P_n(t)=\frac{e^{-\lambda t}{(\lambda t)}^n}{n!} (n=0,1,2,…,N)<br>$$<br>　　或相继到达的顾客的间隔时间 $T$ 服从负指数分布，即<br>$$<br>P(T \leqslant t)=1-e^{-\lambda t}<br>$$<br>　　式中 $\lambda$ 为单位时间顾客期望到达数，称为平均到达速率； $1/\lambda$ 为平均间隔时间。在排队论中，讨论的输入过程主要是随机型的。</p>
<h3 id="排队策略">排队策略</h3><p>　　排队策略分为等待策略、丢弃策略和混合策略三种。当顾客到达时，所有服务系统都被占用，则顾客排队等候，即为等待策略。在等待策略中，为顾客进行服务的次序可以是先到先服务，或后到先服务，或是随机服务和有优先权服务（如医院接待急救病人）。如果顾客来到后看到服务系统没有空闲立即离去，则为丢弃策略。有些系统因留给顾客排队等待的空间有限，因此超过所能容纳人数的顾客必须离开系统，这种排队策略就是混合策略。</p>
<h3 id="服务系统">服务系统</h3><p>　　可以是一个或多个服务节点。多个服务节点可以是平行排列的，也可以是串连排列的。服务时间一般也分成确定型和随机型两种。例如，自动冲洗汽车的装置对每辆汽车冲洗（服务）时间是相同的，因而是确定型的。而随机型服务时间 $v$ 则服从一定的随机分布。如果服从负指数分布，则其分布函数是<br>$$<br>P(v \leqslant t) = 1 - e^{-\mu t}    (t \geqslant 0)<br>$$<br>　　式中 $\mu$ 为平均服务率， $1/\mu$ 为平均服务时间。</p>
<h3 id="表示法">表示法</h3><p>　　一般使用David G. Kendall表示法，A/S/C：</p>
<ul>
<li>A（Arrival Process）：描述顾客到达系统的概率密度分布（在消息系统中对应于消息到达的概率分布）</li>
<li>S（Service Process）：描述顾客服务耗时的概率密度分布（在消息系统对应于消息处理的时间分布）</li>
<li>C（Number of Servers）：描述系统中的服务节点个数</li>
</ul>
<p>　　其中，A、S可以是以下任意一个：</p>
<ul>
<li>M (Markov)：Exponential probability density</li>
<li>D (Deterministic)：All customers have the same value</li>
<li>G (General)：Any arbitrary probability distribution</li>
</ul>
<h2 id="示例排队系统">示例排队系统</h2><p>　　例如有以下类型的排队系统：</p>
<h3 id="M/M/1">M/M/1</h3><ul>
<li>最简单的排队系统，一个服务节点</li>
<li>到达时间负指数分布（泊松过程）</li>
<li>服务时间负指数分布（泊松过程）</li>
<li>服务策略：FIFS（先入队先服务）</li>
</ul>
<h4 id="泊松过程（Poisson_process）">泊松过程（Poisson process）</h4><p>　　泊松过程以法国数学家泊松命名，是随机过程的一种。M/M/1系统假设到达时间符合泊松分布，在现实系统中需要满足以下三点才可以做此近似假设：</p>
<ul>
<li>无限请求数，或请求数量很大</li>
<li>单次请求对系统性能和资源占用都很小</li>
<li>所有请求之间相互独立，互不影响/依赖<br>　　例如公路系统中的车辆，就满足：</li>
<li>车辆数非常多</li>
<li>每辆车占用公路上的位置很小</li>
<li>所有的车决定走哪条路、怎么走，对其他车辆影响不大<br>　　如果公路上正在举行公路赛，那么条件2、3就不满足了，就不能用泊松过程近似。</li>
</ul>
<p>　　$n$个请求在时间$0$ ~ $t$内到达的泊松过程的概率密度分布可以表示如下：<br>$$<br>P_n(t)=\frac{(\lambda t)^n}{n!}e^{-\lambda t}<br>$$<br>　　其中，</p>
<ul>
<li>$t$是历经时间</li>
<li>$n$是这段时间请求到达总数</li>
<li>$\lambda$是平均到达速率</li>
</ul>
<h4 id="负指数分布">负指数分布</h4><p>　　如果泊松概率分布不够直观，可以将其简化：在一段时间内没有任何请求到达的分布，也就是泊松分布中的$n=0$：<br>$$<br>P_0(t)=e^{-\lambda t}<br>$$<br>　　还拿高速公路举例子，一段路上平均每10s有1个车到达（到达速率为0.1 车/秒）。下图是随时间t没有一个车到达的概率分布。<br><img src="http://www.eventhelix.com/realtimemantra/congestioncontrol/images/poisson.gif" alt=""><br>　　可见，一段时间内看不到一辆车的概率会碎观察时间间隔的增长而急剧下降：１秒内是90%，20秒内只有10%了。</p>
<h4 id="M/M/1系统的结果分析">M/M/1系统的结果分析</h4><p>　　对于稳定的系统，服务速率要大于到达速率。定义“流量强度”$\rho$如下：<br>$$<br>\rho = \lambda / \mu<br>$$<br>　　其中$\lambda$为到达速率，$\mu$为服务速率。也就是稳定系统的$rho&lt;1$。则系统中的平均请求数$N$为：<br>$$<br>N = \frac{\rho}{1-\rho}<br>$$<br>　　容易看出，当$rho$趋近于1时$N$急速增大。从这个式子可以简单推导出总的等待时间（包括服务时间）（见后文Little’s Law）：<br>$$<br>T = \frac{1}{\mu - \lambda}<br>$$</p>
<h3 id="M/D/1，M/D/n系统">M/D/1，M/D/n系统</h3><p>Agner Krarup Erlang在1917建模并解决了M/D/1系统，随后在1920年建模了M/D/n系统：</p>
<ul>
<li>M stands for Markov or memoryless and means arrivals occur according to a Poisson process</li>
<li>D stands for deterministic and means jobs arriving at the queue require a fixed amount of service</li>
<li>n describes the number of servers at the queueing node (k = 1, 2,…).</li>
</ul>
<h3 id="M/G/1，_M/G/n系统">M/G/1， M/G/n系统</h3><p>M/G/1系统由Felix Pollaczek在1930年解决。而M/G/n系统的性能分析仍然是一个<a href="http://en.wikipedia.org/wiki/M/G/k_queue" target="_blank" rel="external">开放问题</a>。</p>
<h3 id="G/G/n系统">G/G/n系统</h3><p>This is the most general queueing system where the arrival and service time processes are both arbitrary. The system has n servers. No analytical solution is known for this queueing system.</p>
<h2 id="测量指标">测量指标</h2><ul>
<li>平均等待时间、等待时间.99/.95/.75</li>
<li>服务节点利用率<ul>
<li>比如，消息到达速率为10ms一个，平均每个处理时间为8ms，则服务节点可用率为 $P=(1 / 10) * 8 = 80% $</li>
</ul>
</li>
<li>吞吐/QPS</li>
<li>平均等待消息个数</li>
<li>消息等待个数分布（例如 $P(n), n=0, 1, 2…$表示有n个消息在等待的概率）</li>
</ul>
<h2 id="Little’s_Law">Little’s Law</h2><p>　　一般译为利特尔法则，指在一个稳定的系统（排队理论中的系统）中，长时间观察到的平均顾客数量$L$，等于长时间观察到的有效到达速率$\lambda$与平均每个顾客在系统中花费的时间之乘积，即<br>$$<br>L = \lambda W<br>$$<br>　　由麻省理工大学斯隆商学院（MIT Sloan School of Management）的教授John Little于1961年所提出与证明。这一法则为精益生产的改善方向指明了道路。如何有效地缩短生产周期呢？利特尔法则已经很明显地指出了方向。一个方向是提高产能，从而降低生产节拍；另一个方向就是压缩存货数量。然而，提高往往意味着增加很大的投入。另外，生产能力的提升虽然可以缩短生产周期，但是，生产能力的提升总有个限度，我们无法容忍生产能力远远超过市场的需求。一般来说，每个公司在一定时期内的生产能力是大致不变的，而从长期来看，各公司也会力图使自己公司的产能与市场需求相吻合。因此，最有效地缩短生产周期的方法就是压缩在制品数量。<br>　　利特尔法则不仅适用于整个系统，而且也适用于系统的任何一部分。</p>
<p>　　平均顾客数量$L=\lambda/(\mu-\lambda)$，则平均等待时间（排队时间+服务时间）可以计算为：<br>$$<br>W=1/(\mu - \lambda)<br>$$<br>　　平均等待时间为：<br>$$<br>W_q = 1 /(\mu − \lambda) − 1/\mu = \lambda /\mu( \mu − \lambda)<br>$$</p>
<h2 id="有什么用？">有什么用？</h2><p>　　可以根据Little’s Law设计系统中的队列长度——压缩在制品数量，比如Mampa的mailbox长度设计。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://img01.e23.cn/2012/0729/20120729064952752.jpg" alt=""></p>
<h2 id="队列无处不在">队列无处不在</h2><p>　　最近一直在做异步编程框架方面的工作。异步化最重要的几个概念是]]>
    </summary>
    
      <category term="little&#39;s law" scheme="http://lyso.me/tags/little-s-law/"/>
    
      <category term="queueing threory" scheme="http://lyso.me/tags/queueing-threory/"/>
    
      <category term="利特尔法则" scheme="http://lyso.me/tags/%E5%88%A9%E7%89%B9%E5%B0%94%E6%B3%95%E5%88%99/"/>
    
      <category term="并发" scheme="http://lyso.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="异步" scheme="http://lyso.me/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="排队理论" scheme="http://lyso.me/tags/%E6%8E%92%E9%98%9F%E7%90%86%E8%AE%BA/"/>
    
      <category term="泊松过程" scheme="http://lyso.me/tags/%E6%B3%8A%E6%9D%BE%E8%BF%87%E7%A8%8B/"/>
    
      <category term="负指数分布" scheme="http://lyso.me/tags/%E8%B4%9F%E6%8C%87%E6%95%B0%E5%88%86%E5%B8%83/"/>
    
      <category term="马尔科夫链" scheme="http://lyso.me/tags/%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我是谁]]></title>
    <link href="http://lyso.me/2014/07/10/who-am-i/"/>
    <id>http://lyso.me/2014/07/10/who-am-i/</id>
    <published>2014-07-10T14:11:40.000Z</published>
    <updated>2015-11-13T02:24:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="名片">名片</h2><ul>
<li><em>Lyso什么意思？</em> 小时候给自己起网名，本来就想叫ly的，发现要么是闲俩字太短，要么是ly被占用了。于是我就开始分析自己的名字，有三氧化硫之拆解义，故而拼凑上一个so3，于是lyso3就成了网名。但后来疑问也有了，lyso是谁？lyso1和lyso2呢？就干脆叫lyso吧。有朋友发音[li:seu]，正确发音是[laiseu]，同“来搜”。</li>
<li><em>性别</em> 男</li>
<li><em>Email</em> leoyonn@126.com</li>
<li><em>微信</em> leoyonn <em>可以扫名片里的二维码</em></li>
<li><em>米聊</em> 2481178 <em>可以扫名片里的二维码</em></li>
<li><em>linkedin</em> <a href="https://www.linkedin.com/in/leoyonn" target="_blank" rel="external">https://www.linkedin.com/in/leoyonn</a></li>
<li><em>github</em> <a href="https://github.com/leoyonn" target="_blank" rel="external">https://github.com/leoyonn</a><br><img src="http://7jprdp.com1.z0.glb.clouddn.com/cto.png" width="500px"><br><img src="http://lyso.qiniudn.com/leo-vcard-c.png" width="300px"></li>
</ul>
<h2 id="私塾混迹">私塾混迹</h2><ul>
<li>2004.09 ~ 2008.07 北京大学 计算机科学与技术系 本科</li>
<li>2008.09 ~ 2011.07 北京大学 计算机科学与技术系 硕士</li>
</ul>
<h2 id="涉世之初">涉世之初</h2><ul>
<li>2009.02 ~ 2010.06 北京大学信息科学技术学院研会宣传部部长</li>
<li>2006.09 ~ 2007.07 北京大学计算机协会人事部部长</li>
<li>2006.01 ~ 2006.07 北京大学学生服务总队爱心电脑小组组长</li>
</ul>
<h2 id="江湖足迹">江湖足迹</h2><ul>
<li>2007.09 ~ 2007.11 | <em>北京普科新天科技有限公司</em> 兼职</li>
<li>2007.12 ~ 2008.04 | <em>Miparvo Technologies, Inc公司</em> 项目合作</li>
<li>2009.03 ~ 2010.03 | <em>微软亚洲研究院（MSRA）</em> 项目合作</li>
<li>2010.04 ~ 2010.04 | <em>腾讯无线事业部</em> 实习（20天）</li>
<li>2010.07 ~ 2010.09 | <em>百度搜索研发部</em> 实习</li>
<li>2011.03 ~ 2013.04 | <em>网易有道</em> 第一份正式工作</li>
<li>2012.05 ~ 2012.08 | <em>迅知科技</em> 兼职合伙创业</li>
<li>2013.04 ~ 2015.05 | <em>小米科技</em> 第二份正式工作</li>
<li>2015.05 ~ 今 | <em>送姜科技</em> 合伙创业</li>
</ul>
<h2 id="打怪升级">打怪升级</h2><h3 id="2015-05_~_今_|_送姜科技">2015.05 ~ 今 | <em>送姜科技</em></h3><ul>
<li>联合创始人/副总裁/CTO<ul>
<li>主管产品研发部</li>
<li>产品设计</li>
<li>架构搭建</li>
<li>团队组建</li>
<li>流程及工具建立、推进</li>
<li>协助融资<br>-</li>
</ul>
</li>
</ul>
<h3 id="2013-04_~_2015-05_|_小米科技">2013.04 ~ 2015.05 | <em>小米科技</em></h3><ul>
<li><em>小米推送系统</em><ul>
<li>同时在线用户数<em>70,000,000</em>+，日活跃用户数<em>100,000,000</em>+，日发消息量<em>600,000,000</em>+</li>
<li>架构设计及研发主力(初期 2 R&amp;D之一)，包括设计与开发：接口层(HTTP/长连接)、业务逻辑层、存储层(cache/mysql/hbase等schema设计及client端优化)、统计监控及辅助工具等</li>
<li>基于kafka/zookeeper等集群设计实现高吞吐公平性多优先级及流控模块，作为系统中消息发送的核心节点</li>
</ul>
</li>
<li><em>小米开放消息系统</em><ul>
<li>底层架构的设计及开发、接口及业务逻辑层的设计及部分开发、存储层的schema设计</li>
<li>项目驱动(组织讨论分工、组织推动CodeReview/集成测试/每日构建/压力测试，上线进程规范化及推动)</li>
</ul>
</li>
<li><em>基础框架及工具</em><ul>
<li><em>MAMPA</em>：<ul>
<li>小米异步消息处理架构(xiaoMi Asynchronous Message Processing Architecture)</li>
<li>吸取Erlang/Akka等异步并发语言/框架之精化，使用disruptor/自管理线程池等方法，用Actor/ActorGroup/ FSM/ RuleSet等概念将线程安全等问题隐藏，对高吞吐并发服务的开发效率及性能都有较大提升</li>
<li>用自实现非线程安全对象池、预开辟连续空间等方法进一步优化内存使用，尽可能的避免了GC等问题</li>
<li>小米开放消息系统所有服务底层架构、一些异步存储等客户端(redis/hbase/kafka/tracer等)底层架构、小米云平台各底层消息框架正在逐步迁移到此架构上(推送/米信/米聊/米云等，吞吐远高于原架构)</li>
</ul>
</li>
<li><em>Redis-Mampa</em>：<ul>
<li>基于MAMPA的异步redis客户端，与redis-server通过netty4.x用pipeline通信，性能远高于Jedis等客户端</li>
<li>进一步封装成Cache层，可以自定义配置key、value的编解码，简化使用者的工作</li>
</ul>
</li>
<li><em>HBase-Mampa</em>：<ul>
<li>基于MAMPA的异步HBase客户端，对HBase的访问进行了如batch化、多线程化等极致的优化，巧妙避开了hbase-server对batch中的key写请求乱序执行等问题，并基于MAMPA的异步模式提供更丰富的接口类型</li>
</ul>
</li>
<li><em>Xsupervisor</em>：<ul>
<li>根据自定义配置监管多种服务(如redis/twemproxy等)，在推小米推送系统等服务中连续数月稳定运行</li>
<li>提供将监管服务自动注册到zookeeper、根据心跳及时重启宕掉的服务、状态监控及控制终端等功能</li>
</ul>
</li>
<li><em>Jerrymice</em>：<ul>
<li>基于jetty开发的极轻量级restful/web框架，可独立运行或内嵌于其他服务中，用法极简</li>
<li>支持jsp/html等页面渲染及json/xml/plaintext等多种返回方式</li>
<li>支持将任意数据类型通过Model参数送至页面、支持url正则式、支持参数变量化</li>
<li>广泛应用于推送系统/开放消息系统等服务的问题追查/服务状态监控/压力测试/辅助工具等</li>
</ul>
</li>
<li><em>Async-scribe-client</em>：<ul>
<li>用disruptor及一系列优化封装的scribe客户端，将log收集的QPS提升60+倍，应用于第一代Tracer等处</li>
</ul>
</li>
<li><em>Deployer</em>：<ul>
<li>服务一键部署：可将任意子模块部署到不同环境(开发机/测试机/沙箱/线上)的任意机器上</li>
<li>环境一键部署：可将Kafka集群、Redis/Twemproxy集群等轻松部署到不同的环境</li>
</ul>
</li>
<li><em>Tracer</em>：<ul>
<li>为业务系统中用来追踪消息、调查问题开发的框架</li>
<li>展示端使用Jerrymice，收集端第一代使用优化后的scribe、第二代使用kafka+MAMPA+hbase</li>
</ul>
</li>
<li><em>Xmpush/OMS-Console</em>：<ul>
<li>Jerrymice开发，查看服务/机器状态/PerfCounter、查询配置及数据、向服务发送控制命令等辅助工具集</li>
</ul>
</li>
<li><em>Oms-benchmark</em>：<ul>
<li>Jerrymice开发，将所有不同业务模块benchmark及压力测试的工作简化到只需要在页面上点几下按钮</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2011-03_~_2013-04_|_网易有道">2011.03 ~ 2013.04 | <em>网易有道</em></h3><ul>
<li>2012.11 ~ 2013.04 | luna.bisheng组·毕昇资料库项目<ul>
<li>毕昇资料库系统总体设计（包括收集层、存储层、构建层、服务层）</li>
<li>数据定义、构建层、存储层的详细设计与实现</li>
</ul>
</li>
<li>2011.10 ~ 2013.04 | discovery组·网易饭饭项目<ul>
<li>个性化餐馆推荐系统的设计、实现与优化</li>
<li>推荐算法评估方法及流程的设计与实现（自动质量测试流程及功能 / 质量 / 性能评估流程）</li>
<li>服务器端部分接口层、逻辑层及存储系统(包括持久化与缓存系统)的设计与研发</li>
<li>设计及实现“以图识菜”项目（提取图像特征、训练模型并进行菜品分类推测）</li>
<li>组织组内和公司范围的推荐算法及相关技术交流，多次分享相关知识与经验</li>
</ul>
</li>
<li>2011.03 ~ 2012.11 | mobile组·网易八方项目<ul>
<li>网易八方1.8版、2.0版服务器端90%以上的功能开发</li>
<li>自主设计与研发网易八方照片滤镜功能，并大范围分享算法技术和代码</li>
<li>网易八方后台技术组的负责人（2011.09之后），负责项目开发进度、上线以及对运维、运营的技术支持</li>
</ul>
</li>
</ul>
<h3 id="2011-BC_踏足江湖之前">2011.BC 踏足江湖之前</h3><ul>
<li><p>2010.11 ~ 2011.06 | 网格表面并行蓝噪声采样·毕业设计项目</p>
<ul>
<li>创新地结合图论理论与GPU并行计算特征，解决了非均匀网格表面采样并行化问题，极大提高了采样速度</li>
</ul>
</li>
<li><p>2010.07 ~ 2010.09 | 百度搜索研发部（spider）·实习生项目</p>
<ul>
<li>搜索引擎爬虫行为分析，UserAgent抓取对比实验及DNS解析服务器的设计与编码实现</li>
</ul>
</li>
<li><p>2009.03 ~ 2010.03 | LIBRS基于图像的立体绘制系统·公司合作项目</p>
<ul>
<li><em>微软亚洲研究院（MSRA）eHeritage文化遗产数字化研究</em> 的子项目</li>
<li>设计与实现多线程控制双目立体绘制并行流水线，创新地使用多级循环生产者-消费者模式</li>
<li>前后使用cg / CUDA对原算法进行多种基于并行的优化，加速比达到8,000（40FPS x 2 vs. 0.5FPM）</li>
<li>发会议Siggraph Asia 2010（Jie Feng, Yang Liu and Bingfeng Zhou. Real-time Stereo Visual Hull Rendering Using a Multi-GPU-accelerated Pipeline. SIGGRAPH Asia 2010, technical sketch, Seoul, Korea, Article 52, 2010.）</li>
</ul>
</li>
<li><p>2009.03 ~ 2009.05 | 基于内容的图像检索系统·课程项目</p>
<ul>
<li>负责项目规划、系统设计、结果分析、系统整合；负责系统界面与模块接口设计与实现；</li>
<li>负责4种/ 7种图像特征提取的调研与实现；分类准确率达近70%</li>
</ul>
</li>
<li><p>2007.12 ~ 2008.04 | 基于网页的协作地图绘制平台 | <em>Miparvo Technologies, Inc公司</em> 合作项目</p>
<ul>
<li>调研、设计、开发了系统的客户端；使用Silverlight、Microsoft VE SDK、YUI、JavaScript编程</li>
<li>实现了强大的图形绘制、图形修改功能，以及上传下载绘图数据的功能</li>
<li>设计并实现了优秀的用户界面（前后经过3次大改进，甲方负责人非常满意）</li>
</ul>
</li>
<li><p>2007.09 ~ 2007.11 | <em>北京普科新天科技有限公司</em> 兼职实习项目</p>
<ul>
<li>设计和实现了陆地边防视频监控系统客户端控制部分（包括部分界面功能的实现）</li>
</ul>
</li>
</ul>
<h2 id="经验值">经验值</h2><ul>
<li><em>语言</em>：<em>Java、Golang、Erlang、Python、C/C++、CUDA/cg/OpenGL</em></li>
<li><em>并发</em>：Java多线程模型/内存模型及优化、同构/异构并行计算(CPU/GPU)</li>
<li><em>Netty</em>：与前端机器的长连接维持、Redis-MAMPA中与redis/tewmproxy集群服务端的消息传输</li>
<li><em>Disruptor</em>：MAMPA中Actor的mailbox以及其他异步框架中的队列(如async-scribe-client等)</li>
<li><em>Kafka</em>：搭建kafka机群提供推送系统、开放消息系统所有业务的消息中转传输</li>
<li><em>Redis/Twemproxy</em>：修改redis-server源代码(v2.8.7+)，如提供更丰富的过期操作(getex/setex/lrangeex)等</li>
<li><em>HBase</em>：多种业务主要的底层存储，和infra的同事(小米有2个HBase Commiter)一起根据业务类型不同设计schema、优化client以达到更好的读写性能</li>
<li><em>Thrift</em>：用thrift服务提供消息序列化/反序列化、服务注册及查找等功能</li>
<li><em>Scribe</em>：服务集群中多模块的log收集汇总、消息追踪</li>
<li><em>Zookeeper</em>：用以进行配置等信息的统一化管理</li>
<li><em>Phabricator</em>：推动组内同事对phabricator等工具的使用，推动项目代码规范化(如maven规范等)</li>
</ul>
<h2 id="取之江湖，还之江湖">取之江湖，还之江湖</h2><ul>
<li>在学校时对自学的东西做过一些小范围内的讲座</li>
<li>参与一些公益志愿者活动</li>
<li>根据项目需求便利撰写些电子书共享出来，比如 <a href="http://download.csdn.net/detail/lyso1/1999537" target="_blank" rel="external">独立游戏开发指南之开源免费游戏引擎篇</a></li>
<li>组织公司内技术分享，并提供给母公司其他部门</li>
<li>开源项目及公共基础框架开发（参见前述）</li>
<li>送姜技术分享会</li>
<li>本博客</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="名片">名片</h2><ul>
<li><em>Lyso什么意思？</em> 小时候给自己起网名，本来就想叫ly的，发现要么是闲俩字太短，要么是ly被占用了。于是我就开始分析自己的名字，有三氧化硫之拆解义，故而拼凑上一个so3，于是lyso3就成了网名。但后来疑问]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[追查线上问题之——ByteBuf内存泄露]]></title>
    <link href="http://lyso.me/2014/07/01/bytebuf-memleak/"/>
    <id>http://lyso.me/2014/07/01/bytebuf-memleak/</id>
    <published>2014-07-01T13:22:11.000Z</published>
    <updated>2015-04-02T02:46:57.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://content.xilu.com/uploadfile/2011/0815/20110815094715719.jpg" alt="leak"></p>
<p>　　最近新上线的异步化服务，查看perf-counter完全没有达到理论的QPS，于是开始在线下模拟线上情况做实验，结果总是符合理论推算，无法重现线上的情况，甚至一度怀疑是hbase服务集群扛不住压力导致的。在无计可施时，在亮老师和欧老师的指点下，开启了这段分析之旅，这里做个记录，方便有遇到类似问题的童鞋们有个参照。</p>
<h3 id="看进程的情况：top">看进程的情况：top</h3><p><code>[leo@online:~]# top</code></p>
<p>top命令查看这个线程的情况，发现内存占用量很大：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Tasks</span>: <span class="string">254 total,   1 running, 232 sleeping,   0 stopped,  21 zombie</span></span><br><span class="line"><span class="attribute">Cpu(s)</span>: <span class="string">22.7%us,  5.3%sy,  0.0%ni, 71.8%id,  0.0%wa,  0.0%hi,  0.3%si,  0.0%st</span></span><br><span class="line"><span class="attribute">Mem</span>: <span class="string"> 32850724k total, 31968708k used,   882016k free,    88052k buffers</span></span><br><span class="line"><span class="attribute">Swap</span>: <span class="string">12582904k total,   953140k used, 11629764k free, 14371656k cached</span></span><br><span class="line"></span><br><span class="line"><span class="r">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND</span><br><span class="line"><span class="number">13205</span> root      <span class="number">20</span>   <span class="number">0</span> 8120m <span class="number">3.</span>3g  18m S <span class="number">120.7</span> <span class="number">10.7</span>   <span class="number">5890</span>:<span class="number">33</span> java -XX:<span class="keyword">...</span></span><br><span class="line"> <span class="number">5591</span> root      <span class="number">20</span>   <span class="number">0</span> 8835m <span class="number">2.</span>3g <span class="number">9996</span> S <span class="number">33.6</span>  <span class="number">7.5</span>   <span class="number">3491</span>:<span class="number">29</span> java -XX:<span class="keyword">...</span></span></span><br></pre></td></tr></table></figure>
<h3 id="看gc情况：jstat">看gc情况：jstat</h3><p><code>[leo@online:~]# jstat -gcutil 13205 100 10</code></p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">S0     S1     <span class="keyword">E</span>      <span class="keyword">O</span>      P     YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25876</span> <span class="number">24241.376</span> <span class="number">24954.239</span></span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25876</span> <span class="number">24241.376</span> <span class="number">24954.239</span></span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25876</span> <span class="number">24241.376</span> <span class="number">24954.239</span></span><br><span class="line"><span class="number">0.00</span>  <span class="number">97.03</span>  <span class="number">99.56</span>  <span class="number">99.94</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25876</span> <span class="number">24243.470</span> <span class="number">24956.333</span></span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25877</span> <span class="number">24243.470</span> <span class="number">24956.333</span></span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25877</span> <span class="number">24243.470</span> <span class="number">24956.333</span></span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25877</span> <span class="number">24243.470</span> <span class="number">24956.333</span></span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25877</span> <span class="number">24243.470</span> <span class="number">24956.333</span></span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25877</span> <span class="number">24243.470</span> <span class="number">24956.333</span></span><br><span class="line"><span class="number">0.00</span> <span class="number">100.00</span> <span class="number">100.00</span>  <span class="number">99.98</span>  <span class="number">60.00</span>  <span class="number">33453</span>  <span class="number">712.862</span> <span class="number">25877</span> <span class="number">24243.470</span> <span class="number">24956.333</span></span><br></pre></td></tr></table></figure>
<p>　　不看不知道，一看吓一跳：Eden代、老生代全满了，频繁发生Full GC！  </p>
<h3 id="看进程内存占用情况：jmap">看进程内存占用情况：jmap</h3><p><code>[leo@online:~]# jmap -histo:live 13205 | less</code></p>
<figure class="highlight profile"><table><tr><td class="code"><pre><span class="line"> num     #instances         #bytes  class name</span><br><span class="line">----------------------------------------------</span><br><span class="line">   <span class="number">1</span>:         <span class="number">34943</span>     <span class="number">2675903544</span>  [B</span><br><span class="line">   <span class="number">2</span>:       <span class="number">3611235</span>      <span class="number">194315032</span>  [C</span><br><span class="line">   <span class="number">3</span>:       <span class="number">3622541</span>      <span class="number">115921312</span>  <span class="filename">java.lang.String</span><br><span class="line">   4</span>:       <span class="number">1037136</span>       <span class="number">29288720</span>  [J</span><br><span class="line">   <span class="number">5</span>:        <span class="number">979922</span>       <span class="number">23518128</span>  <span class="filename">java.util.BitSet</span><br><span class="line">   6</span>:        <span class="number">407110</span>       <span class="number">19541280</span>  <span class="filename">com.xiaomi.xmpush.thrift.Target</span><br><span class="line">   7</span>:         <span class="number">96961</span>       <span class="number">16289448</span>  <span class="filename">com.xiaomi.xmpush.thrift.XmPushServerContainer</span><br><span class="line">   8</span>:         <span class="number">70627</span>        <span class="number">9615944</span>  &lt;methodKlass&gt;</span><br><span class="line">   <span class="number">9</span>:         <span class="number">70627</span>        <span class="number">9534712</span>  &lt;constMethodKlass&gt;</span><br><span class="line">  <span class="number">10</span>:        <span class="number">158114</span>        <span class="number">8854384</span>  <span class="filename">com.xiaomi.xmpush.thrift.SubscribeTopicInfo</span><br><span class="line">  11</span>:        <span class="number">239540</span>        <span class="number">7665280</span>  <span class="filename">java.util.HashMap$Entry</span><br><span class="line">  12</span>:         <span class="number">76359</span>        <span class="number">6108720</span>  <span class="filename">com.xiaomi.xmpush.thrift.XmPushBroadcastTopic</span><br><span class="line">  13</span>:          <span class="number">5016</span>        <span class="number">6029160</span>  &lt;constantPoolKlass&gt;</span><br><span class="line">  <span class="number">14</span>:         <span class="number">89860</span>        <span class="number">5358112</span>  &lt;symbolKlass&gt;</span><br><span class="line">  <span class="number">15</span>:         <span class="number">80553</span>        <span class="number">5155392</span>  <span class="filename">com.xiaomi.xmpush.thrift.PushMetaInfo</span><br><span class="line">  16</span>:         <span class="number">69778</span>        <span class="number">5148672</span>  [<span class="filename">Ljava.lang.Object;</span><br><span class="line">  17</span>:         <span class="number">72151</span>        <span class="number">4617664</span>  <span class="filename">com.xiaomi.xmpush.thrift.PushRegistrationInfo</span><br><span class="line">  18</span>:         <span class="number">92951</span>        <span class="number">4461648</span>  <span class="filename">io.netty.util.HashedWheelTimer$HashedWheelTimeout</span><br><span class="line">  19</span>:          <span class="number">5016</span>        <span class="number">4450704</span>  &lt;instanceKlassKlass&gt;</span><br><span class="line">  <span class="number">20</span>:         <span class="number">96884</span>        <span class="number">3875360</span>  <span class="filename">com.xiaomi.xmpush.thrift.XmPushActionFetchMessage</span></span><br></pre></td></tr></table></figure>
<p>　　有34943个byte[]示例居然占去了2.5G的内存！得好好分析下这里出了什么问题。<span></span></p>
<h3 id="看进程内存详细占用情况：jmap">看进程内存详细占用情况：jmap</h3><p><code>[leo@online:~]# jmap -dump:format=b,file=/tmp/fetch.13205.bin 13205</code></p>
<p>　　将内存全部dump到本地文件（还是线上机器），然后压缩一下，传输到远程本地机器，并解压： </p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[leo<span class="variable">@online</span><span class="symbol">:~</span>]<span class="comment"># tar cvzf /tmp/fetch.tar.gz /tmp/fetch.13205.bin</span></span><br><span class="line">[leo<span class="variable">@online</span><span class="symbol">:~</span>]<span class="comment"># scp /tmp/fetch.tar.gz leo<span class="yardoctag">@leohost</span>:/tmp</span></span><br><span class="line">[leo<span class="variable">@leohost</span><span class="symbol">:~</span>]<span class="comment"># tar -xvzf /tmp/fetch.tar.gz</span></span><br></pre></td></tr></table></figure>
<h3 id="分析内存：mat">分析内存：mat</h3><p>　　jhat和mat可以查看jmap的结果，jhat挺弱，用mat可以在eclipse安装插件，也可以在这里<a href="http://www.eclipse.org/mat/downloads.php" target="_blank" rel="external">下载mat</a>  </p>
<h4 id="Overview">Overview</h4><p>　　在首页上点击【Open Dump File】，在【Overview】页发现4块大内存占去了绝大部分：<br><img src="http://lyso.qiniudn.com/memleak.4.png" alt="image">  </p>
<h4 id="Dominator_Tree">Dominator Tree</h4><p>　　在这里可以看得到，前四个是 <code>io.netty.buffer.PoolArena$HeapArena</code> 对象。难道我代码里哪里hold住了这么大的内存？印象中没有申请过啊，赶紧去看看吧。<br><img src="http://lyso.qiniudn.com/memleak.1.png" alt="image"> </p>
<h4 id="Reference_Tree">Reference Tree</h4><p>　　在任意一个对象上右击，【Path to GC Root】-&gt;【with all references】，可以看到下图，哈哈，找到了自己的代码（<code>com.xiaomi.mampa.redis.utils.Utils</code>）！<br><img src="http://lyso.qiniudn.com/memleak.3.png" alt="image"><br>　　这里有一段这样的代码：<br><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ByteBufAllocator bufPool = <span class="keyword">new</span> PooledByteBufAllocator();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">ByteBuf <span class="title">allocByteBuf</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> bufPool.<span class="title">buffer</span><span class="params">(initialCapacity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>　　就是这里的问题了，异步pipeline的客户端Redis-Mampa中在序列化前使用ByteBuf对象暂存指令和参数，这个ByteBuf是基于引用计数的，需要用完之后release。后来跟长者陈述这个问题时，长者一拍大腿“哎呀你不早问我！用netty的东西都得自己申请和释放！”。早问你了我不会像这样记这么<strong><em>深刻</em></strong>^^。<span></span></p>
<h3 id="修复">修复</h3><p>　　很简单，用完就release呗：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Encode and write this command to the supplied buffer using the new</span><br><span class="line"> * &lt;a href="http://redis.io/topics/protocol"&gt;Unified Request Protocol&lt;/a&gt;.</span><br><span class="line"> *</span><br><span class="line"> * @param buf Buffer to write to.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> encode(ByteBuf buf) &#123;</span><br><span class="line">    buf<span class="built_in">.</span>writeByte(<span class="string">'*'</span>);</span><br><span class="line">    Utils<span class="built_in">.</span>writeLongAsString(buf, <span class="number">1</span> <span class="subst">+</span> (args <span class="subst">!=</span> <span class="built_in">null</span> <span class="subst">?</span> args<span class="built_in">.</span>count() : <span class="number">0</span>));</span><br><span class="line">    buf<span class="built_in">.</span>writeBytes(Utils<span class="built_in">.</span>CrLf);</span><br><span class="line">    buf<span class="built_in">.</span>writeByte(<span class="string">'$'</span>);</span><br><span class="line">    Utils<span class="built_in">.</span>writeLongAsString(buf, <span class="keyword">type</span><span class="built_in">.</span><span class="built_in">bytes</span><span class="built_in">.</span>length);</span><br><span class="line">    buf<span class="built_in">.</span>writeBytes(Utils<span class="built_in">.</span>CrLf);</span><br><span class="line">    buf<span class="built_in">.</span>writeBytes(<span class="keyword">type</span><span class="built_in">.</span><span class="built_in">bytes</span>);</span><br><span class="line">    buf<span class="built_in">.</span>writeBytes(Utils<span class="built_in">.</span>CrLf);</span><br><span class="line">    <span class="keyword">if</span> (args <span class="subst">!=</span> <span class="built_in">null</span>) &#123;</span><br><span class="line">        buf<span class="built_in">.</span>writeBytes(args<span class="built_in">.</span>buffer());</span><br><span class="line">        args<span class="built_in">.</span>release();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="验证">验证</h3><p>　　好，改完了验证一下。写个循环申请500M内存，分别不release和release，然后sleep住，并用jmap将内存dump出来用mat查看，得到下列两幅图，验证成功。<br><img src="http://lyso.qiniudn.com/memleak.5.png" alt="不进行release的内存使用"><br><img src="http://lyso.qiniudn.com/memleak.6.png" alt="进行release的内存使用"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://content.xilu.com/uploadfile/2011/0815/20110815094715719.jpg" alt="leak"></p>
<p>　　最近新上线的异步化服务，查看perf-counter完全没有达到理论的QPS]]>
    </summary>
    
      <category term="ByteBuf" scheme="http://lyso.me/tags/ByteBuf/"/>
    
      <category term="MAT" scheme="http://lyso.me/tags/MAT/"/>
    
      <category term="NIO" scheme="http://lyso.me/tags/NIO/"/>
    
      <category term="Netty" scheme="http://lyso.me/tags/Netty/"/>
    
      <category term="PolledByteBufAllocator" scheme="http://lyso.me/tags/PolledByteBufAllocator/"/>
    
      <category term="jhat" scheme="http://lyso.me/tags/jhat/"/>
    
      <category term="jmap" scheme="http://lyso.me/tags/jmap/"/>
    
      <category term="内存泄露" scheme="http://lyso.me/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[餐后小记]]></title>
    <link href="http://lyso.me/2014/06/28/after-dine-with-classmates/"/>
    <id>http://lyso.me/2014/06/28/after-dine-with-classmates/</id>
    <published>2014-06-28T15:22:11.000Z</published>
    <updated>2015-04-02T02:46:57.000Z</updated>
    <content type="html"><![CDATA[<p>　　十几个同学的聚会，顺便去车库咖啡聊聊天，装模作样的码了几百行代码，才发现我这已有一年多的时间“两耳不闻屏外事，一心只做程序员”了。偏信则暗兼听则明，那段时间内跟好多前辈和朋友聊天，收获颇丰，记得跟本来生活喻华峰聊后写了一篇日志总结当时的心情。这一年多来自己在技术上有了很多的进步和收获，但似乎也局限了思考问题的角度。我本以为自己会是安心做事专研一术，但时代似乎给我们这代人的压力让我们变得浮躁和急功近利，尤其再加上传统家庭观念中生养相关的一系列待解决的问题。以前我也爱说，“钱能解决的问题都不是问题”，但面前摆着一坨需要钱才能解决的问题时，跟自己谈理想时自己都觉得心虚。前段时间领导说“如果像你这样有能力又上进的好员工都不能得到应有的，那这个社会太不公太操蛋了”让我鼻子猛的发酸，冷静下来想想这社会的确处处有着不公和操蛋。天航今天在车里问，人活着图个什么，我没答案，说不图什么。但我觉得人在做的，是自己逼自己，逼自己多想想多看看多动动多做点什么，让自己担负起社会和家庭责任之余能留出一片做梦的空白，免得走的太慢而被现实逼疯。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>　　十几个同学的聚会，顺便去车库咖啡聊聊天，装模作样的码了几百行代码，才发现我这已有一年多的时间“两耳不闻屏外事，一心只做程序员”了。偏信则暗兼听则明，那段时间内跟好多前辈和朋友聊天，收获颇丰，记得跟本来生活喻华峰聊后写了一篇日志总结当时的心情。这一年多来自己在技术上有了很]]>
    </summary>
    
      <category term="80后" scheme="http://lyso.me/tags/80%E5%90%8E/"/>
    
      <category term="人生" scheme="http://lyso.me/tags/%E4%BA%BA%E7%94%9F/"/>
    
      <category term="现实" scheme="http://lyso.me/tags/%E7%8E%B0%E5%AE%9E/"/>
    
      <category term="理想" scheme="http://lyso.me/tags/%E7%90%86%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[遗憾却也不易的亚军（多图^^）]]></title>
    <link href="http://lyso.me/2014/06/27/badminton-second-mi/"/>
    <id>http://lyso.me/2014/06/27/badminton-second-mi/</id>
    <published>2014-06-27T15:22:11.000Z</published>
    <updated>2015-04-02T02:46:57.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://lyso.qiniudn.com/badminton.2.jpg" alt="image"></p>
<h2 id="遗憾，也很不易。">遗憾，也很不易。</h2><p>我们队名叫云由队，即路由器/云平台队。</p>
<p>小组赛第一轮对阵小米网，在开赛前拉了拉球，我觉得状态还不错，跟荣堂商量谁打男单时我自告奋勇上了场。但比赛时各种失误和动作僵硬，竟将一场势在必得的比赛输掉了。后续的比赛赢了两场，总比分2:3输掉。</p>
<h2 id="球友的重要性">球友的重要性</h2><h2 id="专项训练">专项训练</h2><h2 id="记着什么，忘掉什么">记着什么，忘掉什么</h2><p><img src="http://lyso.qiniudn.com/badminton.1.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.3.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.4.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.5.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.6.jpg" alt="image"></p>
<p>再来几张好搭档荣堂的后场动作：）<br><img src="http://lyso.qiniudn.com/badminton.27.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.28.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.29.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.30.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.31.jpg" alt="image"><br><img src="http://lyso.qiniudn.com/badminton.32.jpg" alt="image"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://lyso.qiniudn.com/badminton.2.jpg" alt="image"></p>
<h2 id="遗憾，也很不易。">遗憾，也很不易。</h2><p>我们队名叫云由队，即路由器/云平台队。</p>
<p>小组赛第一轮对阵]]>
    </summary>
    
      <category term="亚军" scheme="http://lyso.me/tags/%E4%BA%9A%E5%86%9B/"/>
    
      <category term="小米" scheme="http://lyso.me/tags/%E5%B0%8F%E7%B1%B3/"/>
    
      <category term="小米羽毛球联赛" scheme="http://lyso.me/tags/%E5%B0%8F%E7%B1%B3%E7%BE%BD%E6%AF%9B%E7%90%83%E8%81%94%E8%B5%9B/"/>
    
      <category term="羽毛球" scheme="http://lyso.me/tags/%E7%BE%BD%E6%AF%9B%E7%90%83/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[十年]]></title>
    <link href="http://lyso.me/2014/06/25/ten-years/"/>
    <id>http://lyso.me/2014/06/25/ten-years/</id>
    <published>2014-06-25T15:22:11.000Z</published>
    <updated>2015-04-02T02:46:57.000Z</updated>
    <content type="html"><![CDATA[<p>2004年来北京念大学，至今十年。</p>
<p>TO BE CONTINUED…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2004年来北京念大学，至今十年。</p>
<p>TO BE CONTINUED…</p>
]]>
    </summary>
    
  </entry>
  
</feed>